1     0000              MODULE rc2014_crt_asm_m4
2     0000              LINE 0, "/home/phillip/Z80/z88dk/lib/config/../..//libsrc/_DEVELOPMENT/target/rc2014/rc2014_crt.asm.m4"
0     0000              
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ; SELECT CRT0 FROM -STARTUP=N COMMANDLINE OPTION ;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              
7     0000              IF !DEFINED_CLIB_32BIT_FLOATS
8     0000              	defc	DEFINED_CLIB_32BIT_FLOATS = 1
9     0000              	defc CLIB_32BIT_FLOATS = 1
10    0000              	IFNDEF CLIB_32BIT_FLOATS
11    0000              	ENDIF
12    0000              ENDIF
13    0000              
14    0000              
15    0000              IF !DEFINED_startup
16    0000              	defc	DEFINED_startup = 1
17    0000              	defc startup = 64
18    0000              	IFNDEF startup
19    0000              	ENDIF
20    0000              ENDIF
21    0000              
22    0000              
23    0000              IF !DEFINED_CLIB_OPT_PRINTF
24    0000              	defc	DEFINED_CLIB_OPT_PRINTF = 1
25    0000              	defc CLIB_OPT_PRINTF = 0x601
26    0000              	IFNDEF CLIB_OPT_PRINTF
27    0000              	ENDIF
28    0000              ENDIF
29    0000              
30    0000              
31    0000              IF !DEFINED_CLIB_OPT_PRINTF_2
32    0000              	defc	DEFINED_CLIB_OPT_PRINTF_2 = 1
33    0000              	defc CLIB_OPT_PRINTF_2 = 0
34    0000              	IFNDEF CLIB_OPT_PRINTF_2
35    0000              	ENDIF
36    0000              ENDIF
37    0000              
38    0000              
39    0000              
40    0000              
41    0000              
42    0000              
43    0000              IFNDEF startup
44    0000              
45    0000                 ; startup undefined so select a default
46    0000              
47    0000                 defc startup = 64
48    0000              
49    0000              ENDIF
50    0000              
51    0000              
52    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
53    0000              ;; user supplied crt ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
54    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
55    0000              
56    0000              
57    0000              
58    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
59    0000              ;; acia driver ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
60    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
61    0000              
62    0000              
63    0000              
64    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
65    0000              ;; sio driver ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
66    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
67    0000              
68    0000              
69    0000              
70    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
71    0000              ;; hbios driver ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
72    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
73    0000              
74    0000              
75    0000              
76    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
77    0000              ;; basic driver ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
78    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
79    0000              
80    0000              
81    0000              
82    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
83    0000              ;; cp/m native console ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
84    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
85    0000              
86    0000              
87    0000              
88    0000                 ; stdin  = cpm_00_input_cons (bdos function 10)
89    0000                 ; stdout = cpm_00_output_cons (bdos function 2)
90    0000                 ; stderr = dup(stdout)
91    0000                 ; stdrdr = cpm_00_input_reader (bdos function 3)
92    0000                 ; stdpun = cpm_00_output_punch (bdos function 4)
93    0000                 ; stdlst = cpm_00_output_list (bdos function 5)
94    0000              
95    0000                 IFNDEF __CRTCFG
96    0000              
97    0000                    defc __CRTCFG = 4
98    0000              
99    0000                 ENDIF
100   0000              
101   0000                 IFNDEF __MMAP
102   0000              
103   0000                    defc __MMAP = 0
104   0000              
105   0000                 ENDIF
106   0000              
107   0000              
108   0000              
109   0000              
110   0000              
111   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
112   0000              ;;                    rc2014 cpm ram model                   ;;
113   0000              ;; generated by target/rc2014/startup/rc2014_crt_64.asm.m4   ;;
114   0000              ;;                                                           ;;
115   0000              ;;                  flat 64k address space                   ;;
116   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
117   0000              
118   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
119   0000              ;; GLOBAL SYMBOLS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
120   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
121   0000              
122   0000              include "config_rc2014_public.inc"
1     0000              
2     0000              
3     0000              
4     0000              
5     0000              IFNDEF __CONFIG_Z88DK_INC_
6     0000              defc   __CONFIG_Z88DK_INC_ = 1
7     0000              
8     0000              ; Automatically Generated at Library Build Time
9     0000              
10    0000              
11    0000              
12    0000              
13    0000              
14    0000              
15    0000              
16    0000              
17    0000              
18    0000              
19    0000              PUBLIC __Z88DK
20    0000              
21    0000              
22    0000              
23    0000              
24    0000              defc __Z88DK = 2100
25    0000              
26    0000              
27    0000              
28    0000              
29    0000              
30    0000              
31    0000              
32    0000              
33    0000              
34    0000              PUBLIC __RC2014
35    0000              
36    0000              PUBLIC __CPU_CLOCK
37    0000              
38    0000              PUBLIC __IO_DIO_PORT
39    0000              PUBLIC __IO_CF_PORT
40    0000              PUBLIC __IO_PIO_PORT_BASE
41    0000              PUBLIC __IO_RAM_TOGGLE
42    0000              PUBLIC __IO_ROM_TOGGLE
43    0000              PUBLIC __IO_LUT_PORT_BASE
44    0000              PUBLIC __IO_APU_PORT_BASE
45    0000              PUBLIC __IO_APU0_PORT_BASE
46    0000              PUBLIC __IO_APU1_PORT_BASE
47    0000              PUBLIC __IO_APU2_PORT_BASE
48    0000              PUBLIC __IO_APU3_PORT_BASE
49    0000              PUBLIC __IO_ACIA_PORT_BASE
50    0000              PUBLIC __IO_SIO_PORT_BASE
51    0000              PUBLIC __IO_SIO_PORT_OFFSET_A
52    0000              PUBLIC __IO_SIO_PORT_OFFSET_B
53    0000              PUBLIC __IO_SIO_PORT_OFFSET_C
54    0000              PUBLIC __IO_SIO_PORT_OFFSET_D
55    0000              
56    0000              
57    0000              
58    0000              
59    0000              defc __RC2014 = 1
60    0000              
61    0000              defc __CPU_CLOCK = 7372800
62    0000              
63    0000              defc __IO_DIO_PORT = 0x00
64    0000              defc __IO_CF_PORT = 0x10
65    0000              defc __IO_PIO_PORT_BASE = 0x20
66    0000              defc __IO_RAM_TOGGLE = 0x30
67    0000              defc __IO_ROM_TOGGLE = 0x38
68    0000              defc __IO_LUT_PORT_BASE = 0x40
69    0000              defc __IO_APU_PORT_BASE = 0x42
70    0000              defc __IO_APU0_PORT_BASE = 0x42
71    0000              defc __IO_APU1_PORT_BASE = 0x62
72    0000              defc __IO_APU2_PORT_BASE = 0xC2
73    0000              defc __IO_APU3_PORT_BASE = 0xE2
74    0000              defc __IO_ACIA_PORT_BASE = 0x80
75    0000              defc __IO_SIO_PORT_BASE = 0x80
76    0000              defc __IO_SIO_PORT_OFFSET_A = 0x00
77    0000              defc __IO_SIO_PORT_OFFSET_B = 0x02
78    0000              defc __IO_SIO_PORT_OFFSET_C = 0x00
79    0000              defc __IO_SIO_PORT_OFFSET_D = 0x01
80    0000              
81    0000              
82    0000              
83    0000              
84    0000              
85    0000              
86    0000              
87    0000              
88    0000              
89    0000              PUBLIC __Z80
90    0000              
91    0000              PUBLIC __Z80_NMOS
92    0000              PUBLIC __Z80_CMOS
93    0000              
94    0000              PUBLIC __CPU_INFO
95    0000              PUBLIC __CPU_INFO_ENABLE_SLL
96    0000              
97    0000              
98    0000              
99    0000              
100   0000              defc __Z80 = 0x02
101   0000              
102   0000              defc __Z80_NMOS = 0x01
103   0000              defc __Z80_CMOS = 0x02
104   0000              
105   0000              defc __CPU_INFO = 0x00
106   0000              defc __CPU_INFO_ENABLE_SLL = 0x01
107   0000              
108   0000              
109   0000              
110   0000              
111   0000              
112   0000              
113   0000              
114   0000              
115   0000              
116   0000              PUBLIC __CLIB_OPT_MULTITHREAD
117   0000              
118   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_HEAPS
119   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FILES
120   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FLIST
121   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FDTBL
122   0000              PUBLIC __CLIB_OPT_MULTITHREAD_LOCK_FDSTR
123   0000              
124   0000              PUBLIC __CLIB_OPT_IMATH
125   0000              
126   0000              PUBLIC __CLIB_OPT_IMATH_FAST
127   0000              
128   0000              PUBLIC __CLIB_OPT_IMATH_FAST_DIV_UNROLL
129   0000              PUBLIC __CLIB_OPT_IMATH_FAST_DIV_LZEROS
130   0000              PUBLIC __CLIB_OPT_IMATH_FAST_MUL_UNROLL
131   0000              PUBLIC __CLIB_OPT_IMATH_FAST_MUL_LZEROS
132   0000              PUBLIC __CLIB_OPT_IMATH_FAST_LIA
133   0000              
134   0000              PUBLIC __CLIB_OPT_IMATH_SELECT
135   0000              
136   0000              PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_ASR
137   0000              PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_LSR
138   0000              PUBLIC __CLIB_OPT_IMATH_SELECT_FAST_LSL
139   0000              
140   0000              PUBLIC __CLIB_OPT_TXT2NUM
141   0000              
142   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_BIN
143   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_OCT
144   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_DEC
145   0000              PUBLIC __CLIB_OPT_TXT2NUM_INT_HEX
146   0000              
147   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_BIN
148   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_OCT
149   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_DEC
150   0000              PUBLIC __CLIB_OPT_TXT2NUM_LONG_HEX
151   0000              
152   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT
153   0000              
154   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_BIN
155   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_OCT
156   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_DEC
157   0000              PUBLIC __CLIB_OPT_TXT2NUM_SELECT_FAST_HEX
158   0000              
159   0000              PUBLIC __CLIB_OPT_NUM2TXT
160   0000              
161   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_BIN
162   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_OCT
163   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_DEC
164   0000              PUBLIC __CLIB_OPT_NUM2TXT_INT_HEX
165   0000              
166   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_BIN
167   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_OCT
168   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_DEC
169   0000              PUBLIC __CLIB_OPT_NUM2TXT_LONG_HEX
170   0000              
171   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT
172   0000              
173   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_BIN
174   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_OCT
175   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_DEC
176   0000              PUBLIC __CLIB_OPT_NUM2TXT_SELECT_FAST_HEX
177   0000              
178   0000              PUBLIC __CLIB_OPT_STDIO
179   0000              
180   0000              PUBLIC __CLIB_OPT_STDIO_VALID
181   0000              
182   0000              PUBLIC CHAR_CR
183   0000              PUBLIC CHAR_LF
184   0000              PUBLIC CHAR_BS
185   0000              PUBLIC CHAR_ESC
186   0000              PUBLIC CHAR_CAPS
187   0000              PUBLIC CHAR_BELL
188   0000              PUBLIC CHAR_CTRL_C
189   0000              PUBLIC CHAR_CTRL_D
190   0000              PUBLIC CHAR_CTRL_Z
191   0000              PUBLIC CHAR_CURSOR_UC
192   0000              PUBLIC CHAR_CURSOR_LC
193   0000              PUBLIC CHAR_PASSWORD
194   0000              
195   0000              PUBLIC __CLIB_OPT_PRINTF
196   0000              
197   0000              PUBLIC __CLIB_OPT_PRINTF_d
198   0000              PUBLIC __CLIB_OPT_PRINTF_u
199   0000              PUBLIC __CLIB_OPT_PRINTF_x
200   0000              PUBLIC __CLIB_OPT_PRINTF_X
201   0000              PUBLIC __CLIB_OPT_PRINTF_o
202   0000              PUBLIC __CLIB_OPT_PRINTF_n
203   0000              PUBLIC __CLIB_OPT_PRINTF_i
204   0000              PUBLIC __CLIB_OPT_PRINTF_p
205   0000              PUBLIC __CLIB_OPT_PRINTF_B
206   0000              PUBLIC __CLIB_OPT_PRINTF_s
207   0000              PUBLIC __CLIB_OPT_PRINTF_c
208   0000              PUBLIC __CLIB_OPT_PRINTF_I
209   0000              PUBLIC __CLIB_OPT_PRINTF_ld
210   0000              PUBLIC __CLIB_OPT_PRINTF_lu
211   0000              PUBLIC __CLIB_OPT_PRINTF_lx
212   0000              PUBLIC __CLIB_OPT_PRINTF_lX
213   0000              PUBLIC __CLIB_OPT_PRINTF_lo
214   0000              PUBLIC __CLIB_OPT_PRINTF_ln
215   0000              PUBLIC __CLIB_OPT_PRINTF_li
216   0000              PUBLIC __CLIB_OPT_PRINTF_lp
217   0000              PUBLIC __CLIB_OPT_PRINTF_lB
218   0000              PUBLIC __CLIB_OPT_PRINTF_a
219   0000              PUBLIC __CLIB_OPT_PRINTF_A
220   0000              PUBLIC __CLIB_OPT_PRINTF_e
221   0000              PUBLIC __CLIB_OPT_PRINTF_E
222   0000              PUBLIC __CLIB_OPT_PRINTF_f
223   0000              PUBLIC __CLIB_OPT_PRINTF_F
224   0000              PUBLIC __CLIB_OPT_PRINTF_g
225   0000              PUBLIC __CLIB_OPT_PRINTF_G
226   0000              
227   0000              PUBLIC __CLIB_OPT_PRINTF_2
228   0000              
229   0000              PUBLIC __CLIB_OPT_PRINTF_2_lld
230   0000              PUBLIC __CLIB_OPT_PRINTF_2_llu
231   0000              PUBLIC __CLIB_OPT_PRINTF_2_llx
232   0000              PUBLIC __CLIB_OPT_PRINTF_2_llX
233   0000              PUBLIC __CLIB_OPT_PRINTF_2_llo
234   0000              PUBLIC __CLIB_OPT_PRINTF_2_lli
235   0000              
236   0000              PUBLIC __CLIB_OPT_SCANF
237   0000              
238   0000              PUBLIC __CLIB_OPT_SCANF_d
239   0000              PUBLIC __CLIB_OPT_SCANF_u
240   0000              PUBLIC __CLIB_OPT_SCANF_x
241   0000              PUBLIC __CLIB_OPT_SCANF_X
242   0000              PUBLIC __CLIB_OPT_SCANF_o
243   0000              PUBLIC __CLIB_OPT_SCANF_n
244   0000              PUBLIC __CLIB_OPT_SCANF_i
245   0000              PUBLIC __CLIB_OPT_SCANF_p
246   0000              PUBLIC __CLIB_OPT_SCANF_B
247   0000              PUBLIC __CLIB_OPT_SCANF_s
248   0000              PUBLIC __CLIB_OPT_SCANF_c
249   0000              PUBLIC __CLIB_OPT_SCANF_I
250   0000              PUBLIC __CLIB_OPT_SCANF_ld
251   0000              PUBLIC __CLIB_OPT_SCANF_lu
252   0000              PUBLIC __CLIB_OPT_SCANF_lx
253   0000              PUBLIC __CLIB_OPT_SCANF_lX
254   0000              PUBLIC __CLIB_OPT_SCANF_lo
255   0000              PUBLIC __CLIB_OPT_SCANF_ln
256   0000              PUBLIC __CLIB_OPT_SCANF_li
257   0000              PUBLIC __CLIB_OPT_SCANF_lp
258   0000              PUBLIC __CLIB_OPT_SCANF_lB
259   0000              PUBLIC __CLIB_OPT_SCANF_BRACKET
260   0000              PUBLIC __CLIB_OPT_SCANF_a
261   0000              PUBLIC __CLIB_OPT_SCANF_A
262   0000              PUBLIC __CLIB_OPT_SCANF_e
263   0000              PUBLIC __CLIB_OPT_SCANF_E
264   0000              PUBLIC __CLIB_OPT_SCANF_f
265   0000              PUBLIC __CLIB_OPT_SCANF_F
266   0000              PUBLIC __CLIB_OPT_SCANF_g
267   0000              PUBLIC __CLIB_OPT_SCANF_G
268   0000              
269   0000              PUBLIC __CLIB_OPT_SCANF_2
270   0000              
271   0000              PUBLIC __CLIB_OPT_SCANF_2_lld
272   0000              PUBLIC __CLIB_OPT_SCANF_2_llu
273   0000              PUBLIC __CLIB_OPT_SCANF_2_llx
274   0000              PUBLIC __CLIB_OPT_SCANF_2_llX
275   0000              PUBLIC __CLIB_OPT_SCANF_2_llo
276   0000              PUBLIC __CLIB_OPT_SCANF_2_lli
277   0000              
278   0000              PUBLIC __CLIB_OPT_UNROLL
279   0000              
280   0000              PUBLIC __CLIB_OPT_UNROLL_MEMCPY
281   0000              PUBLIC __CLIB_OPT_UNROLL_MEMSET
282   0000              PUBLIC __CLIB_OPT_UNROLL_OTIR
283   0000              PUBLIC __CLIB_OPT_UNROLL_LDIR
284   0000              PUBLIC __CLIB_OPT_UNROLL_USER_SMC
285   0000              PUBLIC __CLIB_OPT_UNROLL_LIB_SMC
286   0000              
287   0000              PUBLIC __CLIB_OPT_STRTOD
288   0000              
289   0000              PUBLIC __CLIB_OPT_STRTOD_NAN
290   0000              PUBLIC __CLIB_OPT_STRTOD_INF
291   0000              PUBLIC __CLIB_OPT_STRTOD_HEX
292   0000              
293   0000              PUBLIC __CLIB_OPT_SORT
294   0000              
295   0000              PUBLIC __CLIB_OPT_SORT_INSERTION
296   0000              PUBLIC __CLIB_OPT_SORT_SHELL
297   0000              PUBLIC __CLIB_OPT_SORT_QUICK
298   0000              
299   0000              PUBLIC __CLIB_OPT_SORT_QSORT
300   0000              
301   0000              PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT
302   0000              PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT_MID
303   0000              PUBLIC __CLIB_OPT_SORT_QSORT_PIVOT_RAN
304   0000              PUBLIC __CLIB_OPT_SORT_QSORT_ENABLE_INSERTION
305   0000              PUBLIC __CLIB_OPT_SORT_QSORT_ENABLE_EQUAL
306   0000              
307   0000              PUBLIC __CLIB_OPT_ERROR
308   0000              
309   0000              PUBLIC __CLIB_OPT_ERROR_ENABLED
310   0000              PUBLIC __CLIB_OPT_ERROR_VERBOSE
311   0000              
312   0000              
313   0000              
314   0000              
315   0000              defc __CLIB_OPT_MULTITHREAD = 0x00
316   0000              
317   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_HEAPS = 0x01
318   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FILES = 0x02
319   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FLIST = 0x04
320   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FDTBL = 0x08
321   0000              defc __CLIB_OPT_MULTITHREAD_LOCK_FDSTR = 0x10
322   0000              
323   0000              defc __CLIB_OPT_IMATH = 75
324   0000              
325   0000              defc __CLIB_OPT_IMATH_FAST = 0x0f
326   0000              
327   0000              defc __CLIB_OPT_IMATH_FAST_DIV_UNROLL = 0x01
328   0000              defc __CLIB_OPT_IMATH_FAST_DIV_LZEROS = 0x02
329   0000              defc __CLIB_OPT_IMATH_FAST_MUL_UNROLL = 0x04
330   0000              defc __CLIB_OPT_IMATH_FAST_MUL_LZEROS = 0x08
331   0000              defc __CLIB_OPT_IMATH_FAST_LIA = 0x80
332   0000              
333   0000              defc __CLIB_OPT_IMATH_SELECT = 0x00
334   0000              
335   0000              defc __CLIB_OPT_IMATH_SELECT_FAST_ASR = 0x01
336   0000              defc __CLIB_OPT_IMATH_SELECT_FAST_LSR = 0x02
337   0000              defc __CLIB_OPT_IMATH_SELECT_FAST_LSL = 0x04
338   0000              
339   0000              defc __CLIB_OPT_TXT2NUM = 0x04
340   0000              
341   0000              defc __CLIB_OPT_TXT2NUM_INT_BIN = 0x01
342   0000              defc __CLIB_OPT_TXT2NUM_INT_OCT = 0x02
343   0000              defc __CLIB_OPT_TXT2NUM_INT_DEC = 0x04
344   0000              defc __CLIB_OPT_TXT2NUM_INT_HEX = 0x08
345   0000              
346   0000              defc __CLIB_OPT_TXT2NUM_LONG_BIN = 0x10
347   0000              defc __CLIB_OPT_TXT2NUM_LONG_OCT = 0x20
348   0000              defc __CLIB_OPT_TXT2NUM_LONG_DEC = 0x40
349   0000              defc __CLIB_OPT_TXT2NUM_LONG_HEX = 0x80
350   0000              
351   0000              defc __CLIB_OPT_TXT2NUM_SELECT = 0x00
352   0000              
353   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_BIN = 0x01
354   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_OCT = 0x02
355   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_DEC = 0x04
356   0000              defc __CLIB_OPT_TXT2NUM_SELECT_FAST_HEX = 0x08
357   0000              
358   0000              defc __CLIB_OPT_NUM2TXT = 0x00
359   0000              
360   0000              defc __CLIB_OPT_NUM2TXT_INT_BIN = 0x01
361   0000              defc __CLIB_OPT_NUM2TXT_INT_OCT = 0x02
362   0000              defc __CLIB_OPT_NUM2TXT_INT_DEC = 0x04
363   0000              defc __CLIB_OPT_NUM2TXT_INT_HEX = 0x08
364   0000              
365   0000              defc __CLIB_OPT_NUM2TXT_LONG_BIN = 0x10
366   0000              defc __CLIB_OPT_NUM2TXT_LONG_OCT = 0x20
367   0000              defc __CLIB_OPT_NUM2TXT_LONG_DEC = 0x40
368   0000              defc __CLIB_OPT_NUM2TXT_LONG_HEX = 0x80
369   0000              
370   0000              defc __CLIB_OPT_NUM2TXT_SELECT = 0x00
371   0000              
372   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_BIN = 0x01
373   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_OCT = 0x02
374   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_DEC = 0x04
375   0000              defc __CLIB_OPT_NUM2TXT_SELECT_FAST_HEX = 0x08
376   0000              
377   0000              defc __CLIB_OPT_STDIO = 0x00
378   0000              
379   0000              defc __CLIB_OPT_STDIO_VALID = 0x01
380   0000              
381   0000              defc CHAR_CR = 13
382   0000              defc CHAR_LF = 10
383   0000              defc CHAR_BS = 8
384   0000              defc CHAR_ESC = 27
385   0000              defc CHAR_CAPS = 6
386   0000              defc CHAR_BELL = 7
387   0000              defc CHAR_CTRL_C = 3
388   0000              defc CHAR_CTRL_D = 4
389   0000              defc CHAR_CTRL_Z = 26
390   0000              defc CHAR_CURSOR_UC = 45
391   0000              defc CHAR_CURSOR_LC = 95
392   0000              defc CHAR_PASSWORD = 42
393   0000              
394   0000              defc __CLIB_OPT_PRINTF = 0x002ff6ff
395   0000              
396   0000              defc __CLIB_OPT_PRINTF_d = 0x00000001
397   0000              defc __CLIB_OPT_PRINTF_u = 0x00000002
398   0000              defc __CLIB_OPT_PRINTF_x = 0x00000004
399   0000              defc __CLIB_OPT_PRINTF_X = 0x00000008
400   0000              defc __CLIB_OPT_PRINTF_o = 0x00000010
401   0000              defc __CLIB_OPT_PRINTF_n = 0x00000020
402   0000              defc __CLIB_OPT_PRINTF_i = 0x00000040
403   0000              defc __CLIB_OPT_PRINTF_p = 0x00000080
404   0000              defc __CLIB_OPT_PRINTF_B = 0x00000100
405   0000              defc __CLIB_OPT_PRINTF_s = 0x00000200
406   0000              defc __CLIB_OPT_PRINTF_c = 0x00000400
407   0000              defc __CLIB_OPT_PRINTF_I = 0x00000800
408   0000              defc __CLIB_OPT_PRINTF_ld = 0x00001000
409   0000              defc __CLIB_OPT_PRINTF_lu = 0x00002000
410   0000              defc __CLIB_OPT_PRINTF_lx = 0x00004000
411   0000              defc __CLIB_OPT_PRINTF_lX = 0x00008000
412   0000              defc __CLIB_OPT_PRINTF_lo = 0x00010000
413   0000              defc __CLIB_OPT_PRINTF_ln = 0x00020000
414   0000              defc __CLIB_OPT_PRINTF_li = 0x00040000
415   0000              defc __CLIB_OPT_PRINTF_lp = 0x00080000
416   0000              defc __CLIB_OPT_PRINTF_lB = 0x00100000
417   0000              defc __CLIB_OPT_PRINTF_a = 0x00400000
418   0000              defc __CLIB_OPT_PRINTF_A = 0x00800000
419   0000              defc __CLIB_OPT_PRINTF_e = 0x01000000
420   0000              defc __CLIB_OPT_PRINTF_E = 0x02000000
421   0000              defc __CLIB_OPT_PRINTF_f = 0x04000000
422   0000              defc __CLIB_OPT_PRINTF_F = 0x08000000
423   0000              defc __CLIB_OPT_PRINTF_g = 0x10000000
424   0000              defc __CLIB_OPT_PRINTF_G = 0x20000000
425   0000              
426   0000              defc __CLIB_OPT_PRINTF_2 = 0x00
427   0000              
428   0000              defc __CLIB_OPT_PRINTF_2_lld = 0x01
429   0000              defc __CLIB_OPT_PRINTF_2_llu = 0x02
430   0000              defc __CLIB_OPT_PRINTF_2_llx = 0x04
431   0000              defc __CLIB_OPT_PRINTF_2_llX = 0x08
432   0000              defc __CLIB_OPT_PRINTF_2_llo = 0x10
433   0000              defc __CLIB_OPT_PRINTF_2_lli = 0x40
434   0000              
435   0000              defc __CLIB_OPT_SCANF = 0x002ff6ff
436   0000              
437   0000              defc __CLIB_OPT_SCANF_d = 0x00000001
438   0000              defc __CLIB_OPT_SCANF_u = 0x00000002
439   0000              defc __CLIB_OPT_SCANF_x = 0x00000004
440   0000              defc __CLIB_OPT_SCANF_X = 0x00000008
441   0000              defc __CLIB_OPT_SCANF_o = 0x00000010
442   0000              defc __CLIB_OPT_SCANF_n = 0x00000020
443   0000              defc __CLIB_OPT_SCANF_i = 0x00000040
444   0000              defc __CLIB_OPT_SCANF_p = 0x00000080
445   0000              defc __CLIB_OPT_SCANF_B = 0x00000100
446   0000              defc __CLIB_OPT_SCANF_s = 0x00000200
447   0000              defc __CLIB_OPT_SCANF_c = 0x00000400
448   0000              defc __CLIB_OPT_SCANF_I = 0x00000800
449   0000              defc __CLIB_OPT_SCANF_ld = 0x00001000
450   0000              defc __CLIB_OPT_SCANF_lu = 0x00002000
451   0000              defc __CLIB_OPT_SCANF_lx = 0x00004000
452   0000              defc __CLIB_OPT_SCANF_lX = 0x00008000
453   0000              defc __CLIB_OPT_SCANF_lo = 0x00010000
454   0000              defc __CLIB_OPT_SCANF_ln = 0x00020000
455   0000              defc __CLIB_OPT_SCANF_li = 0x00040000
456   0000              defc __CLIB_OPT_SCANF_lp = 0x00080000
457   0000              defc __CLIB_OPT_SCANF_lB = 0x00100000
458   0000              defc __CLIB_OPT_SCANF_BRACKET = 0x00200000
459   0000              defc __CLIB_OPT_SCANF_a = 0x00400000
460   0000              defc __CLIB_OPT_SCANF_A = 0x00800000
461   0000              defc __CLIB_OPT_SCANF_e = 0x01000000
462   0000              defc __CLIB_OPT_SCANF_E = 0x02000000
463   0000              defc __CLIB_OPT_SCANF_f = 0x04000000
464   0000              defc __CLIB_OPT_SCANF_F = 0x08000000
465   0000              defc __CLIB_OPT_SCANF_g = 0x10000000
466   0000              defc __CLIB_OPT_SCANF_G = 0x20000000
467   0000              
468   0000              defc __CLIB_OPT_SCANF_2 = 0x00
469   0000              
470   0000              defc __CLIB_OPT_SCANF_2_lld = 0x01
471   0000              defc __CLIB_OPT_SCANF_2_llu = 0x02
472   0000              defc __CLIB_OPT_SCANF_2_llx = 0x04
473   0000              defc __CLIB_OPT_SCANF_2_llX = 0x08
474   0000              defc __CLIB_OPT_SCANF_2_llo = 0x10
475   0000              defc __CLIB_OPT_SCANF_2_lli = 0x40
476   0000              
477   0000              defc __CLIB_OPT_UNROLL = 0x00
478   0000              
479   0000              defc __CLIB_OPT_UNROLL_MEMCPY = 0x01
480   0000              defc __CLIB_OPT_UNROLL_MEMSET = 0x02
481   0000              defc __CLIB_OPT_UNROLL_OTIR = 0x10
482   0000              defc __CLIB_OPT_UNROLL_LDIR = 0x20
483   0000              defc __CLIB_OPT_UNROLL_USER_SMC = 0x40
484   0000              defc __CLIB_OPT_UNROLL_LIB_SMC = 0x80
485   0000              
486   0000              defc __CLIB_OPT_STRTOD = 0x00
487   0000              
488   0000              defc __CLIB_OPT_STRTOD_NAN = 0x01
489   0000              defc __CLIB_OPT_STRTOD_INF = 0x01
490   0000              defc __CLIB_OPT_STRTOD_HEX = 0x02
491   0000              
492   0000              defc __CLIB_OPT_SORT = 1
493   0000              
494   0000              defc __CLIB_OPT_SORT_INSERTION = 0
495   0000              defc __CLIB_OPT_SORT_SHELL = 1
496   0000              defc __CLIB_OPT_SORT_QUICK = 2
497   0000              
498   0000              defc __CLIB_OPT_SORT_QSORT = 0x0c
499   0000              
500   0000              defc __CLIB_OPT_SORT_QSORT_PIVOT = 0x3
501   0000              defc __CLIB_OPT_SORT_QSORT_PIVOT_MID = 0x0
502   0000              defc __CLIB_OPT_SORT_QSORT_PIVOT_RAN = 0x1
503   0000              defc __CLIB_OPT_SORT_QSORT_ENABLE_INSERTION = 0x04
504   0000              defc __CLIB_OPT_SORT_QSORT_ENABLE_EQUAL = 0x08
505   0000              
506   0000              defc __CLIB_OPT_ERROR = 0x00
507   0000              
508   0000              defc __CLIB_OPT_ERROR_ENABLED = 0x01
509   0000              defc __CLIB_OPT_ERROR_VERBOSE = 0x02
510   0000              
511   0000              
512   0000              
513   0000              
514   0000              
515   0000              
516   0000              
517   0000              
518   0000              
519   0000              
520   0000              
521   0000              
522   0000              
523   0000              PUBLIC __EOK
524   0000              PUBLIC __EACCES
525   0000              PUBLIC __EBADF
526   0000              PUBLIC __EBDFD
527   0000              PUBLIC __EDOM
528   0000              PUBLIC __EFBIG
529   0000              PUBLIC __EINVAL
530   0000              PUBLIC __EIO
531   0000              PUBLIC __EMFILE
532   0000              PUBLIC __ENFILE
533   0000              PUBLIC __ENOLCK
534   0000              PUBLIC __ENOMEM
535   0000              PUBLIC __ENOTSUP
536   0000              PUBLIC __EOVERFLOW
537   0000              PUBLIC __ERANGE
538   0000              PUBLIC __ESTAT
539   0000              PUBLIC __EAGAIN
540   0000              PUBLIC __EWOULDBLOCK
541   0000              
542   0000              PUBLIC __ERROR_NEXT
543   0000              
544   0000              PUBLIC STDIO_SEEK_SET
545   0000              PUBLIC STDIO_SEEK_CUR
546   0000              PUBLIC STDIO_SEEK_END
547   0000              
548   0000              PUBLIC STDIO_MSG_PUTC
549   0000              PUBLIC STDIO_MSG_WRIT
550   0000              PUBLIC STDIO_MSG_GETC
551   0000              PUBLIC STDIO_MSG_EATC
552   0000              PUBLIC STDIO_MSG_READ
553   0000              PUBLIC STDIO_MSG_SEEK
554   0000              PUBLIC STDIO_MSG_ICTL
555   0000              PUBLIC STDIO_MSG_FLSH
556   0000              PUBLIC STDIO_MSG_CLOS
557   0000              
558   0000              PUBLIC ITERM_MSG_GETC
559   0000              PUBLIC ITERM_MSG_REJECT
560   0000              PUBLIC ITERM_MSG_INTERRUPT
561   0000              PUBLIC ITERM_MSG_PUTC
562   0000              PUBLIC ITERM_MSG_PRINT_CURSOR
563   0000              PUBLIC ITERM_MSG_ERASE_CURSOR
564   0000              PUBLIC ITERM_MSG_ERASE_CURSOR_PWD
565   0000              PUBLIC ITERM_MSG_BS
566   0000              PUBLIC ITERM_MSG_BS_PWD
567   0000              PUBLIC ITERM_MSG_READLINE_BEGIN
568   0000              PUBLIC ITERM_MSG_READLINE_END
569   0000              PUBLIC ITERM_MSG_READLINE_SCROLL_LIMIT
570   0000              PUBLIC ITERM_MSG_BELL
571   0000              
572   0000              PUBLIC __MESSAGE_ITERM_NEXT__
573   0000              
574   0000              PUBLIC OTERM_MSG_PUTC
575   0000              PUBLIC OTERM_MSG_TTY
576   0000              PUBLIC OTERM_MSG_FZX_PUTC
577   0000              PUBLIC OTERM_MSG_PRINTC
578   0000              PUBLIC OTERM_MSG_SCROLL
579   0000              PUBLIC OTERM_MSG_SCROLL_LIMIT
580   0000              PUBLIC OTERM_MSG_CLS
581   0000              PUBLIC OTERM_MSG_PAUSE
582   0000              PUBLIC OTERM_MSG_BELL
583   0000              PUBLIC OTERM_MSG_PSCROLL
584   0000              PUBLIC OTERM_MSG_FZX_GET_XOR_DRAW
585   0000              
586   0000              PUBLIC __MESSAGE_OTERM_NEXT__
587   0000              
588   0000              PUBLIC ICHAR_MSG_GETC
589   0000              PUBLIC OCHAR_MSG_PUTC_BIN
590   0000              PUBLIC OCHAR_MSG_PUTC
591   0000              
592   0000              PUBLIC __MESSAGE_NEXT__
593   0000              
594   0000              PUBLIC mtx_plain
595   0000              PUBLIC mtx_recursive
596   0000              PUBLIC mtx_timed
597   0000              
598   0000              PUBLIC thrd_success
599   0000              PUBLIC thrd_error
600   0000              PUBLIC thrd_nomem
601   0000              PUBLIC thrd_busy
602   0000              PUBLIC thrd_timedout
603   0000              
604   0000              PUBLIC IOCTL_RESET
605   0000              
606   0000              PUBLIC IOCTL_ITERM_ECHO
607   0000              PUBLIC IOCTL_ITERM_PASS
608   0000              PUBLIC IOCTL_ITERM_LINE
609   0000              PUBLIC IOCTL_ITERM_COOK
610   0000              PUBLIC IOCTL_ITERM_CAPS
611   0000              PUBLIC IOCTL_ITERM_CRLF
612   0000              PUBLIC IOCTL_ITERM_CURS
613   0000              
614   0000              PUBLIC IOCTL_ITERM_TIE
615   0000              PUBLIC IOCTL_ITERM_GET_EDITBUF
616   0000              PUBLIC IOCTL_ITERM_SET_EDITBUF
617   0000              
618   0000              PUBLIC IOCTL_OTERM_PAGE
619   0000              PUBLIC IOCTL_OTERM_PAUSE
620   0000              PUBLIC IOCTL_OTERM_COOK
621   0000              PUBLIC IOCTL_OTERM_CRLF
622   0000              PUBLIC IOCTL_OTERM_CLEAR
623   0000              PUBLIC IOCTL_OTERM_SIGNAL
624   0000              PUBLIC IOCTL_OTERM_BELL
625   0000              
626   0000              PUBLIC IOCTL_OTERM_CLS
627   0000              PUBLIC IOCTL_OTERM_RESET_SCROLL
628   0000              PUBLIC IOCTL_OTERM_GET_WINDOW_COORD
629   0000              PUBLIC IOCTL_OTERM_SET_WINDOW_COORD
630   0000              PUBLIC IOCTL_OTERM_GET_WINDOW_RECT
631   0000              PUBLIC IOCTL_OTERM_SET_WINDOW_RECT
632   0000              PUBLIC IOCTL_OTERM_GET_CURSOR_COORD
633   0000              PUBLIC IOCTL_OTERM_SET_CURSOR_COORD
634   0000              PUBLIC IOCTL_OTERM_GET_OTERM
635   0000              PUBLIC IOCTL_OTERM_SCROLL
636   0000              PUBLIC IOCTL_OTERM_FONT
637   0000              PUBLIC IOCTL_OTERM_SCROLL_LIMIT
638   0000              
639   0000              PUBLIC IOCTL_OTERM_FZX_GET_PAPER_COORD
640   0000              PUBLIC IOCTL_OTERM_FZX_SET_PAPER_COORD
641   0000              PUBLIC IOCTL_OTERM_FZX_GET_PAPER_RECT
642   0000              PUBLIC IOCTL_OTERM_FZX_SET_PAPER_RECT
643   0000              PUBLIC IOCTL_OTERM_FZX_LEFT_MARGIN
644   0000              PUBLIC IOCTL_OTERM_FZX_LINE_SPACING
645   0000              PUBLIC IOCTL_OTERM_FZX_SPACE_EXPAND
646   0000              PUBLIC IOCTL_OTERM_FZX_GET_FZX_STATE
647   0000              PUBLIC IOCTL_OTERM_FZX_SET_FZX_STATE
648   0000              
649   0000              PUBLIC IOCTL_ICHAR_CRLF
650   0000              
651   0000              PUBLIC IOCTL_OCHAR_CRLF
652   0000              
653   0000              
654   0000              
655   0000              
656   0000              defc __EOK = 0
657   0000              defc __EACCES = 1
658   0000              defc __EBADF = 2
659   0000              defc __EBDFD = 3
660   0000              defc __EDOM = 4
661   0000              defc __EFBIG = 5
662   0000              defc __EINVAL = 6
663   0000              defc __EIO = 7
664   0000              defc __EMFILE = 8
665   0000              defc __ENFILE = 9
666   0000              defc __ENOLCK = 10
667   0000              defc __ENOMEM = 11
668   0000              defc __ENOTSUP = 12
669   0000              defc __EOVERFLOW = 13
670   0000              defc __ERANGE = 14
671   0000              defc __ESTAT = 15
672   0000              defc __EAGAIN = 16
673   0000              defc __EWOULDBLOCK = 16
674   0000              
675   0000              defc __ERROR_NEXT = 50
676   0000              
677   0000              defc STDIO_SEEK_SET = 0
678   0000              defc STDIO_SEEK_CUR = 1
679   0000              defc STDIO_SEEK_END = 2
680   0000              
681   0000              defc STDIO_MSG_PUTC = 1
682   0000              defc STDIO_MSG_WRIT = 2
683   0000              defc STDIO_MSG_GETC = 3
684   0000              defc STDIO_MSG_EATC = 4
685   0000              defc STDIO_MSG_READ = 5
686   0000              defc STDIO_MSG_SEEK = 6
687   0000              defc STDIO_MSG_ICTL = 7
688   0000              defc STDIO_MSG_FLSH = 8
689   0000              defc STDIO_MSG_CLOS = 9
690   0000              
691   0000              defc ITERM_MSG_GETC = 15
692   0000              defc ITERM_MSG_REJECT = 16
693   0000              defc ITERM_MSG_INTERRUPT = 17
694   0000              defc ITERM_MSG_PUTC = 18
695   0000              defc ITERM_MSG_PRINT_CURSOR = 19
696   0000              defc ITERM_MSG_ERASE_CURSOR = 20
697   0000              defc ITERM_MSG_ERASE_CURSOR_PWD = 21
698   0000              defc ITERM_MSG_BS = 22
699   0000              defc ITERM_MSG_BS_PWD = 23
700   0000              defc ITERM_MSG_READLINE_BEGIN = 24
701   0000              defc ITERM_MSG_READLINE_END = 25
702   0000              defc ITERM_MSG_READLINE_SCROLL_LIMIT = 26
703   0000              defc ITERM_MSG_BELL = 27
704   0000              
705   0000              defc __MESSAGE_ITERM_NEXT__ = 28
706   0000              
707   0000              defc OTERM_MSG_PUTC = 30
708   0000              defc OTERM_MSG_TTY = 31
709   0000              defc OTERM_MSG_FZX_PUTC = 32
710   0000              defc OTERM_MSG_PRINTC = 33
711   0000              defc OTERM_MSG_SCROLL = 34
712   0000              defc OTERM_MSG_SCROLL_LIMIT = 35
713   0000              defc OTERM_MSG_CLS = 36
714   0000              defc OTERM_MSG_PAUSE = 37
715   0000              defc OTERM_MSG_BELL = 38
716   0000              defc OTERM_MSG_PSCROLL = 39
717   0000              defc OTERM_MSG_FZX_GET_XOR_DRAW = 40
718   0000              
719   0000              defc __MESSAGE_OTERM_NEXT__ = 41
720   0000              
721   0000              defc ICHAR_MSG_GETC = 15
722   0000              defc OCHAR_MSG_PUTC_BIN = 30
723   0000              defc OCHAR_MSG_PUTC = 33
724   0000              
725   0000              defc __MESSAGE_NEXT__ = 45
726   0000              
727   0000              defc mtx_plain = 0x01
728   0000              defc mtx_recursive = 0x02
729   0000              defc mtx_timed = 0x04
730   0000              
731   0000              defc thrd_success = 0x00
732   0000              defc thrd_error = 0x01
733   0000              defc thrd_nomem = 0x02
734   0000              defc thrd_busy = 0x04
735   0000              defc thrd_timedout = 0x08
736   0000              
737   0000              defc IOCTL_RESET = 0x0000
738   0000              
739   0000              defc IOCTL_ITERM_ECHO = 0xc081
740   0000              defc IOCTL_ITERM_PASS = 0xc041
741   0000              defc IOCTL_ITERM_LINE = 0xc021
742   0000              defc IOCTL_ITERM_COOK = 0xc011
743   0000              defc IOCTL_ITERM_CAPS = 0xc009
744   0000              defc IOCTL_ITERM_CRLF = 0xc101
745   0000              defc IOCTL_ITERM_CURS = 0xc201
746   0000              
747   0000              defc IOCTL_ITERM_TIE = 0x0201
748   0000              defc IOCTL_ITERM_GET_EDITBUF = 0x0381
749   0000              defc IOCTL_ITERM_SET_EDITBUF = 0x0301
750   0000              
751   0000              defc IOCTL_OTERM_PAGE = 0xc082
752   0000              defc IOCTL_OTERM_PAUSE = 0xc042
753   0000              defc IOCTL_OTERM_COOK = 0xc022
754   0000              defc IOCTL_OTERM_CRLF = 0xc012
755   0000              defc IOCTL_OTERM_CLEAR = 0xe002
756   0000              defc IOCTL_OTERM_SIGNAL = 0xc202
757   0000              defc IOCTL_OTERM_BELL = 0xc102
758   0000              
759   0000              defc IOCTL_OTERM_CLS = 0x0102
760   0000              defc IOCTL_OTERM_RESET_SCROLL = 0x0202
761   0000              defc IOCTL_OTERM_GET_WINDOW_COORD = 0x0382
762   0000              defc IOCTL_OTERM_SET_WINDOW_COORD = 0x0302
763   0000              defc IOCTL_OTERM_GET_WINDOW_RECT = 0x0482
764   0000              defc IOCTL_OTERM_SET_WINDOW_RECT = 0x0402
765   0000              defc IOCTL_OTERM_GET_CURSOR_COORD = 0x0582
766   0000              defc IOCTL_OTERM_SET_CURSOR_COORD = 0x0502
767   0000              defc IOCTL_OTERM_GET_OTERM = 0x0602
768   0000              defc IOCTL_OTERM_SCROLL = 0x0702
769   0000              defc IOCTL_OTERM_FONT = 0x0802
770   0000              defc IOCTL_OTERM_SCROLL_LIMIT = 0x0902
771   0000              
772   0000              defc IOCTL_OTERM_FZX_GET_PAPER_COORD = 0x0a82
773   0000              defc IOCTL_OTERM_FZX_SET_PAPER_COORD = 0x0a02
774   0000              defc IOCTL_OTERM_FZX_GET_PAPER_RECT = 0x0b82
775   0000              defc IOCTL_OTERM_FZX_SET_PAPER_RECT = 0x0b02
776   0000              defc IOCTL_OTERM_FZX_LEFT_MARGIN = 0x0c02
777   0000              defc IOCTL_OTERM_FZX_LINE_SPACING = 0x0d02
778   0000              defc IOCTL_OTERM_FZX_SPACE_EXPAND = 0x0e02
779   0000              defc IOCTL_OTERM_FZX_GET_FZX_STATE = 0x0f82
780   0000              defc IOCTL_OTERM_FZX_SET_FZX_STATE = 0x0f02
781   0000              
782   0000              defc IOCTL_ICHAR_CRLF = 0xc103
783   0000              
784   0000              defc IOCTL_OCHAR_CRLF = 0xc014
785   0000              
786   0000              
787   0000              
788   0000              
789   0000              
790   0000              
791   0000              
792   0000              
793   0000              
794   0000              
795   0000              
796   0000              
797   0000              
798   0000              
799   0000              
800   0000              
801   0000              
802   0000              
803   0000              
804   0000              
805   0000              
806   0000              
807   0000              
808   0000              
809   0000              
810   0000              
811   0000              
812   0000              
813   0000              PUBLIC __IO_ACIA_CONTROL_REGISTER
814   0000              PUBLIC __IO_ACIA_STATUS_REGISTER
815   0000              PUBLIC __IO_ACIA_DATA_REGISTER
816   0000              
817   0000              PUBLIC __IO_ACIA_CR_CLK_DIV_01
818   0000              PUBLIC __IO_ACIA_CR_CLK_DIV_16
819   0000              PUBLIC __IO_ACIA_CR_CLK_DIV_64
820   0000              PUBLIC __IO_ACIA_CR_RESET
821   0000              
822   0000              PUBLIC __IO_ACIA_CR_7E2
823   0000              PUBLIC __IO_ACIA_CR_7O2
824   0000              PUBLIC __IO_ACIA_CR_7E1
825   0000              PUBLIC __IO_ACIA_CR_7O1
826   0000              PUBLIC __IO_ACIA_CR_8N2
827   0000              PUBLIC __IO_ACIA_CR_8N1
828   0000              PUBLIC __IO_ACIA_CR_8E1
829   0000              PUBLIC __IO_ACIA_CR_8O1
830   0000              
831   0000              PUBLIC __IO_ACIA_CR_TDI_RTS0
832   0000              PUBLIC __IO_ACIA_CR_TEI_RTS0
833   0000              PUBLIC __IO_ACIA_CR_TDI_RTS1
834   0000              PUBLIC __IO_ACIA_CR_TDI_BRK
835   0000              
836   0000              PUBLIC __IO_ACIA_CR_TEI_MASK
837   0000              
838   0000              PUBLIC __IO_ACIA_CR_REI
839   0000              
840   0000              PUBLIC __IO_ACIA_SR_RDRF
841   0000              PUBLIC __IO_ACIA_SR_TDRE
842   0000              PUBLIC __IO_ACIA_SR_DCD
843   0000              PUBLIC __IO_ACIA_SR_CTS
844   0000              PUBLIC __IO_ACIA_SR_FE
845   0000              PUBLIC __IO_ACIA_SR_OVRN
846   0000              PUBLIC __IO_ACIA_SR_PE
847   0000              PUBLIC __IO_ACIA_SR_IRQ
848   0000              
849   0000              PUBLIC __IO_ACIA_RX_SIZE
850   0000              PUBLIC __IO_ACIA_RX_FULLISH
851   0000              PUBLIC __IO_ACIA_RX_EMPTYISH
852   0000              PUBLIC __IO_ACIA_TX_SIZE
853   0000              
854   0000              
855   0000              
856   0000              
857   0000              defc __IO_ACIA_CONTROL_REGISTER   = 0x80
858   0000              defc __IO_ACIA_STATUS_REGISTER = 0x80
859   0000              defc __IO_ACIA_DATA_REGISTER   = 0x81
860   0000              
861   0000              defc __IO_ACIA_CR_CLK_DIV_01  = 0x00
862   0000              defc __IO_ACIA_CR_CLK_DIV_16  = 0x01
863   0000              defc __IO_ACIA_CR_CLK_DIV_64  = 0x02
864   0000              defc __IO_ACIA_CR_RESET       = 0x03
865   0000              
866   0000              defc __IO_ACIA_CR_7E2         = 0x00
867   0000              defc __IO_ACIA_CR_7O2         = 0x04
868   0000              defc __IO_ACIA_CR_7E1         = 0x08
869   0000              defc __IO_ACIA_CR_7O1         = 0x0C
870   0000              defc __IO_ACIA_CR_8N2         = 0x10
871   0000              defc __IO_ACIA_CR_8N1         = 0x14
872   0000              defc __IO_ACIA_CR_8E1         = 0x18
873   0000              defc __IO_ACIA_CR_8O1         = 0x1C
874   0000              
875   0000              defc __IO_ACIA_CR_TDI_RTS0    = 0x00
876   0000              defc __IO_ACIA_CR_TEI_RTS0    = 0x20
877   0000              defc __IO_ACIA_CR_TDI_RTS1    = 0x40
878   0000              defc __IO_ACIA_CR_TDI_BRK     = 0x60
879   0000              
880   0000              defc __IO_ACIA_CR_TEI_MASK    = 0x60
881   0000              
882   0000              defc __IO_ACIA_CR_REI         = 0x80
883   0000              
884   0000              defc __IO_ACIA_SR_RDRF        = 0x01
885   0000              defc __IO_ACIA_SR_TDRE        = 0x02
886   0000              defc __IO_ACIA_SR_DCD         = 0x04
887   0000              defc __IO_ACIA_SR_CTS         = 0x08
888   0000              defc __IO_ACIA_SR_FE          = 0x10
889   0000              defc __IO_ACIA_SR_OVRN        = 0x20
890   0000              defc __IO_ACIA_SR_PE          = 0x40
891   0000              defc __IO_ACIA_SR_IRQ         = 0x80
892   0000              
893   0000              defc __IO_ACIA_RX_SIZE     = 0x100
894   0000              defc __IO_ACIA_RX_FULLISH  = 0xf0
895   0000              defc __IO_ACIA_RX_EMPTYISH = 0x08
896   0000              defc __IO_ACIA_TX_SIZE     = 0x10
897   0000              
898   0000              
899   0000              
900   0000              
901   0000              
902   0000              
903   0000              
904   0000              
905   0000              
906   0000              PUBLIC __IO_SIOA_CONTROL_REGISTER
907   0000              PUBLIC __IO_SIOA_DATA_REGISTER
908   0000              PUBLIC __IO_SIOB_CONTROL_REGISTER
909   0000              PUBLIC __IO_SIOB_DATA_REGISTER
910   0000              
911   0000              PUBLIC __IO_SIO_WR0_NULL
912   0000              
913   0000              PUBLIC __IO_SIO_WR0_R0
914   0000              PUBLIC __IO_SIO_WR0_R1
915   0000              PUBLIC __IO_SIO_WR0_R2
916   0000              PUBLIC __IO_SIO_WR0_R3
917   0000              PUBLIC __IO_SIO_WR0_R4
918   0000              PUBLIC __IO_SIO_WR0_R5
919   0000              PUBLIC __IO_SIO_WR0_R6
920   0000              PUBLIC __IO_SIO_WR0_R7
921   0000              
922   0000              PUBLIC __IO_SIO_WR0_SDLC_ABORT
923   0000              PUBLIC __IO_SIO_WR0_EXT_INT_RESET
924   0000              PUBLIC __IO_SIO_WR0_CHANNEL_RESET
925   0000              PUBLIC __IO_SIO_WR0_RX_INT_FIRST_REENABLE
926   0000              PUBLIC __IO_SIO_WR0_TX_INT_PENDING_RESET
927   0000              PUBLIC __IO_SIO_WR0_ERROR_RESET
928   0000              PUBLIC __IO_SIO_WR0_A_INT_RETURN
929   0000              
930   0000              PUBLIC __IO_SIO_WR0_RX_CRC_RESET
931   0000              PUBLIC __IO_SIO_WR0_TX_CRC_RESET
932   0000              PUBLIC __IO_SIO_WR0_TX_EOM_RESET
933   0000              
934   0000              PUBLIC __IO_SIO_WR1_EXT_INT_ENABLE
935   0000              PUBLIC __IO_SIO_WR1_TX_INT_ENABLE
936   0000              PUBLIC __IO_SIO_WR1_B_STATUS_VECTOR
937   0000              
938   0000              PUBLIC __IO_SIO_WR1_RX_INT_NONE
939   0000              PUBLIC __IO_SIO_WR1_RX_INT_FIRST
940   0000              PUBLIC __IO_SIO_WR1_RX_INT_ALL_EXCL_SPECIAL
941   0000              PUBLIC __IO_SIO_WR1_RX_INT_ALL
942   0000              
943   0000              PUBLIC __IO_SIO_WR1_WAIT_READY_RX
944   0000              PUBLIC __IO_SIO_WR1_WAIT_READY_READY
945   0000              PUBLIC __IO_SIO_WR1_WAIT_READY_ENABLE
946   0000              
947   0000              PUBLIC __IO_SIO_WR3_RX_ENABLE
948   0000              PUBLIC __IO_SIO_WR3_RX_SYNC_LOAD_INHIBIT
949   0000              PUBLIC __IO_SIO_WR3_SDLC_ADDRESS_SEARCH
950   0000              PUBLIC __IO_SIO_WR3_SDLC_RX_CRC
951   0000              PUBLIC __IO_SIO_WR3_HUNT_PHASE_ENABLE
952   0000              PUBLIC __IO_SIO_WR3_AUTO_ENABLES
953   0000              
954   0000              PUBLIC __IO_SIO_WR3_RX_5BIT
955   0000              PUBLIC __IO_SIO_WR3_RX_7BIT
956   0000              PUBLIC __IO_SIO_WR3_RX_6BIT
957   0000              PUBLIC __IO_SIO_WR3_RX_8BIT
958   0000              
959   0000              PUBLIC __IO_SIO_WR4_PARITY_NONE
960   0000              PUBLIC __IO_SIO_WR4_PARITY_ENABLE
961   0000              PUBLIC __IO_SIO_WR4_PARITY_EVEN
962   0000              
963   0000              PUBLIC __IO_SIO_WR4_SYNC_MODE
964   0000              PUBLIC __IO_SIO_WR4_STOP_1
965   0000              PUBLIC __IO_SIO_WR4_STOP_3HALF
966   0000              PUBLIC __IO_SIO_WR4_STOP_2
967   0000              
968   0000              PUBLIC __IO_SIO_WR4_SYNC_8BIT
969   0000              PUBLIC __IO_SIO_WR4_SYNC_16BIT
970   0000              PUBLIC __IO_SIO_WR4_SYNC_SDLC
971   0000              PUBLIC __IO_SIO_WR4_SYNC_EXTERN
972   0000              
973   0000              PUBLIC __IO_SIO_WR4_CLK_DIV_01
974   0000              PUBLIC __IO_SIO_WR4_CLK_DIV_16
975   0000              PUBLIC __IO_SIO_WR4_CLK_DIV_32
976   0000              PUBLIC __IO_SIO_WR4_CLK_DIV_64
977   0000              
978   0000              PUBLIC __IO_SIO_WR5_TX_CRC_ENABLE
979   0000              PUBLIC __IO_SIO_WR5_RTS
980   0000              PUBLIC __IO_SIO_WR5_SDLC_CRC_16
981   0000              PUBLIC __IO_SIO_WR5_TX_ENABLE
982   0000              PUBLIC __IO_SIO_WR5_TX_BREAK
983   0000              
984   0000              PUBLIC __IO_SIO_WR5_TX_5BIT
985   0000              PUBLIC __IO_SIO_WR5_TX_7BIT
986   0000              PUBLIC __IO_SIO_WR5_TX_6BIT
987   0000              PUBLIC __IO_SIO_WR5_TX_8BIT
988   0000              
989   0000              PUBLIC __IO_SIO_WR5_TX_DTR
990   0000              
991   0000              PUBLIC __IO_SIO_RR0_RX_CHAR
992   0000              PUBLIC __IO_SIO_RR0_A_INT_PENDING
993   0000              PUBLIC __IO_SIO_RR0_TX_EMPTY
994   0000              PUBLIC __IO_SIO_RR0_DCD
995   0000              PUBLIC __IO_SIO_RR0_SYNC
996   0000              PUBLIC __IO_SIO_RR0_CTS
997   0000              PUBLIC __IO_SIO_RR0_TX_EOM
998   0000              PUBLIC __IO_SIO_RR0_RX_BREAK
999   0000              
1000  0000              PUBLIC __IO_SIO_RR1_TX_ALL_SENT
1001  0000              
1002  0000              PUBLIC __IO_SIO_RR1_SDLC_RESIDUE_CODE_0
1003  0000              PUBLIC __IO_SIO_RR1_SDLC_RESIDUE_CODE_1
1004  0000              PUBLIC __IO_SIO_RR1_SDLC_RESIDUE_CODE_2
1005  0000              
1006  0000              PUBLIC __IO_SIO_RR1_RX_PARITY_ERROR
1007  0000              PUBLIC __IO_SIO_RR1_RX_OVERRUN
1008  0000              PUBLIC __IO_SIO_RR1_RX_FRAMING_ERROR
1009  0000              PUBLIC __IO_SIO_RR1_SDLC_EOF
1010  0000              
1011  0000              PUBLIC __IO_SIO_RX_SIZE
1012  0000              PUBLIC __IO_SIO_RX_FULLISH
1013  0000              PUBLIC __IO_SIO_RX_EMPTYISH
1014  0000              PUBLIC __IO_SIO_TX_SIZE
1015  0000              
1016  0000              
1017  0000              
1018  0000              
1019  0000              defc __IO_SIOA_CONTROL_REGISTER   = 0x80
1020  0000              defc __IO_SIOA_DATA_REGISTER      = 0x81
1021  0000              defc __IO_SIOB_CONTROL_REGISTER   = 0x82
1022  0000              defc __IO_SIOB_DATA_REGISTER      = 0x83
1023  0000              
1024  0000              defc __IO_SIO_WR0_NULL      = 0x00
1025  0000              
1026  0000              defc __IO_SIO_WR0_R0      = 0x00
1027  0000              defc __IO_SIO_WR0_R1      = 0x01
1028  0000              defc __IO_SIO_WR0_R2      = 0x02
1029  0000              defc __IO_SIO_WR0_R3      = 0x03
1030  0000              defc __IO_SIO_WR0_R4      = 0x04
1031  0000              defc __IO_SIO_WR0_R5      = 0x05
1032  0000              defc __IO_SIO_WR0_R6      = 0x06
1033  0000              defc __IO_SIO_WR0_R7      = 0x07
1034  0000              
1035  0000              defc __IO_SIO_WR0_SDLC_ABORT      = 0x08
1036  0000              defc __IO_SIO_WR0_EXT_INT_RESET      = 0x10
1037  0000              defc __IO_SIO_WR0_CHANNEL_RESET      = 0x18
1038  0000              defc __IO_SIO_WR0_RX_INT_FIRST_REENABLE      = 0x20
1039  0000              defc __IO_SIO_WR0_TX_INT_PENDING_RESET      = 0x28
1040  0000              defc __IO_SIO_WR0_ERROR_RESET      = 0x30
1041  0000              defc __IO_SIO_WR0_A_INT_RETURN      = 0x38
1042  0000              
1043  0000              defc __IO_SIO_WR0_RX_CRC_RESET      = 0x40
1044  0000              defc __IO_SIO_WR0_TX_CRC_RESET      = 0x80
1045  0000              defc __IO_SIO_WR0_TX_EOM_RESET      = 0xC0
1046  0000              
1047  0000              defc __IO_SIO_WR1_EXT_INT_ENABLE      = 0x01
1048  0000              defc __IO_SIO_WR1_TX_INT_ENABLE      = 0x02
1049  0000              defc __IO_SIO_WR1_B_STATUS_VECTOR      = 0x04
1050  0000              
1051  0000              defc __IO_SIO_WR1_RX_INT_NONE      = 0x00
1052  0000              defc __IO_SIO_WR1_RX_INT_FIRST      = 0x08
1053  0000              defc __IO_SIO_WR1_RX_INT_ALL_EXCL_SPECIAL      = 0x10
1054  0000              defc __IO_SIO_WR1_RX_INT_ALL      = 0x18
1055  0000              
1056  0000              defc __IO_SIO_WR1_WAIT_READY_RX      = 0x20
1057  0000              defc __IO_SIO_WR1_WAIT_READY_READY      = 0x40
1058  0000              defc __IO_SIO_WR1_WAIT_READY_ENABLE      = 0x80
1059  0000              
1060  0000              defc __IO_SIO_WR3_RX_ENABLE      = 0x01
1061  0000              defc __IO_SIO_WR3_RX_SYNC_LOAD_INHIBIT      = 0x02
1062  0000              defc __IO_SIO_WR3_SDLC_ADDRESS_SEARCH      = 0x04
1063  0000              defc __IO_SIO_WR3_SDLC_RX_CRC      = 0x08
1064  0000              defc __IO_SIO_WR3_HUNT_PHASE_ENABLE      = 0x10
1065  0000              defc __IO_SIO_WR3_AUTO_ENABLES      = 0x20
1066  0000              
1067  0000              defc __IO_SIO_WR3_RX_5BIT      = 0x00
1068  0000              defc __IO_SIO_WR3_RX_7BIT      = 0x40
1069  0000              defc __IO_SIO_WR3_RX_6BIT      = 0x80
1070  0000              defc __IO_SIO_WR3_RX_8BIT      = 0xC0
1071  0000              
1072  0000              defc __IO_SIO_WR4_PARITY_NONE      = 0x00
1073  0000              defc __IO_SIO_WR4_PARITY_ENABLE      = 0x01
1074  0000              defc __IO_SIO_WR4_PARITY_EVEN      = 0x02
1075  0000              
1076  0000              defc __IO_SIO_WR4_SYNC_MODE      = 0x00
1077  0000              defc __IO_SIO_WR4_STOP_1      = 0x04
1078  0000              defc __IO_SIO_WR4_STOP_3HALF      = 0x08
1079  0000              defc __IO_SIO_WR4_STOP_2      = 0x0C
1080  0000              
1081  0000              defc __IO_SIO_WR4_SYNC_8BIT      = 0x00
1082  0000              defc __IO_SIO_WR4_SYNC_16BIT      = 0x10
1083  0000              defc __IO_SIO_WR4_SYNC_SDLC      = 0x20
1084  0000              defc __IO_SIO_WR4_SYNC_EXTERN      = 0x30
1085  0000              
1086  0000              defc __IO_SIO_WR4_CLK_DIV_01      = 0x00
1087  0000              defc __IO_SIO_WR4_CLK_DIV_16      = 0x40
1088  0000              defc __IO_SIO_WR4_CLK_DIV_32      = 0x80
1089  0000              defc __IO_SIO_WR4_CLK_DIV_64      = 0xC0
1090  0000              
1091  0000              defc __IO_SIO_WR5_TX_CRC_ENABLE      = 0x01
1092  0000              defc __IO_SIO_WR5_RTS      = 0x02
1093  0000              defc __IO_SIO_WR5_SDLC_CRC_16      = 0x04
1094  0000              defc __IO_SIO_WR5_TX_ENABLE      = 0x08
1095  0000              defc __IO_SIO_WR5_TX_BREAK      = 0x10
1096  0000              
1097  0000              defc __IO_SIO_WR5_TX_5BIT      = 0x00
1098  0000              defc __IO_SIO_WR5_TX_7BIT      = 0x20
1099  0000              defc __IO_SIO_WR5_TX_6BIT      = 0x40
1100  0000              defc __IO_SIO_WR5_TX_8BIT      = 0x60
1101  0000              
1102  0000              defc __IO_SIO_WR5_TX_DTR      = 0x80
1103  0000              
1104  0000              defc __IO_SIO_RR0_RX_CHAR      = 0x01
1105  0000              defc __IO_SIO_RR0_A_INT_PENDING      = 0x02
1106  0000              defc __IO_SIO_RR0_TX_EMPTY      = 0x04
1107  0000              defc __IO_SIO_RR0_DCD      = 0x08
1108  0000              defc __IO_SIO_RR0_SYNC      = 0x10
1109  0000              defc __IO_SIO_RR0_CTS      = 0x20
1110  0000              defc __IO_SIO_RR0_TX_EOM      = 0x40
1111  0000              defc __IO_SIO_RR0_RX_BREAK      = 0x80
1112  0000              
1113  0000              defc __IO_SIO_RR1_TX_ALL_SENT      = 0x01
1114  0000              
1115  0000              defc __IO_SIO_RR1_SDLC_RESIDUE_CODE_0      = 0x02
1116  0000              defc __IO_SIO_RR1_SDLC_RESIDUE_CODE_1      = 0x04
1117  0000              defc __IO_SIO_RR1_SDLC_RESIDUE_CODE_2      = 0x08
1118  0000              
1119  0000              defc __IO_SIO_RR1_RX_PARITY_ERROR      = 0x10
1120  0000              defc __IO_SIO_RR1_RX_OVERRUN      = 0x20
1121  0000              defc __IO_SIO_RR1_RX_FRAMING_ERROR      = 0x40
1122  0000              defc __IO_SIO_RR1_SDLC_EOF      = 0x80
1123  0000              
1124  0000              defc __IO_SIO_RX_SIZE      = 0x100
1125  0000              defc __IO_SIO_RX_FULLISH      = 0xf0
1126  0000              defc __IO_SIO_RX_EMPTYISH      = 0x08
1127  0000              defc __IO_SIO_TX_SIZE      = 0x10
1128  0000              
1129  0000              
1130  0000              
1131  0000              
1132  0000              
1133  0000              
1134  0000              
1135  0000              
1136  0000              
1137  0000              PUBLIC __IO_PIO_PORT_A
1138  0000              PUBLIC __IO_PIO_PORT_B
1139  0000              PUBLIC __IO_PIO_PORT_C
1140  0000              PUBLIC __IO_PIO_CONTROL
1141  0000              
1142  0000              PUBLIC __IO_PIO_CNTL_00
1143  0000              PUBLIC __IO_PIO_CNTL_01
1144  0000              PUBLIC __IO_PIO_CNTL_02
1145  0000              PUBLIC __IO_PIO_CNTL_03
1146  0000              
1147  0000              PUBLIC __IO_PIO_CNTL_04
1148  0000              PUBLIC __IO_PIO_CNTL_05
1149  0000              PUBLIC __IO_PIO_CNTL_06
1150  0000              PUBLIC __IO_PIO_CNTL_07
1151  0000              
1152  0000              PUBLIC __IO_PIO_CNTL_08
1153  0000              PUBLIC __IO_PIO_CNTL_09
1154  0000              PUBLIC __IO_PIO_CNTL_10
1155  0000              PUBLIC __IO_PIO_CNTL_11
1156  0000              
1157  0000              PUBLIC __IO_PIO_CNTL_12
1158  0000              PUBLIC __IO_PIO_CNTL_13
1159  0000              PUBLIC __IO_PIO_CNTL_14
1160  0000              PUBLIC __IO_PIO_CNTL_15
1161  0000              
1162  0000              
1163  0000              
1164  0000              
1165  0000              defc __IO_PIO_PORT_A = 0x20
1166  0000              defc __IO_PIO_PORT_B = 0x21
1167  0000              defc __IO_PIO_PORT_C = 0x22
1168  0000              defc __IO_PIO_CONTROL = 0x23
1169  0000              
1170  0000              defc __IO_PIO_CNTL_00 = 0x80
1171  0000              defc __IO_PIO_CNTL_01 = 0x81
1172  0000              defc __IO_PIO_CNTL_02 = 0x82
1173  0000              defc __IO_PIO_CNTL_03 = 0x83
1174  0000              
1175  0000              defc __IO_PIO_CNTL_04 = 0x88
1176  0000              defc __IO_PIO_CNTL_05 = 0x89
1177  0000              defc __IO_PIO_CNTL_06 = 0x8A
1178  0000              defc __IO_PIO_CNTL_07 = 0x8B
1179  0000              
1180  0000              defc __IO_PIO_CNTL_08 = 0x90
1181  0000              defc __IO_PIO_CNTL_09 = 0x91
1182  0000              defc __IO_PIO_CNTL_10 = 0x92
1183  0000              defc __IO_PIO_CNTL_11 = 0x83
1184  0000              
1185  0000              defc __IO_PIO_CNTL_12 = 0x98
1186  0000              defc __IO_PIO_CNTL_13 = 0x99
1187  0000              defc __IO_PIO_CNTL_14 = 0x9A
1188  0000              defc __IO_PIO_CNTL_15 = 0x9B
1189  0000              
1190  0000              
1191  0000              
1192  0000              
1193  0000              
1194  0000              
1195  0000              
1196  0000              
1197  0000              
1198  0000              PUBLIC __IO_PIO_IDE_LSB
1199  0000              PUBLIC __IO_PIO_IDE_MSB
1200  0000              PUBLIC __IO_PIO_IDE_CTL
1201  0000              PUBLIC __IO_PIO_IDE_CONFIG
1202  0000              PUBLIC __IO_PIO_IDE_RD
1203  0000              PUBLIC __IO_PIO_IDE_WR
1204  0000              
1205  0000              PUBLIC __IO_IDE_A0_LINE
1206  0000              PUBLIC __IO_IDE_A1_LINE
1207  0000              PUBLIC __IO_IDE_A2_LINE
1208  0000              PUBLIC __IO_IDE_CS0_LINE
1209  0000              PUBLIC __IO_IDE_CS1_LINE
1210  0000              PUBLIC __IO_IDE_WR_LINE
1211  0000              PUBLIC __IO_IDE_RD_LINE
1212  0000              PUBLIC __IO_IDE_RST_LINE
1213  0000              
1214  0000              PUBLIC __IO_IDE_DATA
1215  0000              PUBLIC __IO_IDE_ERROR
1216  0000              PUBLIC __IO_IDE_SEC_CNT
1217  0000              PUBLIC __IO_IDE_SECTOR
1218  0000              PUBLIC __IO_IDE_CYL_LSB
1219  0000              PUBLIC __IO_IDE_CYL_MSB
1220  0000              PUBLIC __IO_IDE_HEAD
1221  0000              PUBLIC __IO_IDE_COMMAND
1222  0000              PUBLIC __IO_IDE_STATUS
1223  0000              
1224  0000              PUBLIC __IO_IDE_CONTROL
1225  0000              PUBLIC __IO_IDE_ALT_STATUS
1226  0000              
1227  0000              PUBLIC __IO_IDE_LBA0
1228  0000              PUBLIC __IO_IDE_LBA1
1229  0000              PUBLIC __IO_IDE_LBA2
1230  0000              PUBLIC __IO_IDE_LBA3
1231  0000              
1232  0000              PUBLIC __IDE_CMD_READ
1233  0000              PUBLIC __IDE_CMD_WRITE
1234  0000              
1235  0000              PUBLIC __IDE_CMD_STANDBY
1236  0000              PUBLIC __IDE_CMD_IDLE
1237  0000              PUBLIC __IDE_CMD_SLEEP
1238  0000              PUBLIC __IDE_CMD_CACHE_FLUSH
1239  0000              PUBLIC __IDE_CMD_ID
1240  0000              
1241  0000              
1242  0000              
1243  0000              
1244  0000              defc __IO_PIO_IDE_LSB = 0x20
1245  0000              defc __IO_PIO_IDE_MSB = 0x21
1246  0000              defc __IO_PIO_IDE_CTL = 0x22
1247  0000              defc __IO_PIO_IDE_CONFIG = 0x23
1248  0000              defc __IO_PIO_IDE_RD = 0x92
1249  0000              defc __IO_PIO_IDE_WR = 0x80
1250  0000              
1251  0000              defc __IO_IDE_A0_LINE = 0x01
1252  0000              defc __IO_IDE_A1_LINE = 0x02
1253  0000              defc __IO_IDE_A2_LINE = 0x04
1254  0000              defc __IO_IDE_CS0_LINE = 0x08
1255  0000              defc __IO_IDE_CS1_LINE = 0x10
1256  0000              defc __IO_IDE_WR_LINE = 0x20
1257  0000              defc __IO_IDE_RD_LINE = 0x40
1258  0000              defc __IO_IDE_RST_LINE = 0x80
1259  0000              
1260  0000              defc __IO_IDE_DATA = 0x08
1261  0000              defc __IO_IDE_ERROR = 0x9
1262  0000              defc __IO_IDE_SEC_CNT = 0xa
1263  0000              defc __IO_IDE_SECTOR = 0xb
1264  0000              defc __IO_IDE_CYL_LSB = 0xc
1265  0000              defc __IO_IDE_CYL_MSB = 0xd
1266  0000              defc __IO_IDE_HEAD = 0xe
1267  0000              defc __IO_IDE_COMMAND = 0xf
1268  0000              defc __IO_IDE_STATUS = 0xf
1269  0000              
1270  0000              defc __IO_IDE_CONTROL = 0x16
1271  0000              defc __IO_IDE_ALT_STATUS = 0x16
1272  0000              
1273  0000              defc __IO_IDE_LBA0 = 0xb
1274  0000              defc __IO_IDE_LBA1 = 0xc
1275  0000              defc __IO_IDE_LBA2 = 0xd
1276  0000              defc __IO_IDE_LBA3 = 0xe
1277  0000              
1278  0000              defc __IDE_CMD_READ = 0x20
1279  0000              defc __IDE_CMD_WRITE = 0x30
1280  0000              
1281  0000              defc __IDE_CMD_STANDBY = 0xE0
1282  0000              defc __IDE_CMD_IDLE = 0xE1
1283  0000              defc __IDE_CMD_SLEEP = 0xE6
1284  0000              defc __IDE_CMD_CACHE_FLUSH = 0xE7
1285  0000              defc __IDE_CMD_ID = 0xEC
1286  0000              
1287  0000              
1288  0000              
1289  0000              
1290  0000              
1291  0000              
1292  0000              
1293  0000              
1294  0000              
1295  0000              
1296  0000              PUBLIC __IO_LUT_OPERAND_LATCH
1297  0000              PUBLIC __IO_LUT_RESULT_MSB
1298  0000              PUBLIC __IO_ACIA_DATA_REGISTER
1299  0000              
1300  0000              PUBLIC __IO_LUT_MODULE_AVAILABLE
1301  0000              
1302  0000              
1303  0000              
1304  0000              
1305  0000              defc __IO_LUT_OPERAND_LATCH  = 0x40
1306  0000              defc __IO_LUT_RESULT_MSB  = 0x41
1307  0000              defc __IO_LUT_RESULT_LSB  = 0x40
1308  0000              
1309  0000              defc __IO_LUT_MODULE_AVAILABLE  = 0x00
1310  0000              
1311  0000              
1312  0000              
1313  0000              
1314  0000              
1315  0000              
1316  0000              
1317  0000              
1318  0000              
1319  0000              
1320  0000              PUBLIC __IO_APU_DATA
1321  0000              PUBLIC __IO_APU_CONTROL
1322  0000              PUBLIC __IO_APU_STATUS
1323  0000              
1324  0000              PUBLIC __IO_APU_STATUS_BUSY
1325  0000              PUBLIC __IO_APU_STATUS_SIGN
1326  0000              PUBLIC __IO_APU_STATUS_ZERO
1327  0000              PUBLIC __IO_APU_STATUS_DIV0
1328  0000              PUBLIC __IO_APU_STATUS_NEGRT
1329  0000              PUBLIC __IO_APU_STATUS_UNDFL
1330  0000              PUBLIC __IO_APU_STATUS_OVRFL
1331  0000              PUBLIC __IO_APU_STATUS_CARRY
1332  0000              
1333  0000              PUBLIC __IO_APU_STATUS_ERROR
1334  0000              
1335  0000              PUBLIC __IO_APU_COMMAND_SVREQ
1336  0000              
1337  0000              PUBLIC __IO_APU_OP_ENT
1338  0000              PUBLIC __IO_APU_OP_REM
1339  0000              PUBLIC __IO_APU_OP_ENT16
1340  0000              PUBLIC __IO_APU_OP_ENT32
1341  0000              PUBLIC __IO_APU_OP_REM16
1342  0000              PUBLIC __IO_APU_OP_REM32
1343  0000              
1344  0000              PUBLIC __IO_APU_OP_SADD
1345  0000              PUBLIC __IO_APU_OP_SSUB
1346  0000              PUBLIC __IO_APU_OP_SMUL
1347  0000              PUBLIC __IO_APU_OP_SMUU
1348  0000              PUBLIC __IO_APU_OP_SDIV
1349  0000              
1350  0000              PUBLIC __IO_APU_OP_DADD
1351  0000              PUBLIC __IO_APU_OP_DSUB
1352  0000              PUBLIC __IO_APU_OP_DMUL
1353  0000              PUBLIC __IO_APU_OP_DMUU
1354  0000              PUBLIC __IO_APU_OP_DDIV
1355  0000              
1356  0000              PUBLIC __IO_APU_OP_FADD
1357  0000              PUBLIC __IO_APU_OP_FSUB
1358  0000              PUBLIC __IO_APU_OP_FMUL
1359  0000              PUBLIC __IO_APU_OP_FDIV
1360  0000              
1361  0000              PUBLIC __IO_APU_OP_SQRT
1362  0000              PUBLIC __IO_APU_OP_SIN
1363  0000              PUBLIC __IO_APU_OP_COS
1364  0000              PUBLIC __IO_APU_OP_TAN
1365  0000              PUBLIC __IO_APU_OP_ASIN
1366  0000              PUBLIC __IO_APU_OP_ACOS
1367  0000              PUBLIC __IO_APU_OP_ATAN
1368  0000              PUBLIC __IO_APU_OP_LOG
1369  0000              PUBLIC __IO_APU_OP_LN
1370  0000              PUBLIC __IO_APU_OP_EXP
1371  0000              PUBLIC __IO_APU_OP_PWR
1372  0000              
1373  0000              PUBLIC __IO_APU_OP_NOP
1374  0000              PUBLIC __IO_APU_OP_FIXS
1375  0000              PUBLIC __IO_APU_OP_FIXD
1376  0000              PUBLIC __IO_APU_OP_FLTS
1377  0000              PUBLIC __IO_APU_OP_FLTD
1378  0000              PUBLIC __IO_APU_OP_CHSS
1379  0000              PUBLIC __IO_APU_OP_CHSD
1380  0000              PUBLIC __IO_APU_OP_CHSF
1381  0000              PUBLIC __IO_APU_OP_PTOS
1382  0000              PUBLIC __IO_APU_OP_PTOD
1383  0000              PUBLIC __IO_APU_OP_PTOF
1384  0000              PUBLIC __IO_APU_OP_POPS
1385  0000              PUBLIC __IO_APU_OP_POPD
1386  0000              PUBLIC __IO_APU_OP_POPF
1387  0000              PUBLIC __IO_APU_OP_XCHS
1388  0000              PUBLIC __IO_APU_OP_XCHD
1389  0000              PUBLIC __IO_APU_OP_XCHF
1390  0000              PUBLIC __IO_APU_OP_PUPI
1391  0000              
1392  0000              
1393  0000              
1394  0000              
1395  0000              defc __IO_APU_DATA = 0x42
1396  0000              defc __IO_APU_CONTROL = 0x43
1397  0000              defc __IO_APU_STATUS = 0x43
1398  0000              
1399  0000              defc __IO_APU_STATUS_BUSY = 0x80
1400  0000              defc __IO_APU_STATUS_SIGN = 0x40
1401  0000              defc __IO_APU_STATUS_ZERO = 0x20
1402  0000              defc __IO_APU_STATUS_DIV0 = 0x10
1403  0000              defc __IO_APU_STATUS_NEGRT = 0x08
1404  0000              defc __IO_APU_STATUS_UNDFL = 0x04
1405  0000              defc __IO_APU_STATUS_OVRFL = 0x02
1406  0000              defc __IO_APU_STATUS_CARRY = 0x01
1407  0000              
1408  0000              defc __IO_APU_STATUS_ERROR = 0x1E
1409  0000              
1410  0000              defc __IO_APU_COMMAND_SVREQ = 0x80
1411  0000              
1412  0000              defc __IO_APU_OP_ENT = 0x40
1413  0000              defc __IO_APU_OP_REM = 0x50
1414  0000              defc __IO_APU_OP_ENT16 = 0x40
1415  0000              defc __IO_APU_OP_ENT32 = 0x41
1416  0000              defc __IO_APU_OP_REM16 = 0x50
1417  0000              defc __IO_APU_OP_REM32 = 0x51
1418  0000              
1419  0000              defc __IO_APU_OP_SADD = 0x6C
1420  0000              defc __IO_APU_OP_SSUB = 0x6D
1421  0000              defc __IO_APU_OP_SMUL = 0x6E
1422  0000              defc __IO_APU_OP_SMUU = 0x76
1423  0000              defc __IO_APU_OP_SDIV = 0x6F
1424  0000              
1425  0000              defc __IO_APU_OP_DADD = 0x2C
1426  0000              defc __IO_APU_OP_DSUB = 0x2D
1427  0000              defc __IO_APU_OP_DMUL = 0x2E
1428  0000              defc __IO_APU_OP_DMUU = 0x36
1429  0000              defc __IO_APU_OP_DDIV = 0x2F
1430  0000              
1431  0000              defc __IO_APU_OP_FADD = 0x10
1432  0000              defc __IO_APU_OP_FSUB = 0x11
1433  0000              defc __IO_APU_OP_FMUL = 0x12
1434  0000              defc __IO_APU_OP_FDIV = 0x13
1435  0000              
1436  0000              defc __IO_APU_OP_SQRT = 0x01
1437  0000              defc __IO_APU_OP_SIN = 0x02
1438  0000              defc __IO_APU_OP_COS = 0x03
1439  0000              defc __IO_APU_OP_TAN = 0x04
1440  0000              defc __IO_APU_OP_ASIN = 0x05
1441  0000              defc __IO_APU_OP_ACOS = 0x06
1442  0000              defc __IO_APU_OP_ATAN = 0x07
1443  0000              defc __IO_APU_OP_LOG = 0x08
1444  0000              defc __IO_APU_OP_LN = 0x09
1445  0000              defc __IO_APU_OP_EXP = 0x0A
1446  0000              defc __IO_APU_OP_PWR = 0x0B
1447  0000              
1448  0000              defc __IO_APU_OP_NOP = 0x00
1449  0000              defc __IO_APU_OP_FIXS = 0x1F
1450  0000              defc __IO_APU_OP_FIXD = 0x1E
1451  0000              defc __IO_APU_OP_FLTS = 0x1D
1452  0000              defc __IO_APU_OP_FLTD = 0x1C
1453  0000              defc __IO_APU_OP_CHSS = 0x74
1454  0000              defc __IO_APU_OP_CHSD = 0x34
1455  0000              defc __IO_APU_OP_CHSF = 0x15
1456  0000              defc __IO_APU_OP_PTOS = 0x77
1457  0000              defc __IO_APU_OP_PTOD = 0x37
1458  0000              defc __IO_APU_OP_PTOF = 0x17
1459  0000              defc __IO_APU_OP_POPS = 0x78
1460  0000              defc __IO_APU_OP_POPD = 0x38
1461  0000              defc __IO_APU_OP_POPF = 0x18
1462  0000              defc __IO_APU_OP_XCHS = 0x79
1463  0000              defc __IO_APU_OP_XCHD = 0x39
1464  0000              defc __IO_APU_OP_XCHF = 0x19
1465  0000              defc __IO_APU_OP_PUPI = 0x1A
1466  0000              
1467  0000              
1468  0000              
1469  0000              
1470  0000              
1471  0000              
1472  0000              
1473  0000              
1474  0000              
1475  0000              PUBLIC __IO_APU0_DATA
1476  0000              PUBLIC __IO_APU0_CONTROL
1477  0000              PUBLIC __IO_APU0_STATUS
1478  0000              
1479  0000              PUBLIC __IO_APU1_DATA
1480  0000              PUBLIC __IO_APU1_CONTROL
1481  0000              PUBLIC __IO_APU1_STATUS
1482  0000              
1483  0000              PUBLIC __IO_APU2_DATA
1484  0000              PUBLIC __IO_APU2_CONTROL
1485  0000              PUBLIC __IO_APU2_STATUS
1486  0000              
1487  0000              PUBLIC __IO_APU3_DATA
1488  0000              PUBLIC __IO_APU3_CONTROL
1489  0000              PUBLIC __IO_APU3_STATUS
1490  0000              
1491  0000              
1492  0000              
1493  0000              
1494  0000              defc __IO_APU0_DATA = 0x42
1495  0000              defc __IO_APU0_CONTROL = 0x43
1496  0000              defc __IO_APU0_STATUS = 0x43
1497  0000              
1498  0000              defc __IO_APU1_DATA = 0x62
1499  0000              defc __IO_APU1_CONTROL = 0x63
1500  0000              defc __IO_APU1_STATUS = 0x63
1501  0000              
1502  0000              defc __IO_APU2_DATA = 0xc2
1503  0000              defc __IO_APU2_CONTROL = 0xc3
1504  0000              defc __IO_APU2_STATUS = 0xc3
1505  0000              
1506  0000              defc __IO_APU3_DATA = 0xe2
1507  0000              defc __IO_APU3_CONTROL = 0xe3
1508  0000              defc __IO_APU3_STATUS = 0xe3
1509  0000              
1510  0000              
1511  0000              
1512  0000              
1513  0000              
1514  0000              
1515  0000              
1516  0000              
1517  0000              
1518  0000              
1519  0000              PUBLIC __BF_CIO
1520  0000              PUBLIC __BF_CIOIN
1521  0000              PUBLIC __BF_CIOOUT
1522  0000              PUBLIC __BF_CIOIST
1523  0000              PUBLIC __BF_CIOOST
1524  0000              PUBLIC __BF_CIOINIT
1525  0000              PUBLIC __BF_CIOQUERY
1526  0000              PUBLIC __BF_CIODEVICE
1527  0000              
1528  0000              PUBLIC __BF_DIO
1529  0000              PUBLIC __BF_DIOSTATUS
1530  0000              PUBLIC __BF_DIORESET
1531  0000              PUBLIC __BF_DIOSEEK
1532  0000              PUBLIC __BF_DIOREAD
1533  0000              PUBLIC __BF_DIOWRITE
1534  0000              PUBLIC __BF_DIOVERIFY
1535  0000              PUBLIC __BF_DIOFORMAT
1536  0000              PUBLIC __BF_DIODEVICE
1537  0000              PUBLIC __BF_DIOMEDIA
1538  0000              PUBLIC __BF_DIODEFMED
1539  0000              PUBLIC __BF_DIOCAP
1540  0000              PUBLIC __BF_DIOGEOM
1541  0000              
1542  0000              PUBLIC __BF_RTC
1543  0000              PUBLIC __BF_RTCGETTIM
1544  0000              PUBLIC __BF_RTCSETTIM
1545  0000              PUBLIC __BF_RTCGETBYT
1546  0000              PUBLIC __BF_RTCSETBYT
1547  0000              PUBLIC __BF_RTCGETBLK
1548  0000              PUBLIC __BF_RTCSETBLK
1549  0000              
1550  0000              PUBLIC __BF_EMU
1551  0000              
1552  0000              PUBLIC __BF_VDA
1553  0000              PUBLIC __BF_VDAINI
1554  0000              PUBLIC __BF_VDAQRY
1555  0000              PUBLIC __BF_VDARES
1556  0000              PUBLIC __BF_VDADEV
1557  0000              PUBLIC __BF_VDASCS
1558  0000              PUBLIC __BF_VDASCP
1559  0000              PUBLIC __BF_VDASAT
1560  0000              PUBLIC __BF_VDASCO
1561  0000              PUBLIC __BF_VDAWRC
1562  0000              PUBLIC __BF_VDAFIL
1563  0000              PUBLIC __BF_VDACPY
1564  0000              PUBLIC __BF_VDASCR
1565  0000              PUBLIC __BF_VDAKST
1566  0000              PUBLIC __BF_VDAKFL
1567  0000              PUBLIC __BF_VDAKRD
1568  0000              
1569  0000              PUBLIC __BF_SYS
1570  0000              PUBLIC __BF_SYSRESET
1571  0000              PUBLIC __BF_SYSVER
1572  0000              PUBLIC __BF_SYSSETBNK
1573  0000              PUBLIC __BF_SYSGETBNK
1574  0000              PUBLIC __BF_SYSSETCPY
1575  0000              PUBLIC __BF_SYSBNKCPY
1576  0000              PUBLIC __BF_SYSALLOC
1577  0000              PUBLIC __BF_SYSFREE
1578  0000              PUBLIC __BF_SYSGET
1579  0000              PUBLIC __BF_SYSSET
1580  0000              PUBLIC __BF_SYSPEEK
1581  0000              PUBLIC __BF_SYSPOKE
1582  0000              PUBLIC __BF_SYSINT
1583  0000              
1584  0000              PUBLIC __BF_SYSGET_CIOCNT
1585  0000              PUBLIC __BF_SYSGET_DIOCNT
1586  0000              PUBLIC __BF_SYSGET_VDACNT
1587  0000              PUBLIC __BF_SYSGET_TIMER
1588  0000              PUBLIC __BF_SYSGET_SECS
1589  0000              PUBLIC __BF_SYSGET_BOOTINFO
1590  0000              PUBLIC __BF_SYSGET_CPUINFO
1591  0000              PUBLIC __BF_SYSGET_MEMINFO
1592  0000              PUBLIC __BF_SYSGET_BNKINFO
1593  0000              
1594  0000              PUBLIC __BF_SYSSET_TIMER
1595  0000              PUBLIC __BF_SYSSET_SECS
1596  0000              PUBLIC __BF_SYSSET_BOOTINFO
1597  0000              
1598  0000              PUBLIC __BF_SYSINT_INFO
1599  0000              PUBLIC __BF_SYSINT_GET
1600  0000              PUBLIC __BF_SYSINT_SET
1601  0000              
1602  0000              PUBLIC __CIODEV_UART
1603  0000              PUBLIC __CIODEV_ASCI
1604  0000              PUBLIC __CIODEV_TERM
1605  0000              PUBLIC __CIODEV_PRPCON
1606  0000              PUBLIC __CIODEV_PPPCON
1607  0000              PUBLIC __CIODEV_SIO
1608  0000              PUBLIC __CIODEV_ACIA
1609  0000              PUBLIC __CIODEV_PIO
1610  0000              PUBLIC __CIODEV_UF
1611  0000              PUBLIC __CIODEV_CONSOLE
1612  0000              
1613  0000              PUBLIC __DIODEV_MD
1614  0000              PUBLIC __DIODEV_FD
1615  0000              PUBLIC __DIODEV_RF
1616  0000              PUBLIC __DIODEV_IDE
1617  0000              PUBLIC __DIODEV_ATAPI
1618  0000              PUBLIC __DIODEV_PPIDE
1619  0000              PUBLIC __DIODEV_SD
1620  0000              PUBLIC __DIODEV_PRPSD
1621  0000              PUBLIC __DIODEV_PPPSD
1622  0000              PUBLIC __DIODEV_HDSK
1623  0000              
1624  0000              PUBLIC __VDADEV_VDU
1625  0000              PUBLIC __VDADEV_CVDU
1626  0000              PUBLIC __VDADEV_NEC
1627  0000              PUBLIC __VDADEV_TMS
1628  0000              PUBLIC __VDADEV_VGA
1629  0000              
1630  0000              PUBLIC __EMUTYP_NONE
1631  0000              PUBLIC __EMUTYP_TTY
1632  0000              PUBLIC __EMUTYP_ANSI
1633  0000              
1634  0000              PUBLIC __HB_CURBNK
1635  0000              PUBLIC __HB_INVBNK
1636  0000              PUBLIC __HB_SRCADR
1637  0000              PUBLIC __HB_SRCBNK
1638  0000              PUBLIC __HB_DSTADR
1639  0000              PUBLIC __HB_DSTBNK
1640  0000              PUBLIC __HB_CPYLEN
1641  0000              
1642  0000              PUBLIC __HB_INVOKE
1643  0000              PUBLIC __HB_BNKSEL
1644  0000              PUBLIC __HB_BNKCPY
1645  0000              PUBLIC __HB_BNKCALL
1646  0000              PUBLIC __HB_IDENT
1647  0000              
1648  0000              
1649  0000              
1650  0000              
1651  0000              defc __BF_CIO = 0x00
1652  0000              defc __BF_CIOIN = 0x0
1653  0000              defc __BF_CIOOUT = 0x1
1654  0000              defc __BF_CIOIST = 0x2
1655  0000              defc __BF_CIOOST = 0x3
1656  0000              defc __BF_CIOINIT = 0x4
1657  0000              defc __BF_CIOQUERY = 0x5
1658  0000              defc __BF_CIODEVICE = 0x6
1659  0000              
1660  0000              defc __BF_DIO = 0x10
1661  0000              defc __BF_DIOSTATUS = 0x10
1662  0000              defc __BF_DIORESET = 0x11
1663  0000              defc __BF_DIOSEEK = 0x12
1664  0000              defc __BF_DIOREAD = 0x13
1665  0000              defc __BF_DIOWRITE = 0x14
1666  0000              defc __BF_DIOVERIFY = 0x15
1667  0000              defc __BF_DIOFORMAT = 0x16
1668  0000              defc __BF_DIODEVICE = 0x17
1669  0000              defc __BF_DIOMEDIA = 0x18
1670  0000              defc __BF_DIODEFMED = 0x19
1671  0000              defc __BF_DIOCAP = 0x1a
1672  0000              defc __BF_DIOGEOM = 0x1b
1673  0000              
1674  0000              defc __BF_RTC = 0x20
1675  0000              defc __BF_RTCGETTIM = 0x20
1676  0000              defc __BF_RTCSETTIM = 0x21
1677  0000              defc __BF_RTCGETBYT = 0x22
1678  0000              defc __BF_RTCSETBYT = 0x23
1679  0000              defc __BF_RTCGETBLK = 0x24
1680  0000              defc __BF_RTCSETBLK = 0x25
1681  0000              
1682  0000              defc __BF_EMU = 0x30
1683  0000              
1684  0000              defc __BF_VDA = 0x40
1685  0000              defc __BF_VDAINI = 0x40
1686  0000              defc __BF_VDAQRY = 0x41
1687  0000              defc __BF_VDARES = 0x42
1688  0000              defc __BF_VDADEV = 0x43
1689  0000              defc __BF_VDASCS = 0x44
1690  0000              defc __BF_VDASCP = 0x45
1691  0000              defc __BF_VDASAT = 0x46
1692  0000              defc __BF_VDASCO = 0x47
1693  0000              defc __BF_VDAWRC = 0x48
1694  0000              defc __BF_VDAFIL = 0x49
1695  0000              defc __BF_VDACPY = 0x4a
1696  0000              defc __BF_VDASCR = 0x4b
1697  0000              defc __BF_VDAKST = 0x4c
1698  0000              defc __BF_VDAKFL = 0x4d
1699  0000              defc __BF_VDAKRD = 0x4e
1700  0000              
1701  0000              defc __BF_SYS = 0xF0
1702  0000              defc __BF_SYSRESET = 0xf0
1703  0000              defc __BF_SYSVER = 0xf1
1704  0000              defc __BF_SYSSETBNK = 0xf2
1705  0000              defc __BF_SYSGETBNK = 0xf3
1706  0000              defc __BF_SYSSETCPY = 0xf4
1707  0000              defc __BF_SYSBNKCPY = 0xf5
1708  0000              defc __BF_SYSALLOC = 0xf6
1709  0000              defc __BF_SYSFREE = 0xf7
1710  0000              defc __BF_SYSGET = 0xf8
1711  0000              defc __BF_SYSSET = 0xf9
1712  0000              defc __BF_SYSPEEK = 0xfa
1713  0000              defc __BF_SYSPOKE = 0xfb
1714  0000              defc __BF_SYSINT = 0xfc
1715  0000              
1716  0000              defc __BF_SYSGET_CIOCNT = 0x00
1717  0000              defc __BF_SYSGET_DIOCNT = 0x10
1718  0000              defc __BF_SYSGET_VDACNT = 0x40
1719  0000              defc __BF_SYSGET_TIMER = 0xD0
1720  0000              defc __BF_SYSGET_SECS = 0xD1
1721  0000              defc __BF_SYSGET_BOOTINFO = 0xE0
1722  0000              defc __BF_SYSGET_CPUINFO = 0xF0
1723  0000              defc __BF_SYSGET_MEMINFO = 0xF1
1724  0000              defc __BF_SYSGET_BNKINFO = 0xF2
1725  0000              
1726  0000              defc __BF_SYSSET_TIMER = 0xD0
1727  0000              defc __BF_SYSSET_SECS = 0xD1
1728  0000              defc __BF_SYSSET_BOOTINFO = 0xE0
1729  0000              
1730  0000              defc __BF_SYSINT_INFO = 0x00
1731  0000              defc __BF_SYSINT_GET = 0x10
1732  0000              defc __BF_SYSINT_SET = 0x20
1733  0000              
1734  0000              defc __CIODEV_UART = 0x00
1735  0000              defc __CIODEV_ASCI = 0x10
1736  0000              defc __CIODEV_TERM = 0x20
1737  0000              defc __CIODEV_PRPCON = 0x30
1738  0000              defc __CIODEV_PPPCON = 0x40
1739  0000              defc __CIODEV_SIO = 0x50
1740  0000              defc __CIODEV_ACIA = 0x60
1741  0000              defc __CIODEV_PIO = 0x70
1742  0000              defc __CIODEV_UF = 0x80
1743  0000              defc __CIODEV_CONSOLE = 0xD0
1744  0000              
1745  0000              defc __DIODEV_MD = 0x00
1746  0000              defc __DIODEV_FD = 0x10
1747  0000              defc __DIODEV_RF = 0x20
1748  0000              defc __DIODEV_IDE = 0x30
1749  0000              defc __DIODEV_ATAPI = 0x40
1750  0000              defc __DIODEV_PPIDE = 0x50
1751  0000              defc __DIODEV_SD = 0x60
1752  0000              defc __DIODEV_PRPSD = 0x70
1753  0000              defc __DIODEV_PPPSD = 0x80
1754  0000              defc __DIODEV_HDSK = 0x90
1755  0000              
1756  0000              defc __VDADEV_VDU = 0x00
1757  0000              defc __VDADEV_CVDU = 0x10
1758  0000              defc __VDADEV_NEC = 0x20
1759  0000              defc __VDADEV_TMS = 0x30
1760  0000              defc __VDADEV_VGA = 0x40
1761  0000              
1762  0000              defc __EMUTYP_NONE = 0x00
1763  0000              defc __EMUTYP_TTY = 0x01
1764  0000              defc __EMUTYP_ANSI = 0x02
1765  0000              
1766  0000              defc __HBX_XFCDAT = 0xffe0
1767  0000              defc __HB_CURBNK = 0xffe0
1768  0000              defc __HB_INVBNK = 0xffe1
1769  0000              defc __HB_SRCADR = 0xffe2
1770  0000              defc __HB_SRCBNK = 0xffe4
1771  0000              defc __HB_DSTADR = 0xffe5
1772  0000              defc __HB_DSTBNK = 0xffe7
1773  0000              defc __HB_CPYLEN = 0xffe8
1774  0000              
1775  0000              defc __HBX_XFCFNS = 0xfff0
1776  0000              defc __HB_INVOKE = 0xfff0
1777  0000              defc __HB_BNKSEL = 0xfff3
1778  0000              defc __HB_BNKCPY = 0xfff6
1779  0000              defc __HB_BNKCALL = 0xfff9
1780  0000              defc __HB_IDENT = 0xfffe
1781  0000              
1782  0000              
1783  0000              
1784  0000              
1785  0000              
1786  0000              
1787  0000              
1788  0000              
1789  0000              
1790  0000              PUBLIC __CPM_RCON
1791  0000              PUBLIC __CPM_WCON
1792  0000              PUBLIC __CPM_RRDR
1793  0000              PUBLIC __CPM_WPUN
1794  0000              PUBLIC __CPM_WLST
1795  0000              PUBLIC __CPM_DCIO
1796  0000              PUBLIC __CPM_GIOB
1797  0000              PUBLIC __CPM_SIOB
1798  0000              PUBLIC __CPM_PRST
1799  0000              PUBLIC __CPM_RCOB
1800  0000              PUBLIC __CPM_ICON
1801  0000              PUBLIC __CPM_VERS
1802  0000              PUBLIC __CPM_RDS
1803  0000              PUBLIC __CPM_LGIN
1804  0000              PUBLIC __CPM_OPN
1805  0000              PUBLIC __CPM_CLS
1806  0000              PUBLIC __CPM_FFST
1807  0000              PUBLIC __CPM_FNXT
1808  0000              PUBLIC __CPM_DEL
1809  0000              PUBLIC __CPM_READ
1810  0000              PUBLIC __CPM_WRIT
1811  0000              PUBLIC __CPM_MAKE
1812  0000              PUBLIC __CPM_REN
1813  0000              PUBLIC __CPM_ILOG
1814  0000              PUBLIC __CPM_IDRV
1815  0000              PUBLIC __CPM_SDMA
1816  0000              PUBLIC __CPM_SUID
1817  0000              PUBLIC __CPM_RRAN
1818  0000              PUBLIC __CPM_WRAN
1819  0000              PUBLIC __CPM_CFS
1820  0000              PUBLIC __CPM_DSEG
1821  0000              
1822  0000              
1823  0000              
1824  0000              
1825  0000              defc __CPM_RCON = 1
1826  0000              defc __CPM_WCON = 2
1827  0000              defc __CPM_RRDR = 3
1828  0000              defc __CPM_WPUN = 4
1829  0000              defc __CPM_WLST = 5
1830  0000              defc __CPM_DCIO = 6
1831  0000              defc __CPM_GIOB = 7
1832  0000              defc __CPM_SIOB = 8
1833  0000              defc __CPM_PRST = 9
1834  0000              defc __CPM_RCOB = 10
1835  0000              defc __CPM_ICON = 11
1836  0000              defc __CPM_VERS = 12
1837  0000              defc __CPM_RDS  = 13
1838  0000              defc __CPM_LGIN = 14
1839  0000              defc __CPM_OPN  = 15
1840  0000              defc __CPM_CLS  = 16
1841  0000              defc __CPM_FFST = 17
1842  0000              defc __CPM_FNXT = 18
1843  0000              defc __CPM_DEL  = 19
1844  0000              defc __CPM_READ = 20
1845  0000              defc __CPM_WRIT = 21
1846  0000              defc __CPM_MAKE = 22
1847  0000              defc __CPM_REN  = 23
1848  0000              defc __CPM_ILOG = 24
1849  0000              defc __CPM_IDRV = 25
1850  0000              defc __CPM_SDMA = 26
1851  0000              defc __CPM_SUID = 32
1852  0000              defc __CPM_RRAN = 33
1853  0000              defc __CPM_WRAN = 34
1854  0000              defc __CPM_CFS  = 35
1855  0000              defc __CPM_DSEG = 51
1856  0000              
1857  0000              
1858  0000              
1859  0000              
1860  0000              
1861  0000              
1862  0000              
1863  0000              
1864  0000              
1865  0000              
1866  0000              ENDIF
1867  0000              
1868  0000              
123   0000              
124   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
125   0000              ;; CRT AND CLIB CONFIGURATION ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
126   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
127   0000              
128   0000              include "../crt_defaults.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000                 ; crt configuration
7     0000              
8     0000                 defc DEF__crt_org_code              = 0       ;; org of code section
9     0000                 defc DEF__crt_org_data              = 0       ;; org of data section (0 or -1 means follow code, -1 means generate separate binary)
10    0000                 defc DEF__crt_org_bss               = 0       ;; org of bss section (0 or -1 means follow data, -1 means generate separate binary)
11    0000              
12    0000                 defc DEF__crt_model                 = 0       ;; 0 = ram model, 1 = rom model, 2 = compressed rom model
13    0000                 defc DEF__crt_enforce_snames        = 3       ;; bit 0 set = enforce BSS name, bit 1 set = enforce DATA name
14    0000              
15    0000                 defc DEF__register_sp               = 0       ;; initial value of sp (-1 = do not modify (some targets may redefine meaning), 0 = top of memory)
16    0000                 defc DEF__crt_stack_size            = 512     ;; minimum size reserved for stack when automatically allocating memory for the malloc heap
17    0000              
18    0000                 defc DEF__crt_initialize_bss        = 0       ;; generate code to initialize bss section at startup
19    0000              
20    0000                 defc DEF__crt_include_preamble      = 0       ;; if non-zero, user supplies code in file "crt_preamble.asm" that is inserted at the start of the binary
21    0000              
22    0000                 defc DEF__crt_org_vector_table      = 0       ;; if negative and Z88DK supplies page zero code, creates a section "code_vector" aligned to a page boundary to hold int vectors
23    0000                 defc DEF__crt_io_vector_base        = 0       ;; io vector base address for z180 internal peripherals
24    0000                 defc DEF__crt_interrupt_mode        = -1      ;; if 0-2 crt inserts appropriate im x instruction
25    0000                 defc DEF__crt_interrupt_mode_exit   = -1      ;; if 0-2 crt inserts appropriate im x instruction on exit
26    0000              
27    0000                 defc DEF__crt_enable_commandline    = 2       ;; generate argc and argv from command line (targets without command line will get argc=1, argv[0]="", argv[1]=NULL)
28    0000                 defc DEF__crt_enable_commandline_ex = 0       ;; target specific bits and bits for io redirection and piping
29    0000                 defc DEF__crt_enable_restart        = 0       ;; if non-zero, restart the program on exit (correct initialization of static variables with rom models only)
30    0000                 defc DEF__crt_enable_close          = 1       ;; if non-zero, close files on exit
31    0000              
32    0000                 defc DEF__crt_enable_eidi           = 0       ;; bit flags: 0x01 = di on start, 0x02 = ei on start, 0x10 = di on exit, 0x20 = ei on exit
33    0000                 defc DEF__crt_on_exit               = 0x10001 ;; halt on exit (see documentation for other exit behaviours)
34    0000              
35    0000                 defc DEF__crt_enable_rst            = 0       ;; if non-zero and in some crts with code org = 0, set bits indicate which rst locations are implemented with user code
36    0000                 defc DEF__crt_enable_nmi            = 0       ;; if non-zero and in some crts with code org = 0, a jump to user code to service the nmi is inserted
37    0000                 defc DEF__crt_enable_trap           = 0       ;; if non-zero and in some crts with code org = 0 and Z180 target, a jump to user code to service traps is inserted
38    0000              
39    0000                 ; clib defaults
40    0000              
41    0000                 defc DEF__clib_exit_stack_size      = 32      ;; max number of functions that can be registered with atexit()
42    0000                 defc DEF__clib_quickexit_stack_size = 32      ;; max number of functions that can be registered with at_quickexit()
43    0000              
44    0000                 defc DEF__clib_malloc_heap_size     = -1      ;; size of malloc heap (0 = do not create a heap, -1 = automatically place heap between end of bss section and bottom of stack)
45    0000                 defc DEF__clib_stdio_heap_size      = 256     ;; size of stdio heap (0 = do not allocate bytes for opening of files)
46    0000              
47    0000                 defc DEF__clib_balloc_table_size    = 0       ;; number of queues created for balloc block memory allocator
48    0000              
49    0000                 defc DEF__clib_fopen_max            = 8       ;; max number of FILE*
50    0000                 defc DEF__clib_open_max             = 8       ;; max number of open files
51    0000              
52    0000              ;; end crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
53    0000              
129   0000              include "crt_config.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              IF __CRTCFG = -1
7     0000              
8     0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
9     0000                 ;; user supplied crt defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
10    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11    0000              
12    0000                 INCLUDE "crt_cfg.inc"
13    0000              
14    0000              ENDIF
15    0000              
16    0000              IF __CRTCFG = 0
17    0000              
18    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
19    0000                 ;;;; rom with acia driver model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
20    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21    0000              
22    0000                 defc TAR__crt_org_code              = 0
23    0000                 defc TAR__crt_org_data              = 0x8000
24    0000                 defc TAR__crt_org_bss               = -1
25    0000              
26    0000                 defc TAR__crt_model                 = 3
27    0000              
28    0000                 defc TAR__register_sp               = 0
29    0000                 defc TAR__crt_stack_size            = 256
30    0000              
31    0000                 defc TAR__crt_initialize_bss        = 1
32    0000              
33    0000                 defc TAR__crt_include_preamble      = 0
34    0000              
35    0000                 defc TAR__crt_org_vector_table      = 0
36    0000                 defc TAR__crt_interrupt_mode        = 1
37    0000                 defc TAR__crt_interrupt_mode_exit   = -1
38    0000              
39    0000                 defc TAR__crt_enable_commandline    = 0
40    0000                 defc TAR__crt_enable_commandline_ex = 0
41    0000                 defc TAR__crt_enable_restart        = 1
42    0000                 defc TAR__crt_enable_close          = 1
43    0000              
44    0000                 defc TAR__crt_enable_eidi           = 0x12
45    0000                 defc TAR__crt_on_exit               = 0x10001
46    0000              
47    0000                 defc TAR__crt_enable_rst            = 0x80
48    0000                 defc TAR__crt_enable_nmi            = 0
49    0000              
50    0000                 ; clib defaults
51    0000              
52    0000                 defc TAR__clib_exit_stack_size      = 0
53    0000                 defc TAR__clib_quickexit_stack_size = 0
54    0000              
55    0000                 defc TAR__clib_malloc_heap_size     = -1
56    0000                 defc TAR__clib_stdio_heap_size      = 128
57    0000              
58    0000                 defc TAR__clib_balloc_table_size    = 0
59    0000              
60    0000                 defc TAR__clib_fopen_max            = 0
61    0000                 defc TAR__clib_open_max             = 0
62    0000              
63    0000              ENDIF
64    0000              
65    0000              IF __CRTCFG = 1
66    0000              
67    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
68    0000                 ;;;; rom with sio driver model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
69    0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
70    0000              
71    0000                 defc TAR__crt_org_code              = 0
72    0000                 defc TAR__crt_org_data              = 0x8000
73    0000                 defc TAR__crt_org_bss               = -1
74    0000              
75    0000                 defc TAR__crt_model                 = 3
76    0000              
77    0000                 defc TAR__register_sp               = 0xFFF0
78    0000                 defc TAR__crt_stack_size            = 256
79    0000              
80    0000                 defc TAR__crt_initialize_bss        = 1
81    0000              
82    0000                 defc TAR__crt_include_preamble      = 0
83    0000              
84    0000                 defc TAR__crt_org_vector_table      = 0xFFF0
85    0000                 defc TAR__crt_interrupt_mode        = 2
86    0000                 defc TAR__crt_interrupt_mode_exit   = -1
87    0000              
88    0000                 defc TAR__crt_enable_commandline    = 0
89    0000                 defc TAR__crt_enable_commandline_ex = 0
90    0000                 defc TAR__crt_enable_restart        = 1
91    0000                 defc TAR__crt_enable_close          = 1
92    0000              
93    0000                 defc TAR__crt_enable_eidi           = 0x12
94    0000                 defc TAR__crt_on_exit               = 0x10001
95    0000              
96    0000                 defc TAR__crt_enable_rst            = 0
97    0000                 defc TAR__crt_enable_nmi            = 0
98    0000              
99    0000                 ; clib defaults
100   0000              
101   0000                 defc TAR__clib_exit_stack_size      = 0
102   0000                 defc TAR__clib_quickexit_stack_size = 0
103   0000              
104   0000                 defc TAR__clib_malloc_heap_size     = -1
105   0000                 defc TAR__clib_stdio_heap_size      = 256
106   0000              
107   0000                 defc TAR__clib_balloc_table_size    = 0
108   0000              
109   0000                 defc TAR__clib_fopen_max            = 0
110   0000                 defc TAR__clib_open_max             = 0
111   0000              
112   0000              ENDIF
113   0000              
114   0000              IF __CRTCFG = 2
115   0000              
116   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
117   0000                 ;;;; application with romwbw hbios driver model ;;;;;;;;;;;;
118   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
119   0000              
120   0000                 defc TAR__crt_org_code              = 0x0100
121   0000                 defc TAR__crt_org_data              = 0
122   0000                 defc TAR__crt_org_bss               = 0x8000
123   0000              
124   0000                 defc TAR__crt_model                 = 0
125   0000              
126   0000                 defc TAR__register_sp               = 0xF000
127   0000                 defc TAR__crt_stack_size            = 256
128   0000              
129   0000                 defc TAR__crt_initialize_bss        = 1
130   0000              
131   0000                 defc TAR__crt_include_preamble      = 0
132   0000              
133   0000                 defc TAR__crt_org_vector_table      = 0
134   0000                 defc TAR__crt_io_vector_base        = -1
135   0000              
136   0000                 defc TAR__crt_interrupt_mode        = -1
137   0000                 defc TAR__crt_interrupt_mode_exit   = -1
138   0000              
139   0000                 defc TAR__crt_enable_commandline    = 0
140   0000                 defc TAR__crt_enable_commandline_ex = 0
141   0000                 defc TAR__crt_enable_restart        = 0
142   0000                 defc TAR__crt_enable_close          = 1
143   0000              
144   0000                 defc TAR__crt_enable_eidi           = 0
145   0000                 defc TAR__crt_on_exit               = 0x0000
146   0000              
147   0000                 defc TAR__crt_enable_rst            = 0
148   0000                 defc TAR__crt_enable_nmi            = 0
149   0000                 defc TAR__crt_enable_trap           = 0
150   0000              
151   0000                 ; clib defaults
152   0000              
153   0000                 defc TAR__clib_exit_stack_size      = 0
154   0000                 defc TAR__clib_quickexit_stack_size = 0
155   0000              
156   0000                 defc TAR__clib_malloc_heap_size     = -1
157   0000                 defc TAR__clib_stdio_heap_size      = 256
158   0000              
159   0000                 defc TAR__clib_balloc_table_size    = 0
160   0000              
161   0000                 defc TAR__clib_fopen_max            = 0
162   0000                 defc TAR__clib_open_max             = 0
163   0000              
164   0000              ENDIF
165   0000              
166   0000              IF __CRTCFG = 3
167   0000              
168   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
169   0000                 ;;;; application with ms basic driver model ;;;;;;;;;;;;;;;;
170   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
171   0000              
172   0000                 defc TAR__crt_org_code              = 0x9000
173   0000                 defc TAR__crt_org_data              = 0
174   0000                 defc TAR__crt_org_bss               = -1
175   0000              
176   0000                 defc TAR__crt_model                 = 0
177   0000              
178   0000                 defc TAR__register_sp               = 0
179   0000                 defc TAR__crt_stack_size            = 256
180   0000              
181   0000                 defc TAR__crt_initialize_bss        = 1
182   0000              
183   0000                 defc TAR__crt_include_preamble      = 0
184   0000              
185   0000                 defc TAR__crt_org_vector_table      = 0
186   0000                 defc TAR__crt_interrupt_mode        = -1
187   0000                 defc TAR__crt_interrupt_mode_exit   = 1
188   0000              
189   0000                 defc TAR__crt_enable_commandline    = 0
190   0000                 defc TAR__crt_enable_commandline_ex = 0
191   0000                 defc TAR__crt_enable_restart        = 0
192   0000                 defc TAR__crt_enable_close          = 1
193   0000              
194   0000                 defc TAR__crt_enable_eidi           = 0x20
195   0000                 defc TAR__crt_on_exit               = 0x10002
196   0000              
197   0000                 defc TAR__crt_enable_rst            = 0
198   0000                 defc TAR__crt_enable_nmi            = 0
199   0000              
200   0000                 ; clib defaults
201   0000              
202   0000                 defc TAR__clib_exit_stack_size      = 0
203   0000                 defc TAR__clib_quickexit_stack_size = 0
204   0000              
205   0000                 defc TAR__clib_malloc_heap_size     = -1
206   0000                 defc TAR__clib_stdio_heap_size      = 128
207   0000              
208   0000                 defc TAR__clib_balloc_table_size    = 0
209   0000              
210   0000                 defc TAR__clib_fopen_max            = 0
211   0000                 defc TAR__clib_open_max             = 0
212   0000              
213   0000              ENDIF
214   0000              
215   0000              IF __CRTCFG = 4
216   0000              
217   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
218   0000                 ;;;; application with cp/m ram model ;;;;;;;;;;;;;;;;;;;;;;;
219   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
220   0000              
221   0000                 defc TAR__crt_org_code              = 0x100
222   0000                 defc TAR__crt_org_data              = 0
223   0000                 defc TAR__crt_org_bss               = -1
224   0000              
225   0000                 defc TAR__crt_model                 = 0
226   0000              
227   0000                 defc TAR__register_sp               = -0x0006
228   0000                 defc TAR__crt_stack_size            = 256
229   0000              
230   0000                 defc TAR__crt_initialize_bss        = 1
231   0000              
232   0000                 defc TAR__crt_include_preamble      = 0
233   0000              
234   0000                 defc TAR__crt_interrupt_mode        = -1
235   0000                 defc TAR__crt_interrupt_mode_exit   = -1
236   0000              
237   0000                 defc TAR__crt_enable_commandline    = 3
238   0000                 defc TAR__crt_enable_commandline_ex = 0
239   0000                 defc TAR__crt_enable_restart        = 0
240   0000                 defc TAR__crt_enable_close          = 1
241   0000              
242   0000                 defc TAR__crt_enable_eidi           = 0
243   0000                 defc TAR__crt_on_exit               = 0x0000
244   0000              
245   0000                 defc TAR__crt_enable_rst            = 0
246   0000                 defc TAR__crt_enable_nmi            = 0
247   0000              
248   0000                 ; clib defaults
249   0000              
250   0000                 defc TAR__clib_exit_stack_size      = 0
251   0000                 defc TAR__clib_quickexit_stack_size = 0
252   0000              
253   0000                 defc TAR__clib_malloc_heap_size     = -1
254   0000                 defc TAR__clib_stdio_heap_size      = 256
255   0000              
256   0000                 defc TAR__clib_balloc_table_size    = 0
257   0000              
258   0000                 defc TAR__clib_fopen_max            = 0
259   0000                 defc TAR__clib_open_max             = 0
260   0000              
261   0000              ENDIF
262   0000              
263   0000              IF __CRTCFG = 5
264   0000              
265   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
266   0000                 ;;;; rom with no drivers model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
267   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
268   0000              
269   0000                 defc TAR__crt_org_code              = 0x9000
270   0000                 defc TAR__crt_org_data              = 0
271   0000                 defc TAR__crt_org_bss               = -1
272   0000              
273   0000                 defc TAR__crt_model                 = 0
274   0000              
275   0000                 defc TAR__register_sp               = 0
276   0000                 defc TAR__crt_stack_size            = 256
277   0000              
278   0000                 defc TAR__crt_initialize_bss        = 1
279   0000              
280   0000                 defc TAR__crt_include_preamble      = 0
281   0000              
282   0000                 defc TAR__crt_org_vector_table      = 0
283   0000                 defc TAR__crt_interrupt_mode        = -1
284   0000                 defc TAR__crt_interrupt_mode_exit   = -1
285   0000              
286   0000                 defc TAR__crt_enable_commandline    = 0
287   0000                 defc TAR__crt_enable_commandline_ex = 0
288   0000                 defc TAR__crt_enable_restart        = 0
289   0000                 defc TAR__crt_enable_close          = 1
290   0000              
291   0000                 defc TAR__crt_enable_eidi           = 0x11
292   0000                 defc TAR__crt_on_exit               = 0x10001
293   0000              
294   0000                 defc TAR__crt_enable_rst            = 0
295   0000                 defc TAR__crt_enable_nmi            = 0
296   0000              
297   0000                 ; clib defaults
298   0000              
299   0000                 defc TAR__clib_exit_stack_size      = 0
300   0000                 defc TAR__clib_quickexit_stack_size = 0
301   0000              
302   0000                 defc TAR__clib_malloc_heap_size     = -1
303   0000                 defc TAR__clib_stdio_heap_size      = 128
304   0000              
305   0000                 defc TAR__clib_balloc_table_size    = 0
306   0000              
307   0000                 defc TAR__clib_fopen_max            = 0
308   0000                 defc TAR__clib_open_max             = 0
309   0000              
310   0000              ENDIF
311   0000              
312   0000              ;; end crt target defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
313   0000              
130   0000              
131   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
132   0000              ;; crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
133   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
134   0000              
135   0000              
136   0000                 IFDEF CRT_ORG_CODE
137   0000              
138   0000                    defc __crt_org_code = CRT_ORG_CODE
139   0000              
140   0000                 ELSE
141   0000              
142   0000                    IFDEF TAR__crt_org_code
143   0000              
144   0000                       defc __crt_org_code = TAR__crt_org_code
145   0000              
146   0000                    ELSE
147   0000              
148   0000                       defc __crt_org_code = DEF__crt_org_code
149   0000              
150   0000                    ENDIF
151   0000              
152   0000                 ENDIF
153   0000              
154   0000                 IFDEF REGISTER_SP
155   0000              
156   0000                    defc __register_sp = REGISTER_SP
157   0000              
158   0000                 ELSE
159   0000              
160   0000                    IFDEF STACKPTR
161   0000              
162   0000                       defc __register_sp = STACKPTR
163   0000              
164   0000                    ELSE
165   0000              
166   0000                       IFDEF TAR__register_sp
167   0000              
168   0000                          defc __register_sp = TAR__register_sp
169   0000              
170   0000                       ELSE
171   0000              
172   0000                          defc __register_sp = DEF__register_sp
173   0000              
174   0000                       ENDIF
175   0000              
176   0000                    ENDIF
177   0000              
178   0000                 ENDIF
179   0000              
180   0000              
181   0000                 IFDEF CRT_STACK_SIZE
182   0000              
183   0000                    defc __crt_stack_size = CRT_STACK_SIZE
184   0000              
185   0000                 ELSE
186   0000              
187   0000                    IFDEF TAR__crt_stack_size
188   0000              
189   0000                       defc __crt_stack_size = TAR__crt_stack_size
190   0000              
191   0000                    ELSE
192   0000              
193   0000                       defc __crt_stack_size = DEF__crt_stack_size
194   0000              
195   0000                    ENDIF
196   0000              
197   0000                 ENDIF
198   0000              
199   0000              
200   0000                 IFDEF CRT_ORG_DATA
201   0000              
202   0000                    defc __crt_org_data = CRT_ORG_DATA
203   0000              
204   0000                 ELSE
205   0000              
206   0000                    IFDEF TAR__crt_org_data
207   0000              
208   0000                       defc __crt_org_data = TAR__crt_org_data
209   0000              
210   0000                    ELSE
211   0000              
212   0000                       defc __crt_org_data = DEF__crt_org_data
213   0000              
214   0000                    ENDIF
215   0000              
216   0000                 ENDIF
217   0000              
218   0000              
219   0000                 IFDEF CRT_ORG_BSS
220   0000              
221   0000                    defc __crt_org_bss = CRT_ORG_BSS
222   0000              
223   0000                 ELSE
224   0000              
225   0000                    IFDEF TAR__crt_org_bss
226   0000              
227   0000                       defc __crt_org_bss = TAR__crt_org_bss
228   0000              
229   0000                    ELSE
230   0000              
231   0000                       defc __crt_org_bss = DEF__crt_org_bss
232   0000              
233   0000                    ENDIF
234   0000              
235   0000                 ENDIF
236   0000              
237   0000              
238   0000                 IFDEF CRT_MODEL
239   0000              
240   0000                    defc __crt_model = CRT_MODEL
241   0000              
242   0000                 ELSE
243   0000              
244   0000                    IFDEF TAR__crt_model
245   0000              
246   0000                       defc __crt_model = TAR__crt_model
247   0000              
248   0000                    ELSE
249   0000              
250   0000                       defc __crt_model = DEF__crt_model
251   0000              
252   0000                    ENDIF
253   0000              
254   0000                 ENDIF
255   0000              
256   0000                 IFDEF CRT_INITIALIZE_BSS
257   0000              
258   0000                    defc __crt_initialize_bss = CRT_INITIALIZE_BSS
259   0000              
260   0000                 ELSE
261   0000              
262   0000                    IFDEF TAR__crt_initialize_bss
263   0000              
264   0000                       defc __crt_initialize_bss = TAR__crt_initialize_bss
265   0000              
266   0000                    ELSE
267   0000              
268   0000                       defc __crt_initialize_bss = DEF__crt_initialize_bss
269   0000              
270   0000                    ENDIF
271   0000              
272   0000                 ENDIF
273   0000              
274   0000              
275   0000                 IFDEF CRT_INCLUDE_PREAMBLE
276   0000              
277   0000                    defc __crt_include_preamble = CRT_INCLUDE_PREAMBLE
278   0000              
279   0000                 ELSE
280   0000              
281   0000                    IFDEF TAR__crt_include_preamble
282   0000              
283   0000                       defc __crt_include_preamble = TAR__crt_include_preamble
284   0000              
285   0000                    ELSE
286   0000              
287   0000                       defc __crt_include_preamble = DEF__crt_include_preamble
288   0000              
289   0000                    ENDIF
290   0000              
291   0000                 ENDIF
292   0000              
293   0000                 IFDEF CRT_ORG_VECTOR_TABLE
294   0000              
295   0000                    defc __crt_org_vector_table = CRT_ORG_VECTOR_TABLE
296   0000              
297   0000                 ELSE
298   0000              
299   0000                    IFDEF TAR__crt_org_vector_table
300   0000              
301   0000                       defc __crt_org_vector_table = TAR__crt_org_vector_table
302   0000              
303   0000                    ELSE
304   0000              
305   0000                       defc __crt_org_vector_table = DEF__crt_org_vector_table
306   0000              
307   0000                    ENDIF
308   0000              
309   0000                 ENDIF
310   0000              
311   0000              IF __Z180
312   0000              
313   0000                 IFDEF CRT_IO_VECTOR_BASE
314   0000              
315   0000                    defc __crt_io_vector_base = CRT_IO_VECTOR_BASE
316   0000              
317   0000                 ELSE
318   0000              
319   0000                    IFDEF TAR__crt_io_vector_base
320   0000              
321   0000                       defc __crt_io_vector_base = TAR__crt_io_vector_base
322   0000              
323   0000                    ELSE
324   0000              
325   0000                       defc __crt_io_vector_base = DEF__crt_io_vector_base
326   0000              
327   0000                    ENDIF
328   0000              
329   0000                 ENDIF
330   0000              
331   0000              ENDIF
332   0000              
333   0000                 IFDEF CRT_INTERRUPT_MODE
334   0000              
335   0000                    defc __crt_interrupt_mode = CRT_INTERRUPT_MODE
336   0000              
337   0000                 ELSE
338   0000              
339   0000                    IFDEF TAR__crt_interrupt_mode
340   0000              
341   0000                       defc __crt_interrupt_mode = TAR__crt_interrupt_mode
342   0000              
343   0000                    ELSE
344   0000              
345   0000                       defc __crt_interrupt_mode = DEF__crt_interrupt_mode
346   0000              
347   0000                    ENDIF
348   0000              
349   0000                 ENDIF
350   0000              
351   0000              
352   0000                 IFDEF CRT_INTERRUPT_MODE_EXIT
353   0000              
354   0000                    defc __crt_interrupt_mode_exit = CRT_INTERRUPT_MODE_EXIT
355   0000              
356   0000                 ELSE
357   0000              
358   0000                    IFDEF TAR__crt_interrupt_mode_exit
359   0000              
360   0000                       defc __crt_interrupt_mode_exit = TAR__crt_interrupt_mode_exit
361   0000              
362   0000                    ELSE
363   0000              
364   0000                       defc __crt_interrupt_mode_exit = DEF__crt_interrupt_mode_exit
365   0000              
366   0000                    ENDIF
367   0000              
368   0000                 ENDIF
369   0000              
370   0000              
371   0000                 IFDEF CRT_ENABLE_COMMANDLINE
372   0000              
373   0000                    defc __crt_enable_commandline = CRT_ENABLE_COMMANDLINE
374   0000              
375   0000                 ELSE
376   0000              
377   0000                    IFDEF TAR__crt_enable_commandline
378   0000              
379   0000                       defc __crt_enable_commandline = TAR__crt_enable_commandline
380   0000              
381   0000                    ELSE
382   0000              
383   0000                       defc __crt_enable_commandline = DEF__crt_enable_commandline
384   0000              
385   0000                    ENDIF
386   0000              
387   0000                 ENDIF
388   0000              
389   0000              
390   0000                 IFDEF CRT_ENABLE_COMMANDLINE_EX
391   0000              
392   0000                    defc __crt_enable_commandline_ex = CRT_ENABLE_COMMANDLINE_EX
393   0000              
394   0000                 ELSE
395   0000              
396   0000                    IFDEF TAR__crt_enable_commandline_ex
397   0000              
398   0000                       defc __crt_enable_commandline_ex = TAR__crt_enable_commandline_ex
399   0000              
400   0000                    ELSE
401   0000              
402   0000                       defc __crt_enable_commandline_ex = DEF__crt_enable_commandline_ex
403   0000              
404   0000                    ENDIF
405   0000              
406   0000                 ENDIF
407   0000              
408   0000              
409   0000                 IFDEF CRT_ENABLE_RESTART
410   0000              
411   0000                    defc __crt_enable_restart = CRT_ENABLE_RESTART
412   0000              
413   0000                 ELSE
414   0000              
415   0000                    IFDEF TAR__crt_enable_restart
416   0000              
417   0000                       defc __crt_enable_restart = TAR__crt_enable_restart
418   0000              
419   0000                    ELSE
420   0000              
421   0000                       defc __crt_enable_restart = DEF__crt_enable_restart
422   0000              
423   0000                    ENDIF
424   0000              
425   0000                 ENDIF
426   0000              
427   0000              
428   0000                 IFDEF CRT_ENABLE_CLOSE
429   0000              
430   0000                    defc __crt_enable_close = CRT_ENABLE_CLOSE
431   0000              
432   0000                 ELSE
433   0000              
434   0000                    IFDEF TAR__crt_enable_close
435   0000              
436   0000                       defc __crt_enable_close = TAR__crt_enable_close
437   0000              
438   0000                    ELSE
439   0000              
440   0000                       defc __crt_enable_close = DEF__crt_enable_close
441   0000              
442   0000                    ENDIF
443   0000              
444   0000                 ENDIF
445   0000              
446   0000              
447   0000                 IFDEF CRT_ENABLE_EIDI
448   0000              
449   0000                    defc __crt_enable_eidi = CRT_ENABLE_EIDI
450   0000              
451   0000                 ELSE
452   0000              
453   0000                    IFDEF TAR__crt_enable_eidi
454   0000              
455   0000                       defc __crt_enable_eidi = TAR__crt_enable_eidi
456   0000              
457   0000                    ELSE
458   0000              
459   0000                       defc __crt_enable_eidi = DEF__crt_enable_eidi
460   0000              
461   0000                    ENDIF
462   0000              
463   0000                 ENDIF
464   0000              
465   0000              
466   0000                 IF __crt_enable_restart
467   0000              
468   0000                    defc __crt_on_exit = 0x10008
469   0000              
470   0000                 ELSE
471   0000              
472   0000                    IFDEF CRT_ON_EXIT
473   0000              
474   0000                       defc __crt_on_exit = CRT_ON_EXIT
475   0000              
476   0000                    ELSE
477   0000              
478   0000                       IFDEF TAR__crt_on_exit
479   0000              
480   0000                          defc __crt_on_exit = TAR__crt_on_exit
481   0000              
482   0000                       ELSE
483   0000              
484   0000                          defc __crt_on_exit = DEF__crt_on_exit
485   0000              
486   0000                       ENDIF
487   0000              
488   0000                    ENDIF
489   0000              
490   0000                 ENDIF
491   0000              
492   0000              
493   0000                 IFDEF CLIB_EXIT_STACK_SIZE
494   0000              
495   0000                    defc __clib_exit_stack_size = CLIB_EXIT_STACK_SIZE
496   0000              
497   0000                 ELSE
498   0000              
499   0000                    IFDEF TAR__clib_exit_stack_size
500   0000              
501   0000                       defc __clib_exit_stack_size = TAR__clib_exit_stack_size
502   0000              
503   0000                    ELSE
504   0000              
505   0000                       defc __clib_exit_stack_size = DEF__clib_exit_stack_size
506   0000              
507   0000                    ENDIF
508   0000              
509   0000                 ENDIF
510   0000              
511   0000              
512   0000                 IFDEF CLIB_QUICKEXIT_STACK_SIZE
513   0000              
514   0000                    defc __clib_quickexit_stack_size = CLIB_QUICKEXIT_STACK_SIZE
515   0000              
516   0000                 ELSE
517   0000              
518   0000                    IFDEF TAR__clib_quickexit_stack_size
519   0000              
520   0000                       defc __clib_quickexit_stack_size = TAR__clib_quickexit_stack_size
521   0000              
522   0000                    ELSE
523   0000              
524   0000                       defc __clib_quickexit_stack_size = DEF__clib_quickexit_stack_size
525   0000              
526   0000                    ENDIF
527   0000              
528   0000                 ENDIF
529   0000              
530   0000              
531   0000                 IFDEF CLIB_MALLOC_HEAP_SIZE
532   0000              
533   0000                    defc __clib_malloc_heap_size = CLIB_MALLOC_HEAP_SIZE
534   0000              
535   0000                 ELSE
536   0000              
537   0000                    IFDEF TAR__clib_malloc_heap_size
538   0000              
539   0000                       defc __clib_malloc_heap_size = TAR__clib_malloc_heap_size
540   0000              
541   0000                    ELSE
542   0000              
543   0000                       defc __clib_malloc_heap_size = DEF__clib_malloc_heap_size
544   0000              
545   0000                    ENDIF
546   0000              
547   0000                 ENDIF
548   0000              
549   0000              
550   0000                 IFDEF CLIB_STDIO_HEAP_SIZE
551   0000              
552   0000                    defc __clib_stdio_heap_size = CLIB_STDIO_HEAP_SIZE
553   0000              
554   0000                 ELSE
555   0000              
556   0000                    IFDEF TAR__clib_stdio_heap_size
557   0000              
558   0000                       defc __clib_stdio_heap_size = TAR__clib_stdio_heap_size
559   0000              
560   0000                    ELSE
561   0000              
562   0000                       defc __clib_stdio_heap_size = DEF__clib_stdio_heap_size
563   0000              
564   0000                    ENDIF
565   0000              
566   0000                 ENDIF
567   0000              
568   0000              
569   0000                 IFDEF CLIB_BALLOC_TABLE_SIZE
570   0000              
571   0000                    defc __clib_balloc_table_size = CLIB_BALLOC_TABLE_SIZE
572   0000              
573   0000                 ELSE
574   0000              
575   0000                    IFDEF TAR__clib_balloc_table_size
576   0000              
577   0000                       defc __clib_balloc_table_size = TAR__clib_balloc_table_size
578   0000              
579   0000                    ELSE
580   0000              
581   0000                       defc __clib_balloc_table_size = DEF__clib_balloc_table_size
582   0000              
583   0000                    ENDIF
584   0000              
585   0000                 ENDIF
586   0000              
587   0000              
588   0000                 IFDEF CLIB_FOPEN_MAX
589   0000              
590   0000                    defc __clib_fopen_max = CLIB_FOPEN_MAX
591   0000              
592   0000                 ELSE
593   0000              
594   0000                    IFDEF TAR__clib_fopen_max
595   0000              
596   0000                       defc __clib_fopen_max = TAR__clib_fopen_max
597   0000              
598   0000                    ELSE
599   0000              
600   0000                       defc __clib_fopen_max = DEF__clib_fopen_max
601   0000              
602   0000                    ENDIF
603   0000              
604   0000                 ENDIF
605   0000              
606   0000              
607   0000                 IFDEF CLIB_OPEN_MAX
608   0000              
609   0000                    defc __clib_open_max = CLIB_OPEN_MAX
610   0000              
611   0000                 ELSE
612   0000              
613   0000                    IFDEF TAR__clib_open_max
614   0000              
615   0000                       defc __clib_open_max = TAR__clib_open_max
616   0000              
617   0000                    ELSE
618   0000              
619   0000                       defc __clib_open_max = DEF__clib_open_max
620   0000              
621   0000                    ENDIF
622   0000              
623   0000                 ENDIF
624   0000              
625   0000              
626   0000                 IFDEF CRT_ENABLE_RST
627   0000              
628   0000                    defc __crt_enable_rst = CRT_ENABLE_RST
629   0000              
630   0000                 ELSE
631   0000              
632   0000                    IFDEF TAR__crt_enable_rst
633   0000              
634   0000                       defc __crt_enable_rst = TAR__crt_enable_rst
635   0000              
636   0000                    ELSE
637   0000              
638   0000                       defc __crt_enable_rst = DEF__crt_enable_rst
639   0000              
640   0000                    ENDIF
641   0000              
642   0000                 ENDIF
643   0000              
644   0000              
645   0000                 IFDEF CRT_ENABLE_NMI
646   0000              
647   0000                    defc __crt_enable_nmi = CRT_ENABLE_NMI
648   0000              
649   0000                 ELSE
650   0000              
651   0000                    IFDEF TAR__crt_enable_nmi
652   0000              
653   0000                       defc __crt_enable_nmi = TAR__crt_enable_nmi
654   0000              
655   0000                    ELSE
656   0000              
657   0000                       defc __crt_enable_nmi = DEF__crt_enable_nmi
658   0000              
659   0000                    ENDIF
660   0000              
661   0000                 ENDIF
662   0000              
663   0000                 IFDEF CRT_ENABLE_TRAP
664   0000              
665   0000                    defc __crt_enable_trap = CRT_ENABLE_TRAP
666   0000              
667   0000                 ELSE
668   0000              
669   0000                    IFDEF TAR__crt_enable_trap
670   0000              
671   0000                       defc __crt_enable_trap = TAR__crt_enable_trap
672   0000              
673   0000                    ELSE
674   0000              
675   0000                       defc __crt_enable_trap = DEF__crt_enable_trap
676   0000              
677   0000                    ENDIF
678   0000              
679   0000                 ENDIF
680   0000              
681   0000                 ;; rules that must be processed by m4
682   0000              
683   0000              
684   0000              
685   0000                 IFNDEF __crt_include_driver_instantiation
686   0000                    defc __crt_include_driver_instantiation = 0
687   0000                 ENDIF
688   0000              
689   0000                 ;; public definitions
690   0000              
691   0000                 PUBLIC __clib_fopen_max
692   0000                 PUBLIC __clib_open_max
693   0000              
694   0000                 PUBLIC __exit_stack_size
695   0000                 PUBLIC __quickexit_stack_size
696   0000              
697   0000                 defc __exit_stack_size = __clib_exit_stack_size
698   0000                 defc __quickexit_stack_size = __clib_quickexit_stack_size
699   0000              
700   0000                 IF __Z180
701   0000              
702   0000                    PUBLIC __IO_VECTOR_BASE
703   0000              
704   0000                    IF __crt_io_vector_base < 0
705   0000              
706   0000                       IF (__crt_org_vector_table < 0)
707   0000              
708   0000                          IF (-__crt_org_vector_table) & 0x1f
709   0000              
710   0000                             "Cannot place __IO_VECTOR_BASE at start of interrupt vector table"
711   0000              
712   0000                          ELSE
713   0000              
714   0000                             defc __IO_VECTOR_BASE = (-__crt_org_vector_table) & 0xe0
715   0000              
716   0000                          ENDIF
717   0000              
718   0000                       ELSE
719   0000              
720   0000                          IF __crt_org_vector_table & 0x1f
721   0000              
722   0000                             "Cannot place __IO_VECTOR_BASE at start of interrupt vector table"
723   0000              
724   0000                          ELSE
725   0000              
726   0000                             defc __IO_VECTOR_BASE = __crt_org_vector_table & 0xe0
727   0000              
728   0000                          ENDIF
729   0000              
730   0000                       ENDIF
731   0000              
732   0000                    ELSE
733   0000              
734   0000                       IF __crt_io_vector_base & 0x1f
735   0000              
736   0000                          "Illegal __IO_VECTOR_BASE"
737   0000              
738   0000                       ELSE
739   0000              
740   0000                          defc __IO_VECTOR_BASE = __crt_io_vector_base & 0xe0
741   0000              
742   0000                       ENDIF
743   0000              
744   0000                    ENDIF
745   0000              
746   0000                 ENDIF
747   0000              
748   0000              ;; end crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
749   0000              
750   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
751   0000              ;; crt rules for rc2014 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
752   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
753   0000              
754   0000                 ; make the default SP location public
755   0000              
756   0000                 PUBLIC __register_sp
757   0000              
758   0000                 ; make the default vector table location public
759   0000              
760   0000                 PUBLIC __crt_org_vector_table
761   0000              
762   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
763   0000                 ; Returning to Basic
764   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
765   0000              
766   0000                 ; if non-zero, address called in basic rom to return value in AB
767   0000              
768   0000                 IFNDEF CRT_ABPASS
769   0000                    defc CRT_ABPASS = 0
770   0000                 ENDIF
771   0000              
772   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
773   0000                 ; Input Terminal Settings
774   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
775   0000              
776   0000                 IFNDEF CRT_ITERM_TERMINAL_FLAGS
777   0000                    defc CRT_ITERM_TERMINAL_FLAGS = 0x01b0
778   0000                 ENDIF
779   0000              
780   0000                 IFNDEF TTY_ITERM_TERMINAL_FLAGS
781   0000                    defc TTY_ITERM_TERMINAL_FLAGS = 0x01b0
782   0000                 ENDIF
783   0000              
784   0000                 ; buffer size must be available to m4 (requires special case in zcc)
785   0000              
786   0000              
787   0000              
788   0000                 IFNDEF CRT_ITERM_EDIT_BUFFER_SIZE
789   0000                    defc CRT_ITERM_EDIT_BUFFER_SIZE = 64
790   0000                 ENDIF
791   0000              
792   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
793   0000                 ; Output Terminal Settings
794   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
795   0000              
796   0000                 IFNDEF CRT_OTERM_TERMINAL_FLAGS
797   0000                    defc CRT_OTERM_TERMINAL_FLAGS = 0x2370
798   0000                 ENDIF
799   0000              
800   0000                 IFNDEF TTY_OTERM_TERMINAL_FLAGS
801   0000                    defc TTY_OTERM_TERMINAL_FLAGS = 0x2370
802   0000                 ENDIF
803   0000              
804   0000              ;; end crt rules ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
805   0000              
806   0000              
807   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
808   0000              ;; SET UP MEMORY MAP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
809   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
810   0000              
811   0000              
812   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
813   0000              ;; memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
814   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
815   0000              
816   0000              IF __MMAP = -1
817   0000              
818   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
819   0000                 ;; user supplied memory map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
820   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
821   0000              
822   0000              
823   0000              
824   0000                 SECTION UNASSIGNED
825   0000                 org 0
826   0000              
827   0000              ENDIF
828   0000              
829   0000              IF __MMAP = 0
830   0000              
831   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
832   0000                 ;; standard CODE/DATA/BSS memory map ;;;;;;;;;;;;;;;;;;;;;;;
833   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
834   0000              
835   0000                 INCLUDE "../crt_memory_model_z80.inc"
1     0000              
2     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0000              ;; memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0000              
6     0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
7     0000              
8     0000              SECTION CODE
9     0000              
10    0000              org __crt_org_code
11    0000              
12    0000              IF (__crt_org_vector_table = -0x80) || (__crt_org_vector_table = -0x100)
13    0000              
14    0000              section code_crt_interrupt_vector_table
15    0000              section code_crt_start
16    0000              
17    0000              ENDIF
18    0000              
19    0000              section code_crt_init
20    0000              section code_crt_main
21    0000              section code_crt_exit
22    0000              section code_crt_return
23    0000              section code_crt_common
24    0000              
25    0000              IF (__crt_org_vector_table) && (__crt_org_vector_table != -0x80) && (__crt_org_vector_table != -0x100)
26    0000              
27    0000              section code_crt_interrupt_vector_table
28    0000              
29    0000              ENDIF
30    0000              
31    0000              section code_driver
32    0000              section code_font
33    0000              section code_clib
34    0000                include "../../clib_code.inc"
1     0000              
2     0000              ;; clib code segments ;;;;;;;;;
3     0000              
4     0000              section code_adt_b_array
5     0000              section code_adt_b_vector
6     0000              section code_adt_ba_priority_queue
7     0000              section code_adt_ba_stack
8     0000              section code_adt_bv_priority_queue
9     0000              section code_adt_bv_stack
10    0000              section code_adt_p_forward_list
11    0000              section code_adt_p_forward_list_alt
12    0000              section code_adt_p_list
13    0000              section code_adt_p_queue
14    0000              section code_adt_p_stack
15    0000              section code_adt_w_array
16    0000              section code_adt_w_vector
17    0000              section code_adt_wa_priority_queue
18    0000              section code_adt_wa_stack
19    0000              section code_adt_wv_priority_queue
20    0000              section code_adt_wv_stack
21    0000              section code_alloc_balloc
22    0000              section code_alloc_malloc
23    0000              section code_alloc_obstack
24    0000              section code_arch
25    0000              section code_bifrost_h
26    0000              section code_bifrost_l
27    0000              section code_bifrost2
28    0000              section code_compress_aplib
29    0000              section code_compress_zx7
30    0000              section code_compress_zx0
31    0000              section code_compress_zx1
32    0000              section code_compress_zx2
33    0000              section code_ctype
34    0000              section code_driver_general
35    0000              section code_driver_character_input
36    0000              section code_driver_character_output
37    0000              section code_driver_memstream
38    0000              section code_driver_terminal_input
39    0000              section code_driver_terminal_output
40    0000              section code_driver_tty
41    0000              section code_env
42    0000              section code_error
43    0000              section code_esxdos
44    0000              section code_fcntl
45    0000              section code_font_fzx
46    0000              section code_fp_am9511
47    0000              section code_fp_genmath
48    0000              section code_fp_math48
49    0000              section code_fp_math32
50    0000              section code_fp_math16
51    0000              section code_im2
52    0000              section code_input
53    0000              section code_inttypes
54    0000              section code_l
55    0000              section code_l_sccz80
56    0000              section code_l_sdcc
57    0000              section code_locale
58    0000              section code_math
59    0000              section code_network
60    0000              section code_nirvanam
61    0000              section code_nirvanap
62    0000              section code_PSGlib
63    0000              section code_setjmp
64    0000              section code_SMSlib
65    0000              section code_sound_bit
66    0000              section code_sound_ay
67    0000              section code_stdio
68    0000              section code_stdlib
69    0000              section code_string
70    0000              section code_temp_sp1
71    0000              section code_threads
72    0000              section code_threads_mutex
73    0000              section code_time
74    0000              section code_z180
75    0000              section code_z80
76    0000              
77    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
78    0000              
35    0000              section code_lib
36    0000              section code_compiler
37    0000              section code_user
38    0000              
39    0000              section rodata_align_256
40    0000              align 256
41    0000              
42    0000              section rodata_align_128
43    0000              align 128
44    0000              
45    0000              section rodata_align_64
46    0000              align 64
47    0000              
48    0000              section rodata_align_32
49    0000              align 32
50    0000              
51    0000              section rodata_align_16
52    0000              align 16
53    0000              
54    0000              section rodata_align_8
55    0000              align 8
56    0000              
57    0000              section rodata_align_4
58    0000              align 4
59    0000              
60    0000              section rodata_align_2
61    0000              align 2
62    0000              
63    0000              section rodata_driver
64    0000              section rodata_font
65    0000              section rodata_clib
66    0000                include "../../clib_rodata.inc"
1     0000              
2     0000              ;; clib rodata segments ;;;;;;;
3     0000              
4     0000              section rodata_align_256
5     0000              section rodata_align_128
6     0000              section rodata_align_64
7     0000              section rodata_align_32
8     0000              section rodata_align_16
9     0000              section rodata_align_8
10    0000              section rodata_align_4
11    0000              section rodata_align_2
12    0000              section rodata_arch
13    0000              section rodata_env
14    0000              section rodata_error_strings
15    0000              section rodata_error_string_end
16    0000  00          defb 0
17    0001              section rodata_fcntl
18    0000              section rodata_font_4x8
19    0000              section rodata_font_8x8
20    0000              section rodata_font_fzx
21    0000              section rodata_fp_math32
22    0000              section rodata_fp_math16
23    0000              section rodata_input
24    0000              section rodata_SMSlib
25    0000              section rodata_sound_ay
26    0000              section rodata_sound_bit
27    0000              section rodata_stdio
28    0000              section rodata_stdlib
29    0000              
30    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
31    0000              
67    0000                ;;section rodata_error_strings
68    0000                ;;section rodata_error_string_end
69    0000                ;;defb 0
70    0000              section rodata_lib
71    0000              section rodata_compiler
72    0000              section rodata_user
73    0000              
74    0000              SECTION CODE_END
75    0000              
76    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
77    0000              
78    0000              SECTION DATA
79    0000              
80    0000              IF __crt_org_data
81    0000              
82    0000                 org __crt_org_data
83    0000              
84    0000              ELSE
85    0000              
86    0000                 IF __crt_model
87    0000              
88    0000                    "DATA section address must be specified for rom models"
89    0000              
90    0000                 ENDIF
91    0000              
92    0000              ENDIF
93    0000              
94    0000              section data_align_256
95    0000              align 256
96    0000              
97    0000              section data_align_128
98    0000              align 128
99    0000              
100   0000              section data_align_64
101   0000              align 64
102   0000              
103   0000              section data_align_32
104   0000              align 32
105   0000              
106   0000              section data_align_16
107   0000              align 16
108   0000              
109   0000              section data_align_8
110   0000              align 8
111   0000              
112   0000              section data_align_4
113   0000              align 4
114   0000              
115   0000              section data_align_2
116   0000              align 2
117   0000              
118   0000              section smc_jump_vectors
119   0000              section smc_driver
120   0000              section smc_font
121   0000              section smc_clib
122   0000                include "../../clib_smc.inc"
1     0000              
2     0000              ;; clib self-modifying code ;;;
3     0000              
4     0000              section smc_fcntl
5     0000              section smc_l
6     0000              section smc_sound_bit
7     0000              section smc_sound_ay
8     0000              section smc_compress
9     0000              
10    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
11    0000              
123   0000              section smc_lib
124   0000              section smc_compiler
125   0000              section smc_user
126   0000              
127   0000              section data_driver
128   0000              section data_font
129   0000              section data_clib
130   0000                include "../../clib_data.inc"
1     0000              
2     0000              ;; clib data segments ;;;;;;;;;
3     0000              
4     0000              section data_alloc_balloc
5     0000              section data_alloc_malloc
6     0000              section data_arch
7     0000              section data_fcntl
8     0000              section data_fcntl_stdio_heap_head
9     0000              section data_fcntl_stdio_heap_body
10    0000              section data_fcntl_stdio_heap_tail
11    0000              section data_fcntl_fdtable_body
12    0000              section data_PSGlib
13    0000              section data_SMSlib
14    0000              section data_sound_bit
15    0000              section data_sound_ay
16    0000              section data_stdio
17    0000              section data_stdlib
18    0000              section data_threads
19    0000              
20    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
21    0000              
131   0000                ;;section data_fcntl_stdio_heap_head
132   0000                ;;section data_fcntl_stdio_heap_body
133   0000                ;;section data_fcntl_stdio_heap_tail
134   0000                ;;section data_fcntl_fdtable_body
135   0000              section data_lib
136   0000              section data_compiler
137   0000              section data_user
138   0000              
139   0000              SECTION DATA_END
140   0000              
141   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
142   0000              
143   0000              SECTION BSS
144   0000              
145   0000              IF __crt_org_bss
146   0000              
147   0000                 org __crt_org_bss
148   0000              
149   0000              ELSE
150   0000              
151   0000                 IF __crt_model
152   0000              
153   0000                    org -1
154   0000              
155   0000                 ENDIF
156   0000              
157   0000              ENDIF
158   0000              
159   0000              section bss_align_256
160   0000              align 256
161   0000              
162   0000              section bss_align_128
163   0000              align 128
164   0000              
165   0000              section bss_align_64
166   0000              align 64
167   0000              
168   0000              section bss_align_32
169   0000              align 32
170   0000              
171   0000              section bss_align_16
172   0000              align 16
173   0000              
174   0000              section bss_align_8
175   0000              align 8
176   0000              
177   0000              section bss_align_4
178   0000              align 4
179   0000              
180   0000              section bss_align_2
181   0000              align 2
182   0000              
183   0000              section bss_driver
184   0000              section bss_font
185   0000              section bss_clib
186   0000                include "../../clib_bss.inc"
1     0000              
2     0000              ;; clib bss segments ;;;;;;;;;;
3     0000              
4     0000              section bss_arch
5     0000              section bss_alloc_balloc
6     0000              section bss_alloc_malloc
7     0000              section bss_compress_aplib
8     0000              section bss_error
9     0000              section bss_env
10    0000              section bss_esxdos
11    0000              section bss_fcntl
12    0000              section bss_input
13    0000              section bss_PSGlib
14    0000              section bss_SMSlib
15    0000              section bss_sound_bit
16    0000              section bss_sound_ay
17    0000              section bss_stdio
18    0000              section bss_stdlib
19    0000              section bss_string
20    0000              
21    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
22    0000              
187   0000              section bss_lib
188   0000              section bss_compiler
189   0000              section bss_user
190   0000              
191   0000              section BSS_UNINITIALIZED
192   0000              SECTION BSS_END
193   0000              
194   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
195   0000              
196   0000              IF (__crt_org_vector_table = 0)
197   0000              
198   0000              section code_crt_interrupt_vector_table
199   0000              org 0
200   0000              
201   0000              ENDIF
202   0000              
203   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
204   0000              
836   0000              
837   0000              
838   0000              
839   0000                 SECTION UNASSIGNED
840   0000                 org 0
841   0000              
842   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
843   0000              
844   0000              ENDIF
845   0000              
846   0000              ;; end memory model ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
847   0000              
848   0000              
849   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
850   0000              ;; INSTANTIATE DRIVERS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
851   0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
852   0000              
853   0000              
854   0000              ; When FILEs and FDSTRUCTs are instantiated labels are assigned
855   0000              ; to point at created structures.
856   0000              ;
857   0000              ; The label formats are:
858   0000              ;
859   0000              ; __i_stdio_file_n     = address of static FILE structure #n (0..__I_STDIO_NUM_FILE-1)
860   0000              ; __i_fcntl_fdstruct_n = address of static FDSTRUCT #n (0..__I_FCNTL_NUM_FD-1)
861   0000              ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
862   0000              
863   0000              
864   0000              
865   0000              
866   0000              
867   0000              
868   0000              
869   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
870   0000                 ; FILE  : _stdin
871   0000                 ;
872   0000                 ; driver: cpm_00_input_cons
873   0000                 ; fd    : 0
874   0000                 ; mode  : read only
875   0000                 ; type  : 001 = input terminal
876   0000                 ;
877   0000                 ; ioctl_flags   : 0x0100
878   0000                 ; buffer size   : 64 + 1 bytes (max 255)
879   0000                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
880   0000              
881   0000              
882   0000                 SECTION data_clib
883   0000                 SECTION data_stdio
884   0000              
885   0000                 ; FILE *
886   0000              
887   0000                 PUBLIC _stdin
888   0000              
889   0000  04 00          _stdin:  defw __i_stdio_file_0 + 2
890   0002              
891   0002                 ; FILE structure
892   0002              
893   0002                 __i_stdio_file_0:
894   0002              
895   0002                    ; open files link
896   0002              
897   0002  00 00             defw 0
898   0004              
899   0004                    ; jump to underlying fd
900   0004              
901   0004  C3                defb 195
902   0005  06 00             defw __i_fcntl_fdstruct_0
903   0007              
904   0007                    ; state_flags_0
905   0007                    ; state_flags_1
906   0007                    ; conversion flags
907   0007                    ; ungetc
908   0007              
909   0007  40                defb 0x40      ; read + stdio manages ungetc + normal file type
910   0008  02                defb 0x02      ; last operation was read
911   0009  00                defb 0
912   000A  00                defb 0
913   000B              
914   000B                    ; mtx_recursive
915   000B              
916   000B  00                defb 0         ; thread owner = none
917   000C  02                defb 0x02      ; mtx_recursive
918   000D  00                defb 0         ; lock count = 0
919   000E  FE                defb 0xfe      ; atomic spinlock
920   000F  00 00             defw 0         ; list of blocked threads
921   0011              
922   0011              
923   0011                 ; fd table entry
924   0011              
925   0011                 SECTION data_fcntl_fdtable_body
926   0000  06 00          defw __i_fcntl_fdstruct_0
927   0002              
928   0002                 ; FDSTRUCT structure
929   0002              
930   0002                 SECTION data_fcntl_stdio_heap_body
931   0000              
932   0000                 EXTERN console_01_input_terminal_fdriver
933   0000                 EXTERN cpm_00_input_cons
934   0000              
935   0000                 __i_fcntl_heap_0:
936   0000              
937   0000                    ; heap header
938   0000              
939   0000  5B 00             defw __i_fcntl_heap_1
940   0002  5D 00             defw 93
941   0004  00 00             defw 0
942   0006              
943   0006                 __i_fcntl_fdstruct_0:
944   0006              
945   0006                    ; FDSTRUCT structure
946   0006              
947   0006                    ; call to first entry to driver
948   0006              
949   0006  CD                defb 205
950   0007  00 00             defw console_01_input_terminal_fdriver
951   0009              
952   0009                    ; jump to driver
953   0009              
954   0009  C3                defb 195
955   000A  00 00             defw cpm_00_input_cons
956   000C              
957   000C                    ; flags
958   000C                    ; reference_count
959   000C                    ; mode_byte
960   000C              
961   000C  01                defb 0x01      ; stdio handles ungetc + type = input terminal
962   000D  02                defb 2
963   000E  01                defb 0x01      ; read only
964   000F              
965   000F                    ; ioctl_flags
966   000F              
967   000F  00 01             defw 0x0100
968   0011              
969   0011                    ; mtx_plain
970   0011              
971   0011  00                defb 0         ; thread owner = none
972   0012  01                defb 0x01      ; mtx_plain
973   0013  00                defb 0         ; lock count = 0
974   0014  FE                defb 0xfe      ; atomic spinlock
975   0015  00 00             defw 0         ; list of blocked threads
976   0017              
977   0017                    ; index
978   0017                    ; max_size
979   0017                    ; len
980   0017              
981   0017  FF                defb 255
982   0018  40                defb 64
983   0019  00                defb 0
984   001A              
985   001A                    ; buffer
986   001A              
987   001A  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      003A  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      005A  00 
                              defs 65
988   005B              
989   005B              
990   005B                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
991   005B              
992   005B              
993   005B              
994   005B              
995   005B              
996   005B                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
997   005B                 ; FILE  : _stdout
998   005B                 ;
999   005B                 ; driver: cpm_00_output_cons
1000  005B                 ; fd    : 1
1001  005B                 ; mode  : write only
1002  005B                 ; type  : 002 = output terminal
1003  005B                 ;
1004  005B                 ; ioctl_flags   : 0x0010
1005  005B                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1006  005B              
1007  005B              
1008  005B                 SECTION data_clib
1009  0000                 SECTION data_stdio
1010  0011              
1011  0011                 ; FILE *
1012  0011              
1013  0011                 PUBLIC _stdout
1014  0011              
1015  0011  15 00          _stdout:  defw __i_stdio_file_1 + 2
1016  0013              
1017  0013                 ; FILE structure
1018  0013              
1019  0013                 __i_stdio_file_1:
1020  0013              
1021  0013                    ; open files link
1022  0013              
1023  0013  02 00             defw __i_stdio_file_0
1024  0015              
1025  0015                    ; jump to underlying fd
1026  0015              
1027  0015  C3                defb 195
1028  0016  61 00             defw __i_fcntl_fdstruct_1
1029  0018              
1030  0018                    ; state_flags_0
1031  0018                    ; state_flags_1
1032  0018                    ; conversion flags
1033  0018                    ; ungetc
1034  0018              
1035  0018  80                defb 0x80         ; write + normal file type
1036  0019  00                defb 0            ; last operation was write
1037  001A  00                defb 0
1038  001B  00                defb 0
1039  001C              
1040  001C                    ; mtx_recursive
1041  001C              
1042  001C  00                defb 0         ; thread owner = none
1043  001D  02                defb 0x02      ; mtx_recursive
1044  001E  00                defb 0         ; lock count = 0
1045  001F  FE                defb 0xfe      ; atomic spinlock
1046  0020  00 00             defw 0         ; list of blocked threads
1047  0022              
1048  0022              
1049  0022                 ; fd table entry
1050  0022              
1051  0022                 SECTION data_fcntl_fdtable_body
1052  0002  61 00          defw __i_fcntl_fdstruct_1
1053  0004              
1054  0004                 ; FDSTRUCT structure
1055  0004              
1056  0004                 SECTION data_fcntl_stdio_heap_body
1057  005B              
1058  005B                 EXTERN console_01_output_terminal_fdriver
1059  005B                 EXTERN cpm_00_output_cons
1060  005B              
1061  005B                 __i_fcntl_heap_1:
1062  005B              
1063  005B                    ; heap header
1064  005B              
1065  005B  72 00             defw __i_fcntl_heap_2
1066  005D  17 00             defw 23
1067  005F  00 00             defw __i_fcntl_heap_0
1068  0061              
1069  0061                 __i_fcntl_fdstruct_1:
1070  0061              
1071  0061                    ; FDSTRUCT structure
1072  0061              
1073  0061                    ; call to first entry to driver
1074  0061              
1075  0061  CD                defb 205
1076  0062  00 00             defw console_01_output_terminal_fdriver
1077  0064              
1078  0064                    ; jump to driver
1079  0064              
1080  0064  C3                defb 195
1081  0065  00 00             defw cpm_00_output_cons
1082  0067              
1083  0067                    ; flags
1084  0067                    ; reference_count
1085  0067                    ; mode_byte
1086  0067              
1087  0067  02                defb 0x02      ; type = output terminal
1088  0068  02                defb 2
1089  0069  02                defb 0x02      ; write only
1090  006A              
1091  006A                    ; ioctl_flags
1092  006A              
1093  006A  10 00             defw 0x0010
1094  006C              
1095  006C                    ; mtx_plain
1096  006C              
1097  006C  00                defb 0         ; thread owner = none
1098  006D  01                defb 0x01      ; mtx_plain
1099  006E  00                defb 0         ; lock count = 0
1100  006F  FE                defb 0xfe      ; atomic spinlock
1101  0070  00 00             defw 0         ; list of blocked threads
1102  0072              
1103  0072              
1104  0072                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1105  0072              
1106  0072              
1107  0072              
1108  0072              
1109  0072                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1110  0072                 ; DUPED FILE DESCRIPTOR
1111  0072                 ;
1112  0072                 ; FILE  : _stderr
1113  0072                 ; flags : 0x80
1114  0072                 ;
1115  0072                 ; fd    : 2
1116  0072                 ; dup fd: __i_fcntl_fdstruct_1
1117  0072                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1118  0072              
1119  0072              
1120  0072                 SECTION data_clib
1121  0000                 SECTION data_stdio
1122  0022              
1123  0022                 ; FILE *
1124  0022              
1125  0022                 PUBLIC _stderr
1126  0022              
1127  0022  26 00          _stderr:  defw __i_stdio_file_2 + 2
1128  0024              
1129  0024                 ; FILE structure
1130  0024              
1131  0024                 __i_stdio_file_2:
1132  0024              
1133  0024                    ; open files link
1134  0024              
1135  0024  13 00             defw __i_stdio_file_1
1136  0026              
1137  0026                    ; jump to duped fd
1138  0026              
1139  0026  C3                defb 195
1140  0027  61 00             defw __i_fcntl_fdstruct_1
1141  0029              
1142  0029                    ; state_flags_0
1143  0029                    ; state_flags_1
1144  0029                    ; conversion flags
1145  0029                    ; ungetc
1146  0029              
1147  0029  80                defb 0x80
1148  002A  00                defb 0
1149  002B  00                defb 0
1150  002C  00                defb 0
1151  002D              
1152  002D                    ; mtx_recursive
1153  002D              
1154  002D  00                defb 0         ; thread owner = none
1155  002E  02                defb 0x02      ; mtx_recursive
1156  002F  00                defb 0         ; lock count = 0
1157  0030  FE                defb 0xfe      ; atomic spinlock
1158  0031  00 00             defw 0         ; list of blocked threads
1159  0033              
1160  0033              
1161  0033                 ; fd table entry
1162  0033              
1163  0033                 SECTION data_fcntl_fdtable_body
1164  0004  61 00          defw __i_fcntl_fdstruct_1
1165  0006              
1166  0006                 ; FDSTRUCT structure
1167  0006              
1168  0006                 defc __i_fcntl_fdstruct_2 = __i_fcntl_fdstruct_1
1169  0006              
1170  0006                 ; adjust reference count on duped FDSTRUCT
1171  0006              
1172  0006                 SECTION code_crt_init
1173  0000              
1174  0000  21 68 00       ld hl,__i_fcntl_fdstruct_1 + 7     ; & FDSTRUCT.ref_count
1175  0003  34             inc (hl)
1176  0004  34             inc (hl)
1177  0005              
1178  0005              
1179  0005                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1180  0005              
1181  0005              
1182  0005              
1183  0005              
1184  0005              
1185  0005                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1186  0005                 ; FILE  : _stdrdr
1187  0005                 ;
1188  0005                 ; driver: cpm_00_input_reader
1189  0005                 ; fd    : 3
1190  0005                 ; mode  : read only
1191  0005                 ; type  : 003 = character input
1192  0005                 ;
1193  0005                 ; ioctl_flags   : 0x0100
1194  0005                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1195  0005              
1196  0005              
1197  0005                 SECTION data_clib
1198  0000                 SECTION data_stdio
1199  0033              
1200  0033                 ; FILE *
1201  0033              
1202  0033                 PUBLIC _stdrdr
1203  0033              
1204  0033  37 00          _stdrdr:  defw __i_stdio_file_3 + 2
1205  0035              
1206  0035                 ; FILE structure
1207  0035              
1208  0035                 __i_stdio_file_3:
1209  0035              
1210  0035                    ; open files link
1211  0035              
1212  0035  24 00             defw __i_stdio_file_2
1213  0037              
1214  0037                    ; jump to underlying fd
1215  0037              
1216  0037  C3                defb 195
1217  0038  78 00             defw __i_fcntl_fdstruct_3
1218  003A              
1219  003A                    ; state_flags_0
1220  003A                    ; state_flags_1
1221  003A                    ; conversion flags
1222  003A                    ; ungetc
1223  003A              
1224  003A  40                defb 0x40      ; read + stdio manages ungetc + normal file type
1225  003B  02                defb 0x02      ; last operation was read
1226  003C  00                defb 0
1227  003D  00                defb 0
1228  003E              
1229  003E                    ; mtx_recursive
1230  003E              
1231  003E  00                defb 0         ; thread owner = none
1232  003F  02                defb 0x02      ; mtx_recursive
1233  0040  00                defb 0         ; lock count = 0
1234  0041  FE                defb 0xfe      ; atomic spinlock
1235  0042  00 00             defw 0         ; list of blocked threads
1236  0044              
1237  0044              
1238  0044                 ; fd table entry
1239  0044              
1240  0044                 SECTION data_fcntl_fdtable_body
1241  0006  78 00          defw __i_fcntl_fdstruct_3
1242  0008              
1243  0008                 ; FDSTRUCT structure
1244  0008              
1245  0008                 SECTION data_fcntl_stdio_heap_body
1246  0072              
1247  0072                 EXTERN console_01_input_terminal_fdriver
1248  0072                 EXTERN cpm_00_input_reader
1249  0072              
1250  0072                 __i_fcntl_heap_2:
1251  0072              
1252  0072                    ; heap header
1253  0072              
1254  0072  89 00             defw __i_fcntl_heap_3
1255  0074  17 00             defw 23
1256  0076  5B 00             defw __i_fcntl_heap_1
1257  0078              
1258  0078                 __i_fcntl_fdstruct_3:
1259  0078              
1260  0078                    ; FDSTRUCT structure
1261  0078              
1262  0078                    ; call to first entry to driver
1263  0078              
1264  0078  CD                defb 205
1265  0079  00 00             defw console_01_input_terminal_fdriver
1266  007B              
1267  007B                    ; jump to driver
1268  007B              
1269  007B  C3                defb 195
1270  007C  00 00             defw cpm_00_input_reader
1271  007E              
1272  007E                    ; flags
1273  007E                    ; reference_count
1274  007E                    ; mode_byte
1275  007E              
1276  007E  03                defb 0x03      ; stdio handles ungetc + type = character input
1277  007F  02                defb 2
1278  0080  01                defb 0x01      ; read only
1279  0081              
1280  0081                    ; ioctl_flags
1281  0081              
1282  0081  00 01             defw 0x0100
1283  0083              
1284  0083                    ; mtx_plain
1285  0083              
1286  0083  00                defb 0         ; thread owner = none
1287  0084  01                defb 0x01      ; mtx_plain
1288  0085  00                defb 0         ; lock count = 0
1289  0086  FE                defb 0xfe      ; atomic spinlock
1290  0087  00 00             defw 0         ; list of blocked threads
1291  0089              
1292  0089              
1293  0089                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1294  0089              
1295  0089              
1296  0089              
1297  0089              
1298  0089              
1299  0089                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1300  0089                 ; FILE  : _stdpun
1301  0089                 ;
1302  0089                 ; driver: cpm_00_output_punch
1303  0089                 ; fd    : 4
1304  0089                 ; mode  : write only
1305  0089                 ; type  : 004 = character output
1306  0089                 ;
1307  0089                 ; ioctl_flags   : 0x0010
1308  0089                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1309  0089              
1310  0089              
1311  0089                 SECTION data_clib
1312  0000                 SECTION data_stdio
1313  0044              
1314  0044                 ; FILE *
1315  0044              
1316  0044                 PUBLIC _stdpun
1317  0044              
1318  0044  48 00          _stdpun:  defw __i_stdio_file_4 + 2
1319  0046              
1320  0046                 ; FILE structure
1321  0046              
1322  0046                 __i_stdio_file_4:
1323  0046              
1324  0046                    ; open files link
1325  0046              
1326  0046  35 00             defw __i_stdio_file_3
1327  0048              
1328  0048                    ; jump to underlying fd
1329  0048              
1330  0048  C3                defb 195
1331  0049  8F 00             defw __i_fcntl_fdstruct_4
1332  004B              
1333  004B                    ; state_flags_0
1334  004B                    ; state_flags_1
1335  004B                    ; conversion flags
1336  004B                    ; ungetc
1337  004B              
1338  004B  80                defb 0x80         ; write + normal file type
1339  004C  00                defb 0            ; last operation was write
1340  004D  00                defb 0
1341  004E  00                defb 0
1342  004F              
1343  004F                    ; mtx_recursive
1344  004F              
1345  004F  00                defb 0         ; thread owner = none
1346  0050  02                defb 0x02      ; mtx_recursive
1347  0051  00                defb 0         ; lock count = 0
1348  0052  FE                defb 0xfe      ; atomic spinlock
1349  0053  00 00             defw 0         ; list of blocked threads
1350  0055              
1351  0055              
1352  0055                 ; fd table entry
1353  0055              
1354  0055                 SECTION data_fcntl_fdtable_body
1355  0008  8F 00          defw __i_fcntl_fdstruct_4
1356  000A              
1357  000A                 ; FDSTRUCT structure
1358  000A              
1359  000A                 SECTION data_fcntl_stdio_heap_body
1360  0089              
1361  0089                 EXTERN console_01_output_terminal_fdriver
1362  0089                 EXTERN cpm_00_output_punch
1363  0089              
1364  0089                 __i_fcntl_heap_3:
1365  0089              
1366  0089                    ; heap header
1367  0089              
1368  0089  A0 00             defw __i_fcntl_heap_4
1369  008B  17 00             defw 23
1370  008D  72 00             defw __i_fcntl_heap_2
1371  008F              
1372  008F                 __i_fcntl_fdstruct_4:
1373  008F              
1374  008F                    ; FDSTRUCT structure
1375  008F              
1376  008F                    ; call to first entry to driver
1377  008F              
1378  008F  CD                defb 205
1379  0090  00 00             defw console_01_output_terminal_fdriver
1380  0092              
1381  0092                    ; jump to driver
1382  0092              
1383  0092  C3                defb 195
1384  0093  00 00             defw cpm_00_output_punch
1385  0095              
1386  0095                    ; flags
1387  0095                    ; reference_count
1388  0095                    ; mode_byte
1389  0095              
1390  0095  04                defb 0x04      ; type = character output
1391  0096  02                defb 2
1392  0097  02                defb 0x02      ; write only
1393  0098              
1394  0098                    ; ioctl_flags
1395  0098              
1396  0098  10 00             defw 0x0010
1397  009A              
1398  009A                    ; mtx_plain
1399  009A              
1400  009A  00                defb 0         ; thread owner = none
1401  009B  01                defb 0x01      ; mtx_plain
1402  009C  00                defb 0         ; lock count = 0
1403  009D  FE                defb 0xfe      ; atomic spinlock
1404  009E  00 00             defw 0         ; list of blocked threads
1405  00A0              
1406  00A0              
1407  00A0                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1408  00A0              
1409  00A0              
1410  00A0              
1411  00A0              
1412  00A0              
1413  00A0                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1414  00A0                 ; FILE  : _stdlst
1415  00A0                 ;
1416  00A0                 ; driver: cpm_00_output_list
1417  00A0                 ; fd    : 5
1418  00A0                 ; mode  : write only
1419  00A0                 ; type  : 004 = character output
1420  00A0                 ;
1421  00A0                 ; ioctl_flags   : 0x0010
1422  00A0                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1423  00A0              
1424  00A0              
1425  00A0                 SECTION data_clib
1426  0000                 SECTION data_stdio
1427  0055              
1428  0055                 ; FILE *
1429  0055              
1430  0055                 PUBLIC _stdlst
1431  0055              
1432  0055  59 00          _stdlst:  defw __i_stdio_file_5 + 2
1433  0057              
1434  0057                 ; FILE structure
1435  0057              
1436  0057                 __i_stdio_file_5:
1437  0057              
1438  0057                    ; open files link
1439  0057              
1440  0057  46 00             defw __i_stdio_file_4
1441  0059              
1442  0059                    ; jump to underlying fd
1443  0059              
1444  0059  C3                defb 195
1445  005A  A6 00             defw __i_fcntl_fdstruct_5
1446  005C              
1447  005C                    ; state_flags_0
1448  005C                    ; state_flags_1
1449  005C                    ; conversion flags
1450  005C                    ; ungetc
1451  005C              
1452  005C  80                defb 0x80         ; write + normal file type
1453  005D  00                defb 0            ; last operation was write
1454  005E  00                defb 0
1455  005F  00                defb 0
1456  0060              
1457  0060                    ; mtx_recursive
1458  0060              
1459  0060  00                defb 0         ; thread owner = none
1460  0061  02                defb 0x02      ; mtx_recursive
1461  0062  00                defb 0         ; lock count = 0
1462  0063  FE                defb 0xfe      ; atomic spinlock
1463  0064  00 00             defw 0         ; list of blocked threads
1464  0066              
1465  0066              
1466  0066                 ; fd table entry
1467  0066              
1468  0066                 SECTION data_fcntl_fdtable_body
1469  000A  A6 00          defw __i_fcntl_fdstruct_5
1470  000C              
1471  000C                 ; FDSTRUCT structure
1472  000C              
1473  000C                 SECTION data_fcntl_stdio_heap_body
1474  00A0              
1475  00A0                 EXTERN console_01_output_terminal_fdriver
1476  00A0                 EXTERN cpm_00_output_list
1477  00A0              
1478  00A0                 __i_fcntl_heap_4:
1479  00A0              
1480  00A0                    ; heap header
1481  00A0              
1482  00A0  B7 00             defw __i_fcntl_heap_5
1483  00A2  17 00             defw 23
1484  00A4  89 00             defw __i_fcntl_heap_3
1485  00A6              
1486  00A6                 __i_fcntl_fdstruct_5:
1487  00A6              
1488  00A6                    ; FDSTRUCT structure
1489  00A6              
1490  00A6                    ; call to first entry to driver
1491  00A6              
1492  00A6  CD                defb 205
1493  00A7  00 00             defw console_01_output_terminal_fdriver
1494  00A9              
1495  00A9                    ; jump to driver
1496  00A9              
1497  00A9  C3                defb 195
1498  00AA  00 00             defw cpm_00_output_list
1499  00AC              
1500  00AC                    ; flags
1501  00AC                    ; reference_count
1502  00AC                    ; mode_byte
1503  00AC              
1504  00AC  04                defb 0x04      ; type = character output
1505  00AD  02                defb 2
1506  00AE  02                defb 0x02      ; write only
1507  00AF              
1508  00AF                    ; ioctl_flags
1509  00AF              
1510  00AF  10 00             defw 0x0010
1511  00B1              
1512  00B1                    ; mtx_plain
1513  00B1              
1514  00B1  00                defb 0         ; thread owner = none
1515  00B2  01                defb 0x01      ; mtx_plain
1516  00B3  00                defb 0         ; lock count = 0
1517  00B4  FE                defb 0xfe      ; atomic spinlock
1518  00B5  00 00             defw 0         ; list of blocked threads
1519  00B7              
1520  00B7              
1521  00B7                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1522  00B7              
1523  00B7              
1524  00B7              
1525  00B7              
1526  00B7                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1527  00B7                 ;; create open and closed FILE lists
1528  00B7                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1529  00B7              
1530  00B7                 ; __clib_fopen_max   = max number of open FILEs specified by user
1531  00B7                 ; 6 = number of static FILEs instantiated in crt
1532  00B7                 ; __i_stdio_file_n   = address of static FILE structure #n (0..I_STDIO_FILE_NUM-1)
1533  00B7              
1534  00B7              	PUBLIC __MAX_FOPEN
1535  00B7              
1536  00B7                 SECTION data_clib
1537  0000                 SECTION data_stdio
1538  0066              
1539  0066                 IF (__clib_fopen_max > 0) || (6 > 0)
1540  0066              
1541  0066                    ; number of FILEs > 0
1542  0066              
1543  0066                    ; construct list of open files
1544  0066              
1545  0066                    IF 6 > 0
1546  0066              
1547  0066                       ; number of FILEs statically generated > 0
1548  0066              
1549  0066                       SECTION data_clib
1550  0000                       SECTION data_stdio
1551  0066              
1552  0066                       PUBLIC __stdio_open_file_list
1553  0066              
1554  0066  57 00                __stdio_open_file_list:  defw __i_stdio_file_5
1555  0068              
1556  0068                    ELSE
1557  0068              
1558  0068                       ; number of FILEs statically generated = 0
1559  0068              
1560  0068                       SECTION bss_clib
1561  0068                       SECTION bss_stdio
1562  0068              
1563  0068                       PUBLIC __stdio_open_file_list
1564  0068              
1565  0068                       __stdio_open_file_list:  defw 0
1566  0068              
1567  0068                    ENDIF
1568  0068              
1569  0068                    ; construct list of closed / available FILEs
1570  0068              
1571  0068                    SECTION data_clib
1572  0000                    SECTION data_stdio
1573  0068              
1574  0068                    PUBLIC __stdio_closed_file_list
1575  0068              
1576  0068  00 00 68 00       __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
1577  006C              
1578  006C                    IF __clib_fopen_max > 6
1579  006C              
1580  006C              		   defc __MAX_FOPEN = __clib_fopen_max
1581  006C              
1582  006C                       ; create extra FILE structures
1583  006C              
1584  006C                       SECTION bss_clib
1585  006C                       SECTION bss_stdio
1586  006C              
1587  006C                       __stdio_file_extra:      defs (__clib_fopen_max - 6) * 15
1588  006C              
1589  006C                       SECTION code_crt_init
1590  006C              
1591  006C                          ld bc,__stdio_closed_file_list
1592  006C                          ld de,__stdio_file_extra
1593  006C                          ld l,__clib_fopen_max - 6
1594  006C              
1595  006C                       loop:
1596  006C              
1597  006C                          push hl
1598  006C              
1599  006C                          EXTERN asm_p_forward_list_alt_push_front
1600  006C                          call asm_p_forward_list_alt_push_front
1601  006C              
1602  006C                          ld de,15
1603  006C                          add hl,de
1604  006C                          ex de,hl
1605  006C              
1606  006C                          pop hl
1607  006C              
1608  006C                          dec l
1609  006C                          jr nz, loop
1610  006C              
1611  006C                    ELSE
1612  006C              
1613  006C                       defc __MAX_FOPEN = 6
1614  006C              
1615  006C                    ENDIF
1616  006C              
1617  006C                 ENDIF
1618  006C              
1619  006C                 IF (__clib_fopen_max = 0) && (6 = 0)
1620  006C              
1621  006C                    defc __MAX_FOPEN = 0
1622  006C              
1623  006C                    ; create empty file lists
1624  006C              
1625  006C                    SECTION bss_clib
1626  006C                    SECTION bss_stdio
1627  006C              
1628  006C                    PUBLIC __stdio_open_file_list
1629  006C                    __stdio_open_file_list:  defw 0
1630  006C              
1631  006C                    SECTION data_clib
1632  006C                    SECTION data_stdio
1633  006C              
1634  006C                    PUBLIC __stdio_closed_file_list
1635  006C                    __stdio_closed_file_list:   defw 0, __stdio_closed_file_list
1636  006C              
1637  006C                 ENDIF
1638  006C              
1639  006C                 IF (__clib_fopen_max < 0) && (6 = 0)
1640  006C              
1641  006C                    defc __MAX_FOPEN = 0
1642  006C              
1643  006C                 ENDIF
1644  006C              
1645  006C                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1646  006C                 ;; create fd table
1647  006C                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1648  006C              
1649  006C                 ; __clib_open_max  = max number of open fds specified by user
1650  006C                 ; 6 = number of static file descriptors created
1651  006C              
1652  006C                 PUBLIC __fcntl_fdtbl
1653  006C                 PUBLIC __fcntl_fdtbl_size
1654  006C              
1655  006C                 IF 6 > 0
1656  006C              
1657  006C                    ; create rest of fd table in data segment
1658  006C              
1659  006C                    SECTION data_fcntl_fdtable_body
1660  000C              
1661  000C                    EXTERN __data_fcntl_fdtable_body_head
1662  000C              
1663  000C                    defc __fcntl_fdtbl = __data_fcntl_fdtable_body_head
1664  000C              
1665  000C                    IF __clib_open_max > 6
1666  000C              
1667  000C                       SECTION data_fcntl_fdtable_body
1668  000C              
1669  000C                       defs (__clib_open_max - 6) * 2
1670  000C                       defc __fcntl_fdtbl_size = __clib_open_max
1671  000C              
1672  000C                    ELSE
1673  000C              
1674  000C                       defc __fcntl_fdtbl_size = 6
1675  000C              
1676  000C                    ENDIF
1677  000C              
1678  000C                 ELSE
1679  000C              
1680  000C                    IF __clib_open_max > 0
1681  000C              
1682  000C                       ; create fd table in bss segment
1683  000C              
1684  000C                       SECTION bss_clib
1685  000C                       SECTION bss_fcntl
1686  000C              
1687  000C                       __fcntl_fdtbl:        defs __clib_open_max * 2
1688  000C              
1689  000C                    ELSE
1690  000C              
1691  000C                       ; no fd table at all
1692  000C              
1693  000C                       defc __fcntl_fdtbl = 0
1694  000C              
1695  000C                    ENDIF
1696  000C              
1697  000C                    defc __fcntl_fdtbl_size = __clib_open_max
1698  000C              
1699  000C                 ENDIF
1700  000C              
1701  000C              	PUBLIC __MAX_OPEN
1702  000C              	defc   __MAX_OPEN = __fcntl_fdtbl_size
1703  000C              
1704  000C                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1705  000C                 ;; finalize stdio heap
1706  000C                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1707  000C              
1708  000C                 ; __clib_stdio_heap_size  = desired stdio heap size in bytes
1709  000C                 ; 185  = byte size of static FDSTRUCTs
1710  000C                 ; 5   = number of heap allocations
1711  000C                 ; __i_fcntl_heap_n     = address of allocation #n on heap (0..__I_FCNTL_NUM_HEAP-1)
1712  000C              
1713  000C                 IF 185 > 0
1714  000C              
1715  000C                    ; static FDSTRUCTs have been allocated in the heap
1716  000C              
1717  000C                    SECTION data_clib
1718  0000                    SECTION data_fcntl
1719  0000              
1720  0000                    PUBLIC __stdio_heap
1721  0000              
1722  0000  00 00             __stdio_heap:            defw __stdio_block
1723  0002              
1724  0002                    SECTION data_fcntl_stdio_heap_head
1725  0000              
1726  0000                    __stdio_block:
1727  0000              
1728  0000  00                   defb 0                ; no owner
1729  0001  01                   defb 0x01             ; mtx_plain
1730  0002  00                   defb 0                ; number of lock acquisitions
1731  0003  FE                   defb 0xfe             ; spinlock (unlocked)
1732  0004  00 00                defw 0                ; list of threads blocked on mutex
1733  0006              
1734  0006                    IF __clib_stdio_heap_size > (185 + 14)
1735  0006              
1736  0006                       ; expand stdio heap to desired size
1737  0006              
1738  0006                       SECTION data_fcntl_stdio_heap_body
1739  00B7              
1740  00B7                       __i_fcntl_heap_5:
1741  00B7              
1742  00B7  00 00                   defw __i_fcntl_heap_6
1743  00B9  00 00                   defw 0
1744  00BB  A0 00                   defw __i_fcntl_heap_4
1745  00BD  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
      00DD  00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
                                    defs __clib_stdio_heap_size - 185 - 14
1746  00F6              
1747  00F6                       ; terminate stdio heap
1748  00F6              
1749  00F6                       SECTION data_fcntl_stdio_heap_tail
1750  0000              
1751  0000  00 00                __i_fcntl_heap_6:   defw 0
1752  0002              
1753  0002                    ELSE
1754  0002              
1755  0002                       ; terminate stdio heap
1756  0002              
1757  0002                       SECTION data_fcntl_stdio_heap_tail
1758  0002              
1759  0002                       __i_fcntl_heap_5:   defw 0
1760  0002              
1761  0002                    ENDIF
1762  0002              
1763  0002                 ELSE
1764  0002              
1765  0002                    ; no FDSTRUCTs statically created
1766  0002              
1767  0002                    IF __clib_stdio_heap_size > 14
1768  0002              
1769  0002                       SECTION data_clib
1770  0002                       SECTION data_fcntl
1771  0002              
1772  0002                       PUBLIC __stdio_heap
1773  0002              
1774  0002                       __stdio_heap:         defw __stdio_block
1775  0002              
1776  0002                       SECTION bss_clib
1777  0002                       SECTION bss_fcntl
1778  0002              
1779  0002                       PUBLIC __stdio_block
1780  0002              
1781  0002                       __stdio_block:         defs __clib_stdio_heap_size
1782  0002              
1783  0002                       SECTION code_crt_init
1784  0002              
1785  0002                       ld hl,__stdio_block
1786  0002                       ld bc,__clib_stdio_heap_size
1787  0002              
1788  0002                       EXTERN asm_heap_init
1789  0002                       call asm_heap_init
1790  0002              
1791  0002                    ENDIF
1792  0002              
1793  0002                 ENDIF
1794  0002              
1795  0002              
1796  0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1797  0002              ;; STARTUP ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1798  0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1799  0002              
1800  0002              SECTION CODE
1801  0000              
1802  0000              PUBLIC __Start, __Exit
1803  0000              
1804  0000              EXTERN _main, asm_cpm_bdos
1805  0000              
1806  0000              Qualify:
1807  0000              
1808  0000                 ; disqualify 8080
1809  0000              
1810  0000  97             sub a
1811  0001  E2 18 00       jp po, __Continue
1812  0004              
1813  0004  0E 09          ld c,__CPM_PRST
1814  0006  11 0D 00       ld de,disqualify_s
1815  0009              
1816  0009  CD 00 00       call asm_cpm_bdos
1817  000C  C7             rst 0
1818  000D              
1819  000D              disqualify_s:
1820  000D              
1821  000D  7A 38 30 20 6F 6E 6C 79 
                           defm "z80 only"
1822  0015  0D 0A 24       defb 13,10,'$'
1823  0018              
1824  0018              __Continue:
1825  0018              
1826  0018              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1827  0018              ;; USER PREAMBLE ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1828  0018              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1829  0018              
1830  0018              IF __crt_include_preamble
1831  0018              
1832  0018                 include "crt_preamble.asm"
1833  0018                 SECTION CODE
1834  0018              
1835  0018              ENDIF
1836  0018              
1837  0018              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1838  0018              ;; CRT INIT ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1839  0018              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1840  0018              
1841  0018              __Start:
1842  0018              
1843  0018                 include "../crt_start_di.inc"
1     0018                 IF (__crt_enable_eidi & 0x01)
2     0018              
3     0018                    di
4     0018              
5     0018                 ENDIF
6     0018              
1844  0018                 include "../crt_save_sp.inc"
1     0018              
2     0018                 ; do not save sp if
3     0018                 ; * program jumps to address on exit
4     0018                 ; * program halts on exit
5     0018              
6     0018                 IF (__crt_on_exit & 0x10000)
7     0018              
8     0018                    IF (__crt_on_exit & 0x8)
9     0018              
10    0018                       ; program restarts on exit
11    0018              
12    0018                       IF (__register_sp = -1)
13    0018              
14    0018                          ld (__sp_or_ret),sp
15    0018              
16    0018                       ENDIF
17    0018              
18    0018                    ELSE
19    0018              
20    0018                       IF (__crt_on_exit & 0x2)
21    0018              
22    0018                          ; program returns to caller on exit
23    0018              
24    0018                          ld (__sp_or_ret),sp
25    0018              
26    0018                       ELSE
27    0018              
28    0018                          IF (__crt_on_exit & 0x4)
29    0018              
30    0018                             ; program jumps to caller on exit
31    0018              
32    0018                             IF (__crt_enable_commandline != 2)
33    0018              
34    0018                                pop hl
35    0018                                ld (__sp_or_ret),hl
36    0018              
37    0018                             ELSE
38    0018              
39    0018                                pop de
40    0018                                ld (__sp_or_ret),de
41    0018              
42    0018                             ENDIF
43    0018              
44    0018                          ENDIF
45    0018              
46    0018                       ENDIF
47    0018              
48    0018                    ENDIF
49    0018              
50    0018                 ENDIF
51    0018              
1845  0018              
1846  0018              __Restart:
1847  0018              
1848  0018                 include "../crt_init_sp.inc"
1     0018              IF __register_sp < -1
2     0018              
3     0018  ED 7B 06 00    ld sp,(-__register_sp)      ; stack location is stored at memory address
4     001C              
5     001C              ELSE
6     001C              
7     001C                 IF __register_sp != -1
8     001C              
9     001C                    ld sp,__register_sp      ; stack is at fixed address
10    001C              
11    001C                 ENDIF
12    001C              
13    001C              ENDIF
14    001C              
1849  001C              
1850  001C                 ; command line
1851  001C              
1852  001C              IF __crt_enable_commandline = 1
1853  001C              
1854  001C                 include "../crt_cmdline_empty.inc"
1855  001C              
1856  001C              ENDIF
1857  001C              
1858  001C              IF __crt_enable_commandline >= 3
1859  001C              
1860  001C                 ; copy command line words from default dma buffer to stack
1861  001C                 ; must do this as the default dma buffer may be used by the cpm program
1862  001C              
1863  001C                 EXTERN l_command_line_parse
1864  001C              
1865  001C  21 80 00       ld hl,0x0080                ; default dma buffer
1866  001F              
1867  001F  4E             ld c,(hl)
1868  0020  44             ld b,h                      ; bc = length of command line
1869  0021              
1870  0021  2C             inc l
1871  0022  EB             ex de,hl
1872  0023              
1873  0023  CD 00 00       call l_command_line_parse
1874  0026              
1875  0026                 ; cpm does not supply program name in command line
1876  0026                 ; so place empty string in argv[0] instead
1877  0026              
1878  0026                 ; bc = int argc
1879  0026                 ; hl = char *argv[]
1880  0026                 ; de = & empty string
1881  0026                 ; bc'= num chars in redirector
1882  0026                 ; hl'= char *redirector
1883  0026              
1884  0026  D5             push de                     ; empty string added to front of argv[]
1885  0027              
1886  0027  2B             dec hl
1887  0028  2B             dec hl                      ; char *argv[] adjusted to include empty string at index 0
1888  0029              
1889  0029  0C             inc c                       ; argc++
1890  002A              
1891  002A              ENDIF
1892  002A              
1893  002A              __Restart_2:
1894  002A              
1895  002A              IF __crt_enable_commandline >= 1
1896  002A              
1897  002A  E5             push hl                     ; argv
1898  002B  C5             push bc                     ; argc
1899  002C              
1900  002C              ENDIF
1901  002C              
1902  002C                 ; initialize data section
1903  002C              
1904  002C                 include "../clib_init_data.inc"
1     002C              
2     002C                 ; initialize data section
3     002C              
4     002C                 IF (__crt_model = 1)
5     002C              
6     002C                    ; rom model + data section is not compressed
7     002C              
8     002C                    EXTERN __CODE_END_tail
9     002C                    EXTERN __DATA_head, __DATA_END_tail
10    002C              
11    002C                    ld hl,__CODE_END_tail
12    002C                    ld de,__DATA_head
13    002C                    ld bc,__DATA_END_tail - __DATA_head
14    002C              
15    002C                    EXTERN asm_memcpy
16    002C                    call   asm_memcpy
17    002C              
18    002C                 ENDIF
19    002C              
20    002C                 IF (__crt_model >= 2)
21    002C              
22    002C                    ; rom model + data section is compressed
23    002C              
24    002C                    EXTERN __CODE_END_tail
25    002C              		EXTERN __DATA_head, __DATA_END_tail
26    002C              
27    002C                    ld hl,__CODE_END_tail
28    002C                    ld de,__DATA_head
29    002C                    ld bc,__DATA_END_tail - __DATA_head
30    002C              
31    002C                    ld a,b
32    002C                    or c
33    002C              
34    002C                  IF (__crt_model = 2)
35    002C                    EXTERN   asm_dzx7_standard
36    002C                    call nz, asm_dzx7_standard
37    002C                  ELIF (__crt_model = 3)
38    002C                    EXTERN   asm_dzx0_standard
39    002C                    call nz, asm_dzx0_standard
40    002C                  ENDIF
41    002C              
42    002C                 ENDIF
43    002C              
1905  002C              
1906  002C                 ; initialize bss section
1907  002C              
1908  002C                 include "../clib_init_bss.inc"
1     002C              
2     002C                 ; initialize bss section
3     002C              
4     002C                 IF __crt_initialize_bss
5     002C              
6     002C                       EXTERN asm_memset
7     002C                       EXTERN __BSS_head, __BSS_UNINITIALIZED_head
8     002C              
9     002C  21 00 00             ld hl,__BSS_head
10    002F  01 00 00             ld bc,__BSS_UNINITIALIZED_head - __BSS_head
11    0032              
12    0032  1E 00                ld e,0
13    0034  CD 00 00             call asm_memset
14    0037              
15    0037                 ENDIF
16    0037              
1909  0037              
1910  0037                 ; interrupt mode
1911  0037              
1912  0037                 include "../crt_set_interrupt_mode.inc"
1     0037                 IF (__crt_org_vector_table > 0)
2     0037              
3     0037                    ; copy interrupt vector table to final location
4     0037              
5     0037                    EXTERN __code_crt_interrupt_vector_table_head
6     0037                    EXTERN __code_crt_interrupt_vector_table_size
7     0037              
8     0037                    ld hl,__code_crt_interrupt_vector_table_head
9     0037                    ld de,__crt_org_vector_table
10    0037                    ld bc,__code_crt_interrupt_vector_table_size
11    0037              
12    0037                    EXTERN asm_memcpy
13    0037                    call   asm_memcpy
14    0037              
15    0037                 ENDIF
16    0037              
17    0037                 IF (__crt_org_vector_table != 0)
18    0037              
19    0037                    IF (__crt_org_vector_table < 0)
20    0037              
21    0037                       ld a,-__crt_org_vector_table/$100
22    0037              
23    0037                    ELSE
24    0037              
25    0037                       ld a,__crt_org_vector_table/$100
26    0037              
27    0037                    ENDIF
28    0037              
29    0037                    ld i,a
30    0037              
31    0037                    IF (__Z180)
32    0037              
33    0037                      ; Set the z180 internal interrupt vector low byte
34    0037              
35    0037                      IF (__crt_org_vector_table < 0)
36    0037              
37    0037                         ld a,+(-__crt_org_vector_table+__IO_VECTOR_BASE)&$E0
38    0037              
39    0037                      ELSE
40    0037              
41    0037                         ld a,+(__crt_org_vector_table+__IO_VECTOR_BASE)&$E0
42    0037              
43    0037                      ENDIF
44    0037              
45    0037                      out0 (IL),a
46    0037              
47    0037                    ENDIF
48    0037              
49    0037                 ENDIF
50    0037              
51    0037                 IF (__crt_interrupt_mode >= 0) && (__crt_interrupt_mode <= 2)
52    0037              
53    0037                    ; set interrupt mode
54    0037              
55    0037                    im __crt_interrupt_mode
56    0037              
57    0037                 ENDIF
58    0037              
1913  0037              
1914  0037              SECTION code_crt_init          ; user and library initialization
1915  0005              
1916  0005              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1917  0005              ;; MAIN ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1918  0005              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1919  0005              
1920  0005              SECTION code_crt_main
1921  0000              
1922  0000                 include "../crt_start_ei.inc"
1     0000                 IF (__crt_enable_eidi & 0x02)
2     0000              
3     0000                    ei
4     0000              
5     0000                 ENDIF
6     0000              
1923  0000              
1924  0000                 ; call user program
1925  0000              
1926  0000  CD 00 00       call _main                  ; hl = return status
1927  0003              
1928  0003                 ; run exit stack
1929  0003              
1930  0003              IF __clib_exit_stack_size > 0
1931  0003              
1932  0003                 EXTERN asm_exit
1933  0003                 jp asm_exit                 ; exit function jumps to __Exit
1934  0003              
1935  0003              ENDIF
1936  0003              
1937  0003              __Exit:
1938  0003              
1939  0003              IF !((__crt_on_exit & 0x10000) && (__crt_on_exit & 0x8))
1940  0003              
1941  0003                 ; not restarting
1942  0003              
1943  0003  E5             push hl                     ; save return status
1944  0004              
1945  0004              ENDIF
1946  0004              
1947  0004              SECTION code_crt_exit          ; user and library cleanup
1948  0000              SECTION code_crt_return
1949  0000              
1950  0000                 ; close files
1951  0000              
1952  0000                 include "../clib_close.inc"
1     0000                 IF __crt_enable_close
2     0000              
3     0000                    ; TODO
4     0000                    ; close open files
5     0000              
6     0000                 ENDIF
7     0000              
1953  0000              
1954  0000                 ; terminate
1955  0000              
1956  0000                 include "../crt_exit_eidi.inc"
1     0000                 IF (__crt_enable_eidi & 0x10)
2     0000              
3     0000                    di
4     0000              
5     0000                 ENDIF
6     0000              
7     0000                 IF (__crt_interrupt_mode_exit >= 0) && (__crt_interrupt_mode_exit <= 2)
8     0000              
9     0000                       im __crt_interrupt_mode_exit
10    0000              
11    0000                 ENDIF
12    0000              
13    0000                 IF (__crt_enable_eidi & 0x20)
14    0000              
15    0000                    ei
16    0000              
17    0000                 ENDIF
18    0000              
1957  0000                 include "../crt_restore_sp.inc"
1     0000              
2     0000                 IF (__crt_on_exit & 0x10000)
3     0000              
4     0000                    IF (__crt_on_exit & 0x8)
5     0000              
6     0000                       ; program restarts
7     0000              
8     0000                       IF (__crt_enable_commandline < 2)
9     0000              
10    0000                          IF (__register_sp = -1)
11    0000              
12    0000                             ld sp,(__sp_or_ret)
13    0000              
14    0000                          ENDIF
15    0000              
16    0000                       ELSE
17    0000              
18    0000                          IF (__register_sp = -1)
19    0000              
20    0000                             ld sp,(__sp_or_ret)
21    0000              
22    0000                          ENDIF
23    0000              
24    0000                       ENDIF
25    0000              
26    0000                    ELSE
27    0000              
28    0000                       pop hl                ; hl = return status
29    0000              
30    0000                       IF (__crt_on_exit & 0x2)
31    0000              
32    0000                          ; program returns to caller
33    0000              
34    0000                          ld sp,(__sp_or_ret)
35    0000              
36    0000                       ENDIF
37    0000              
38    0000                    ENDIF
39    0000              
40    0000                 ELSE
41    0000              
42    0000                    ; program jumps to absolute address
43    0000              
44    0000  E1                pop hl                   ; hl = return status
45    0001              
46    0001                 ENDIF
47    0001              
1958  0001                 include "../crt_program_exit.inc"
1     0001              
2     0001                 IF (__crt_on_exit & 0x10000)
3     0001              
4     0001                    IF (__crt_on_exit & 0x8)
5     0001              
6     0001                       ; program restarts
7     0001              
8     0001                       IF (__crt_enable_commandline < 2)
9     0001              
10    0001                          jp __Restart
11    0001              
12    0001                       ELSE
13    0001              
14    0001                          IF (__register_sp != -1)
15    0001              
16    0001                             include "../crt_init_sp.inc"
17    0001              
18    0001                          ENDIF
19    0001              
20    0001                          include "../crt_cmdline_empty.inc"
21    0001              
22    0001                          jp __Restart_2
23    0001              
24    0001                       ENDIF
25    0001              
26    0001                    ELSE
27    0001              
28    0001                       IF (__crt_on_exit & 0x2)
29    0001              
30    0001                          ; program returns to caller
31    0001              
32    0001                          ret
33    0001              
34    0001                       ELSE
35    0001              
36    0001                          IF (__crt_on_exit & 0x4)
37    0001              
38    0001                             ; program jumps to caller
39    0001              
40    0001                             ld de,(__sp_or_ret)
41    0001                             push de
42    0001                             ret
43    0001              
44    0001                          ELSE
45    0001              
46    0001                             ; program halts
47    0001              
48    0001                             halt
49    0001                             jr ASMPC
50    0001              
51    0001                          ENDIF
52    0001              
53    0001                       ENDIF
54    0001              
55    0001                    ENDIF
56    0001              
57    0001                 ELSE
58    0001              
59    0001                    ; program jumps to absolute address
60    0001              
61    0001                    IF (__crt_on_exit & 0xffff)
62    0001              
63    0001                       jp __crt_on_exit & 0xffff
64    0001              
65    0001                    ELSE
66    0001              
67    0001  C7                   rst 0
68    0002              
69    0002                    ENDIF
70    0002              
71    0002                 ENDIF
72    0002              
1959  0002              
1960  0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1961  0002              ;; RUNTIME VARS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1962  0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1963  0002              
1964  0002              include "../crt_jump_vectors_z80.inc"
1     0002              IF __page_zero_present
2     0002              
3     0002              SECTION smc_jump_vectors
4     0002              
5     0002              IF ((__crt_enable_rst & 0x0202) = 0x0202)
6     0002              
7     0002                 PUBLIC _z80_rst_08h_vector
8     0002              
9     0002                 defc _z80_rst_08h_vector = __z80_rst_08h + 1
10    0002              
11    0002                 EXTERN _z80_rst_08h
12    0002              
13    0002                 __z80_rst_08h:
14    0002              
15    0002                    jp _z80_rst_08h
16    0002              
17    0002              ENDIF
18    0002              
19    0002              IF ((__crt_enable_rst & 0x0404) = 0x0404)
20    0002              
21    0002                 PUBLIC _z80_rst_10h_vector
22    0002              
23    0002                 defc _z80_rst_10h_vector = __z80_rst_10h + 1
24    0002              
25    0002                 EXTERN _z80_rst_10h
26    0002              
27    0002                 __z80_rst_10h:
28    0002              
29    0002                    jp _z80_rst_10h
30    0002              
31    0002              ENDIF
32    0002              
33    0002              IF ((__crt_enable_rst & 0x0808) = 0x0808)
34    0002              
35    0002                 PUBLIC _z80_rst_18h_vector
36    0002              
37    0002                 defc _z80_rst_18h_vector = __z80_rst_18h + 1
38    0002              
39    0002                 EXTERN _z80_rst_18h
40    0002              
41    0002                 __z80_rst_18h:
42    0002              
43    0002                    jp _z80_rst_18h
44    0002              
45    0002              ENDIF
46    0002              
47    0002              IF ((__crt_enable_rst & 0x1010) = 0x1010)
48    0002              
49    0002                 PUBLIC _z80_rst_20h_vector
50    0002              
51    0002                 defc _z80_rst_20h_vector = __z80_rst_20h + 1
52    0002              
53    0002                 EXTERN _z80_rst_20h
54    0002              
55    0002                 __z80_rst_20h:
56    0002              
57    0002                    jp _z80_rst_20h
58    0002              
59    0002              ENDIF
60    0002              
61    0002              IF ((__crt_enable_rst & 0x2020) = 0x2020)
62    0002              
63    0002                 PUBLIC _z80_rst_28h_vector
64    0002              
65    0002                 defc _z80_rst_28h_vector = __z80_rst_28h + 1
66    0002              
67    0002                 EXTERN _z80_rst_28h
68    0002              
69    0002                 __z80_rst_28h:
70    0002              
71    0002                    jp _z80_rst_28h
72    0002              
73    0002              ENDIF
74    0002              
75    0002              IF ((__crt_enable_rst & 0x4040) = 0x4040)
76    0002              
77    0002                 PUBLIC _z80_rst_30h_vector
78    0002              
79    0002                 defc _z80_rst_30h_vector = __z80_rst_30h + 1
80    0002              
81    0002                 EXTERN _z80_rst_30h
82    0002              
83    0002                 __z80_rst_30h:
84    0002              
85    0002                    jp _z80_rst_30h
86    0002              
87    0002              ENDIF
88    0002              
89    0002              IF ((__crt_enable_rst & 0x8080) = 0x8080)
90    0002              
91    0002                 PUBLIC _z80_rst_38h_vector
92    0002              
93    0002                 defc _z80_rst_38h_vector = __z80_rst_38h + 1
94    0002              
95    0002                 EXTERN _z80_rst_38h
96    0002              
97    0002                 __z80_rst_38h:
98    0002              
99    0002                    jp _z80_rst_38h
100   0002              
101   0002              ENDIF
102   0002              
103   0002              IF (__crt_enable_nmi > 1)
104   0002              
105   0002                 PUBLIC _z80_nmi_vector
106   0002              
107   0002                 defc _z80_nmi_vector = __z80_nmi + 1
108   0002              
109   0002                 EXTERN _z80_nmi
110   0002              
111   0002                 __z80_nmi:
112   0002              
113   0002                    jp _z80_nmi
114   0002              
115   0002              ENDIF
116   0002              
117   0002              ENDIF
118   0002              
1965  0002              
1966  0002              IF (__crt_on_exit & 0x10000) && ((__crt_on_exit & 0x6) || ((__crt_on_exit & 0x8) && (__register_sp = -1)))
1967  0002              
1968  0002                 SECTION BSS_UNINITIALIZED
1969  0002                 __sp_or_ret:  defw 0
1970  0002              
1971  0002              ENDIF
1972  0002              
1973  0002              include "../clib_variables.inc"
1     0002              
2     0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0002              ;; library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
4     0002              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0002              
6     0002              IF __clib_balloc_table_size > 0
7     0002              
8     0002                 ; create balloc table
9     0002              
10    0002                 SECTION data_clib
11    0002                 SECTION data_alloc_balloc
12    0002              
13    0002                 PUBLIC __balloc_array
14    0002              
15    0002                 __balloc_array:             defw __balloc_table
16    0002              
17    0002                 SECTION bss_clib
18    0002                 SECTION bss_alloc_balloc
19    0002              
20    0002                 __balloc_table:             defs __clib_balloc_table_size * 2
21    0002              
22    0002              ENDIF
23    0002              
24    0002              IF __clib_malloc_heap_size = -1
25    0002              
26    0002                 ; place malloc heap between bss section and bottom of the stack
27    0002              
28    0002                 SECTION data_clib
29    0000                 SECTION data_alloc_malloc
30    0000              
31    0000                 PUBLIC __malloc_heap
32    0000              
33    0000                 EXTERN __BSS_END_tail
34    0000              
35    0000  00 00          __malloc_heap:              defw __BSS_END_tail
36    0002              
37    0002                 SECTION code_crt_init
38    0005              
39    0005  21 FF FF       ld hl,-1                    ; ensure sp == 0 is accepted
40    0008  39             add hl,sp                   ; hl = top of the stack
41    0009              
42    0009  11 00 00       ld de,__BSS_END_tail
43    000C              
44    000C  AF             xor a
45    000D  ED 52          sbc hl,de                   ; hl = space between top of stack and end of bss - 1
46    000F              
47    000F  DA 03 00       jp c, __Exit                ; if stack overlaps bss, this is a fatal error
48    0012              
49    0012  01 0E 01       ld bc,__crt_stack_size + 14 ; amount of space reserved by stack + minimum heap size - 1
50    0015  ED 42          sbc hl,bc                   ; hl = max heap size - 15
51    0017              
52    0017  DA 03 00       jp c, __Exit                ; if no room for heap, this is a fatal error
53    001A              
54    001A  01 0F 00       ld bc,15
55    001D  09             add hl,bc
56    001E              
57    001E  4D             ld c,l
58    001F  44             ld b,h                      ; bc = available heap size
59    0020              
60    0020  EB             ex de,hl                    ; hl = __BSS_END_tail = start of heap
61    0021              
62    0021                 EXTERN asm_heap_init
63    0021  CD 00 00       call asm_heap_init
64    0024              
65    0024              ENDIF
66    0024              
67    0024              IF __clib_malloc_heap_size < -1
68    0024              
69    0024                 ; place malloc heap between bss section and including address abs(CLIB_MALLOC_HEAP_SIZE)
70    0024              
71    0024                 SECTION data_clib
72    0024                 SECTION data_alloc_malloc
73    0024              
74    0024                 PUBLIC __malloc_heap
75    0024              
76    0024                 EXTERN __BSS_END_tail
77    0024              
78    0024                 __malloc_heap:              defw __BSS_END_tail
79    0024              
80    0024                 SECTION code_crt_init
81    0024              
82    0024                 ld hl,-__clib_malloc_heap_size - 13
83    0024                 ld de,__BSS_END_tail
84    0024              
85    0024                 xor a
86    0024                 sbc hl,de
87    0024              
88    0024                 jp c, __Exit                ; if no room for minimum size heap, fatal error
89    0024              
90    0024                 ld bc,14
91    0024                 add hl,bc
92    0024              
93    0024                 ld c,l
94    0024                 ld b,h                      ; bc = available heap size
95    0024              
96    0024                 ex de,hl                    ; hl = __BSS_END_tail = start of heap
97    0024              
98    0024                 EXTERN asm_heap_init
99    0024                 call asm_heap_init
100   0024              
101   0024              ENDIF
102   0024              
103   0024              IF __clib_malloc_heap_size > 14
104   0024              
105   0024                 ; create malloc heap in bss section
106   0024              
107   0024                 SECTION data_clib
108   0024                 SECTION data_alloc_malloc
109   0024              
110   0024                 PUBLIC __malloc_heap
111   0024              
112   0024                 __malloc_heap:              defw __malloc_block
113   0024              
114   0024                 SECTION bss_clib
115   0024                 SECTION bss_alloc_malloc
116   0024              
117   0024                 __malloc_block:             defs __clib_malloc_heap_size
118   0024              
119   0024                 SECTION code_crt_init
120   0024              
121   0024                 ld hl,__malloc_block
122   0024                 ld bc,__clib_malloc_heap_size
123   0024              
124   0024                 EXTERN asm_heap_init
125   0024                 call asm_heap_init
126   0024              
127   0024              ENDIF
128   0024              
129   0024                 ; create exit stack
130   0024              
131   0024                 SECTION bss_clib
132   0000                 SECTION bss_stdlib
133   0000              
134   0000                 PUBLIC __exit_stack
135   0000              
136   0000  00             __exit_stack:               defb 0
137   0001                                             defs __exit_stack_size * 2
138   0001              
139   0001                 ; create quickexit stack
140   0001              
141   0001                 SECTION bss_clib
142   0000                 SECTION bss_stdlib
143   0001              
144   0001                 PUBLIC __quickexit_stack
145   0001              
146   0001  00             __quickexit_stack:          defb 0
147   0002                                             defs __quickexit_stack_size * 2
148   0002              
149   0002                 ; assign thread id
150   0002              
151   0002                 SECTION data_clib
152   0000                 SECTION data_threads
153   0000              
154   0000                 PUBLIC __thrd_id
155   0000              
156   0000  01             __thrd_id:                  defb 1
157   0001              
158   0001              ;; end library variables ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
159   0001              
1974  0001              
1975  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1976  0001              ;; CLIB STUBS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1977  0001              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1978  0001              
1979  0001              include "../clib_stubs.inc"
1     0001              
2     0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
3     0001                 ;; unimplemented
4     0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
5     0001              
6     0001                 ; system()
7     0001              
8     0001                 PUBLIC __ch_system
9     0001              
10    0001                 EXTERN error_zc
11    0001              
12    0001                 defc __ch_system = error_zc
13    0001              
14    0001                 ; threads
15    0001                 ; these functions are preliminary only
16    0001              
17    0001                 PUBLIC __thread_context_switch
18    0001                 PUBLIC __thread_block_timeout
19    0001                 PUBLIC __thread_unblock
20    0001              
21    0001                 EXTERN l_ret
22    0001              
23    0001                 defc __thread_context_switch = l_ret
24    0001                 defc __thread_block_timeout  = l_ret
25    0001                 defc __thread_unblock        = l_ret
26    0001              
27    0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
28    0001                 ;; dynamically generated functions
29    0001                 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
30    0001              
31    0001                 ; dynamic printf
32    0001              
33    0001                 IFNDEF CLIB_OPT_PRINTF
34    0001                    IFDEF CLIB_OPT_PRINTF_2
35    0001                       defc CLIB_OPT_PRINTF = 0
36    0001                    ENDIF
37    0001                 ENDIF
38    0001              
39    0001                 IFNDEF CLIB_OPT_PRINTF_2
40    0001                    IFDEF CLIB_OPT_PRINTF
41    0001                       defc CLIB_OPT_PRINTF_2 = 0
42    0001                    ENDIF
43    0001                 ENDIF
44    0001              
45    0001                 IFDEF CLIB_OPT_PRINTF
46    0001              
47    0001                    IF __SDCC_IY
48    0001              
49    0001                       INCLUDE "../../stdio/z80/asm_vfprintf_unlocked_iy.asm"
1     0001              
2     0001              ; ===============================================================
3     0001              ; Jan 2014
4     0001              ; ===============================================================
5     0001              ;
6     0001              ; int vfprintf_unlocked(FILE *stream, const char *format, void *arg)
7     0001              ;
8     0001              ; See C11 specification.
9     0001              ;
10    0001              ; ===============================================================
11    0001              
12    0001              ; not to be included in c library
13    0001              ; dynamic printf for sdcc_iy compiles only
14    0001              
15    0001              SECTION code_clib
16    0000              SECTION code_stdio
17    0000              
18    0000              PUBLIC asm_vfprintf_unlocked
19    0000              PUBLIC asm0_vfprintf_unlocked, asm1_vfprintf_unlocked
20    0000              
21    0000              EXTERN __stdio_verify_output, asm_strchrnul, __stdio_send_output_buffer
22    0000              EXTERN l_utod_hl, l_neg_hl, error_einval_zc
23    0000              EXTERN __stdio_nextarg_de, l_atou, __stdio_length_modifier, error_erange_zc
24    0000              
25    0000              asm_vfprintf_unlocked:
26    0000              
27    0000                 ; enter : iy = FILE *
28    0000                 ;         de = char *format
29    0000                 ;         bc = void *stack_param = arg
30    0000                 ;
31    0000                 ; exit  : iy = FILE *
32    0000                 ;         de = char *format (next unexamined char)
33    0000                 ;
34    0000                 ;         success
35    0000                 ;
36    0000                 ;            hl = number of chars output on stream
37    0000                 ;            carry reset
38    0000                 ;
39    0000                 ;         fail
40    0000                 ;
41    0000                 ;            hl = - (chars output + 1) < 0
42    0000                 ;            carry set, errno set as below
43    0000                 ;
44    0000                 ;            eacces = stream not open for writing
45    0000                 ;            eacces = stream is in an error state
46    0000                 ;            erange = width or precision out of range
47    0000                 ;            einval = unknown printf conversion
48    0000                 ;
49    0000                 ;            more errors may be set by underlying driver
50    0000                 ;
51    0000                 ; uses  : all except iy
52    0000              
53    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
54    0000              IF __CLIB_OPT_STDIO & $01
55    0000              
56    0000                 EXTERN __stdio_verify_valid
57    0000              
58    0000                 call __stdio_verify_valid
59    0000                 ret c
60    0000              
61    0000              ENDIF
62    0000              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
63    0000              
64    0000              asm1_vfprintf_unlocked:
65    0000              
66    0000  CD 00 00       call __stdio_verify_output  ; check that output on stream is ok
67    0003  D8             ret c                       ; if output on stream not possible
68    0004              
69    0004              asm0_vfprintf_unlocked:
70    0004              
71    0004              IF (CLIB_OPT_PRINTF != 0) || ((CLIB_OPT_PRINTF_2 != 0) && __SDCC)
72    0004              
73    0004  21 D4 FF       ld hl,-44
74    0007  39             add hl,sp
75    0008  F9             ld sp,hl                    ; create 44 bytes of workspace
76    0009              
77    0009  C5             push bc
78    000A              
79    000A              ENDIF
80    000A              
81    000A  D9             exx
82    000B  21 00 00       ld hl,0                     ; initial output count is zero
83    000E  D9             exx
84    000F              
85    000F              ;******************************
86    000F              ; * FORMAT STRING LOOP ********
87    000F              
88    000F              format_loop_printf:
89    000F              
90    000F                 ; de = char *format
91    000F                 ; stack = WORKSPACE_44, stack_param
92    000F              
93    000F  6B             ld l,e
94    0010  62             ld h,d
95    0011              
96    0011              __format_loop_printf:
97    0011              
98    0011  0E 25          ld c,'%'
99    0013  CD 00 00       call asm_strchrnul
100   0016              
101   0016                 ; output format string chars up to '%'
102   0016              
103   0016  E5             push hl
104   0017              
105   0017  B7             or a
106   0018  ED 52          sbc hl,de
107   001A  4D             ld c,l
108   001B  44             ld b,h                      ; bc = num chars to output
109   001C              
110   001C  EB             ex de,hl                    ; hl = char *format
111   001D              
112   001D  C4 00 00       call nz, __stdio_send_output_buffer
113   0020              
114   0020  D1             pop de
115   0021              
116   0021              
117   0021              IF (CLIB_OPT_PRINTF = 0) && ((CLIB_OPT_PRINTF_2 = 0) || __SCCZ80)
118   0021              
119   0021                 jr c, error_stream_printf          ; if stream error
120   0021              
121   0021              ELSE
122   0021              
123   0021  DA 5D 01       jp c, error_stream_printf          ; if stream error
124   0024              
125   0024              ENDIF
126   0024              
127   0024              
128   0024                 ; de = address of format char stopped on ('%' or '\0')
129   0024                 ; stack = WORKSPACE_44, stack_param
130   0024              
131   0024  1A             ld a,(de)
132   0025  B7             or a
133   0026  28 0B          jr z, format_end_printf            ; if stopped on string terminator
134   0028              
135   0028  13             inc de                      ; next format char to examine
136   0029              
137   0029  1A             ld a,(de)
138   002A  FE 25          cp '%'
139   002C  20 1C          jr nz, interpret_printf
140   002E              
141   002E                 ; %%
142   002E              
143   002E  6B             ld l,e
144   002F  62             ld h,d
145   0030              
146   0030  23             inc hl                      ; next char to examine is past %%
147   0031  18 DE          jr __format_loop_printf
148   0033              
149   0033              format_end_printf:
150   0033              
151   0033                 ; de = address of format char '\0'
152   0033                 ; stack = WORKSPACE_44, stack_param
153   0033              
154   0033              IF (CLIB_OPT_PRINTF != 0) || ((CLIB_OPT_PRINTF_2 != 0) && __SDCC)
155   0033              
156   0033  21 2E 00       ld hl,46
157   0036  39             add hl,sp
158   0037  F9             ld sp,hl                    ; repair stack
159   0038              
160   0038              ENDIF
161   0038              
162   0038  D9             exx
163   0039  E5             push hl
164   003A  D9             exx
165   003B  E1             pop hl                      ; hl = number of chars output
166   003C              
167   003C  B7             or a
168   003D  C3 00 00       jp l_utod_hl                ; hl = max $7fff
169   0040              
170   0040              ; * AA ********************************************************
171   0040              
172   0040              IF (CLIB_OPT_PRINTF = 0) && ((CLIB_OPT_PRINTF_2 = 0) || __SCCZ80)
173   0040              
174   0040                 ; completely disable % logic
175   0040                 ; printf can only be used to output format text
176   0040              
177   0040              interpret_printf:
178   0040              
179   0040                 ; de = address of format char after '%'
180   0040              
181   0040                 call error_einval_zc
182   0040              ;;;;   jr error_stream_printf             ; could probably just fall through but let's be safe
183   0040              
184   0040              ENDIF
185   0040              
186   0040              ; * BB ********************************************************
187   0040              
188   0040              IF (CLIB_OPT_PRINTF != 0) || ((CLIB_OPT_PRINTF_2 != 0) && __SDCC)
189   0040              
190   0040                 ; regular % processing
191   0040              
192   0040              flag_chars_printf:
193   0040              
194   0040  2B 40          defb '+', $40
195   0042  20 20          defb ' ', $20
196   0044  23 10          defb '#', $10
197   0046  30 08          defb '0', $08
198   0048  2D 04          defb '-', $04
199   004A              
200   004A              interpret_printf:
201   004A              
202   004A  1B             dec de
203   004B  0E 00          ld c,0
204   004D              
205   004D              ;******************************
206   004D              ; * FLAGS FIELD ***************
207   004D              
208   004D              flags_printf:
209   004D              
210   004D                 ; consume optional flags "-+ #0"
211   004D                 ; default flags is none set
212   004D              
213   004D  13             inc de                      ; advance to next char in format string
214   004E              
215   004E                 ; de = address of next format char to examine
216   004E                 ;  c = conversion_flags
217   004E                 ; stack = WORKSPACE_44, stack_param
218   004E              
219   004E  1A             ld a,(de)
220   004F              
221   004F  21 40 00       ld hl,flag_chars_printf
222   0052  06 05          ld b,5
223   0054              
224   0054              flags_id_printf:
225   0054              
226   0054  BE             cp (hl)
227   0055  23             inc hl
228   0056              
229   0056  28 21          jr z, flag_found_printf
230   0058              
231   0058  23             inc hl
232   0059  10 F9          djnz flags_id_printf
233   005B              
234   005B  FD 71 05       ld (iy+5),c                 ; store conversion_flags
235   005E              
236   005E              ;******************************
237   005E              ; * width FIELD ***************
238   005E              
239   005E              width_printf:
240   005E              
241   005E                 ; consume optional width specifier
242   005E                 ; default width is zero
243   005E              
244   005E                 ;  a = next format char
245   005E                 ; de = address of next format char to examine
246   005E                 ; stack = WORKSPACE_44, stack_param
247   005E              
248   005E  FE 2A          cp '*'
249   0060  20 1C          jr nz, width_from_format_printf
250   0062              
251   0062                 ; asterisk means width comes from parameter list
252   0062              
253   0062  E1             pop hl
254   0063              
255   0063  13             inc de                      ; consume '*'
256   0064  D5             push de
257   0065              
258   0065                 ; hl = stack_param
259   0065                 ; stack = WORKSPACE_44, address of next format char to examine
260   0065              
261   0065  CD 00 00       call __stdio_nextarg_de     ; de = width
262   0068  EB             ex de,hl
263   0069              
264   0069                 ; hl = width
265   0069                 ; de = stack_param
266   0069                 ; stack = WORKSPACE_44, address of next format char to examine
267   0069              
268   0069  CB 7C          bit 7,h
269   006B  28 07          jr z, width_positive_printf
270   006D              
271   006D                 ; negative field width
272   006D              
273   006D  CD 00 00       call l_neg_hl               ; width made positive
274   0070  FD CB 05 D6    set 2,(iy+5)                ; '-' flag set
275   0074              
276   0074              width_positive_printf:
277   0074              
278   0074  E3             ex (sp),hl
279   0075  EB             ex de,hl
280   0076  E5             push hl
281   0077              
282   0077                 ; de = address of next format char to examine
283   0077                 ; stack = WORKSPACE_44, width, stack_param
284   0077              
285   0077  18 12          jr precision_printf
286   0079              
287   0079              flag_found_printf:
288   0079              
289   0079  7E             ld a,(hl)
290   007A              
291   007A  B1             or c
292   007B  4F             ld c,a
293   007C              
294   007C  18 CF          jr flags_printf
295   007E              
296   007E              width_from_format_printf:
297   007E              
298   007E                 ; read width from format string, default = 0
299   007E              
300   007E                 ; de = address of next format char to examine
301   007E                 ; stack = WORKSPACE_44, stack_param
302   007E              
303   007E  CD 00 00       call l_atou                 ; hl = width
304   0081  DA 5A 01       jp c, error_format_width_printf    ; width out of range
305   0084              
306   0084  CB 7C          bit 7,h
307   0086  C2 5A 01       jp nz, error_format_width_printf   ; width out of range
308   0089              
309   0089  E3             ex (sp),hl
310   008A  E5             push hl
311   008B              
312   008B              ;******************************
313   008B              ; * precision FIELD ***********
314   008B              
315   008B              precision_printf:
316   008B              
317   008B                 ; consume optional precision specifier
318   008B                 ; default precision is one
319   008B              
320   008B                 ; de = address of next format char to examine
321   008B                 ; stack = WORKSPACE_44, width, stack_param
322   008B              
323   008B  21 01 00       ld hl,1                     ; default precision
324   008E              
325   008E  1A             ld a,(de)
326   008F              
327   008F  FE 2E          cp '.'
328   0091  20 2C          jr nz, end_precision_printf
329   0093              
330   0093  FD CB 05 C6    set 0,(iy+5)                ; indicate precision is specified
331   0097  13             inc de                      ; consume '.'
332   0098              
333   0098  1A             ld a,(de)
334   0099  FE 2A          cp '*'
335   009B  20 17          jr nz, precision_from_format_printf
336   009D              
337   009D                 ; asterisk means precision comes from parameter list
338   009D              
339   009D  E1             pop hl
340   009E              
341   009E  13             inc de                      ; consume '*'
342   009F  D5             push de
343   00A0              
344   00A0                 ; hl = stack_param
345   00A0                 ; stack = WORKSPACE_44, width, address of next format char to examine
346   00A0              
347   00A0  CD 00 00       call __stdio_nextarg_de     ; de = precision
348   00A3  EB             ex de,hl
349   00A4              
350   00A4                 ; hl = precision
351   00A4                 ; de = stack_param
352   00A4                 ; stack = WORKSPACE_44, width, address of next format char to examine
353   00A4              
354   00A4  CB 7C          bit 7,h
355   00A6  28 07          jr z, precision_positive_printf
356   00A8              
357   00A8                 ; negative precision means precision is ignored
358   00A8              
359   00A8  21 01 00       ld hl,1                     ; precision takes default value
360   00AB  FD CB 05 86    res 0,(iy+5)                ; indicate precision is not specified
361   00AF              
362   00AF              precision_positive_printf:
363   00AF              
364   00AF  E3             ex (sp),hl
365   00B0  EB             ex de,hl
366   00B1  E5             push hl
367   00B2              
368   00B2                 ; de = address of next format char to examine
369   00B2                 ; stack = WORKSPACE_44, width, precision, stack_param
370   00B2              
371   00B2  18 0D          jr length_modifier_printf
372   00B4              
373   00B4              precision_from_format_printf:
374   00B4              
375   00B4                 ; read precision from format string
376   00B4              
377   00B4                 ; de = address of next format char to examine
378   00B4                 ; stack = WORKSPACE_44, width, stack_param
379   00B4              
380   00B4  CD 00 00       call l_atou                   ; hl = precision
381   00B7  DA 59 01       jp c, error_format_precision_printf  ; precision out of range
382   00BA              
383   00BA  CB 7C          bit 7,h
384   00BC  C2 59 01       jp nz, error_format_precision_printf ; precision out of range
385   00BF              
386   00BF              end_precision_printf:
387   00BF              
388   00BF                 ; hl = precision
389   00BF                 ; de = address of next format char to examine
390   00BF                 ; stack = WORKSPACE_44, width, stack_param
391   00BF              
392   00BF  E3             ex (sp),hl
393   00C0  E5             push hl
394   00C1              
395   00C1              ;******************************
396   00C1              ; * LENGTH MODIFIER ***********
397   00C1              
398   00C1              length_modifier_printf:
399   00C1              
400   00C1                 ; consume optional length modifier
401   00C1              
402   00C1                 ; de = address of next format char to examine
403   00C1                 ; stack = WORKSPACE_44, width, precision, stack_param
404   00C1              
405   00C1  CD 00 00       call __stdio_length_modifier
406   00C4              
407   00C4              ;******************************
408   00C4              ; * CONVERSION SPECIFIER ******
409   00C4              
410   00C4              converter_specifier_printf:
411   00C4              
412   00C4                 ; identify conversion "aABcdeEfFgGinopsuxIX"
413   00C4                 ; long modifies "BdinopuxX" not "aAceEfFgGsI"
414   00C4              
415   00C4                 ; de = address of next format char to examine
416   00C4                 ;  c = length modifier id
417   00C4                 ; stack = WORKSPACE_44, width, precision, stack_param
418   00C4              
419   00C4  1A             ld a,(de)                   ; a = specifier
420   00C5  13             inc de
421   00C6              
422   00C6              IF CLIB_OPT_PRINTF & $800
423   00C6              
424   00C6                 cp 'I'
425   00C6                 jr z, printf_I              ; converter does not fit tables
426   00C6              
427   00C6              ENDIF
428   00C6              
429   00C6  47             ld b,a                      ; b = specifier
430   00C7              
431   00C7  79             ld a,c
432   00C8  E6 30          and $30                     ; only pay attention to long and longlong modifiers
433   00CA  D6 10          sub $10
434   00CC              
435   00CC                 ; carry must be reset here
436   00CC              
437   00CC  30 19          jr nc, long_spec_printf            ; if long or longlong modifier selected
438   00CE              
439   00CE                 ;;; without long spec
440   00CE              
441   00CE              IF CLIB_OPT_PRINTF & $1ff
442   00CE              
443   00CE  21 40 01       ld hl,rcon_tbl_printf              ; converters without long spec
444   00D1  CD 23 01       call match_con_printf
445   00D4  38 15          jr c, printf_return_is_2
446   00D6              
447   00D6              ENDIF
448   00D6              
449   00D6              common_spec_printf:
450   00D6              
451   00D6              IF CLIB_OPT_PRINTF & $600
452   00D6              
453   00D6  21 37 01       ld hl,acon_tbl_printf              ; converters independent of long spec
454   00D9  CD 23 01       call match_con_printf
455   00DC  38 0D          jr c, printf_return_is_2
456   00DE              
457   00DE              ENDIF
458   00DE              
459   00DE              IF CLIB_OPT_PRINTF & $3fc00000
460   00DE              
461   00DE                 ld hl,fcon_tbl_printf              ; float converters are independent of long spec
462   00DE                 call match_con_printf
463   00DE              
464   00DE                 IF __SDCC | __SDCC_IX | __SDCC_IY
465   00DE              
466   00DE                    jr c, printf_return_is_4
467   00DE              
468   00DE                 ELSE
469   00DE              
470   00DE                    jr c, printf_return_is_6
471   00DE              
472   00DE                 ENDIF
473   00DE              
474   00DE              ENDIF
475   00DE              
476   00DE                 ;;; converter unrecognized
477   00DE              
478   00DE              unrecognized_printf:
479   00DE              
480   00DE                 ; de = address of next format char to examine
481   00DE                 ; stack = WORKSPACE_44, width, precision, stack_param
482   00DE              
483   00DE  CD 00 00       call error_einval_zc        ; set errno
484   00E1              
485   00E1  21 32 00       ld hl,50
486   00E4  C3 60 01       jp __error_stream_printf
487   00E7              
488   00E7              IF CLIB_OPT_PRINTF_2 && __SDCC
489   00E7              
490   00E7                 ;;; with longlong spec
491   00E7              
492   00E7              longlong_spec_printf:
493   00E7              
494   00E7                 ld hl,llcon_tbl_printf             ; converters with longlong spec
495   00E7                 call match_con_printf
496   00E7              
497   00E7                 jr c, printf_return_is_8
498   00E7                 jr common_spec_printf
499   00E7              
500   00E7              ENDIF
501   00E7              
502   00E7                 ;;; with long spec
503   00E7              
504   00E7              long_spec_printf:
505   00E7              
506   00E7              IF CLIB_OPT_PRINTF_2 && __SDCC
507   00E7              
508   00E7                 jr nz, longlong_spec_printf
509   00E7              
510   00E7              ELSE
511   00E7              
512   00E7  20 ED          jr nz, common_spec_printf
513   00E9              
514   00E9              ENDIF
515   00E9              
516   00E9              IF CLIB_OPT_PRINTF & $1ff000
517   00E9              
518   00E9                 ld hl,lcon_tbl_printf              ; converters with long spec
519   00E9                 call match_con_printf
520   00E9              
521   00E9              ENDIF
522   00E9              
523   00E9  30 EB          jr nc, common_spec_printf
524   00EB              
525   00EB                 ;;; conversion matched
526   00EB              
527   00EB              IF (CLIB_OPT_PRINTF & $1ff800) || ((__SDCC) && (CLIB_OPT_PRINTF & $3fc00000))
528   00EB              
529   00EB              printf_return_is_4:
530   00EB              
531   00EB                 ld bc,printf_return_4
532   00EB                 jr printf_invoke_flags
533   00EB              
534   00EB              ENDIF
535   00EB              
536   00EB              IF CLIB_OPT_PRINTF & $800
537   00EB              
538   00EB              printf_I:
539   00EB              
540   00EB                 EXTERN __stdio_printf_ii
541   00EB              
542   00EB                 ld hl,__stdio_printf_ii
543   00EB                 ld a,$80
544   00EB              
545   00EB                 jr printf_return_is_4
546   00EB              
547   00EB              ENDIF
548   00EB              
549   00EB              IF CLIB_OPT_PRINTF_2 && __SDCC
550   00EB              
551   00EB              printf_return_is_8:
552   00EB              
553   00EB                 ld bc,printf_return_8
554   00EB                 jr printf_invoke_flags
555   00EB              
556   00EB              ENDIF
557   00EB              
558   00EB              IF (__SCCZ80 | __ASM) && (CLIB_OPT_PRINTF & $3fc00000)
559   00EB              
560   00EB              printf_return_is_6:
561   00EB              
562   00EB                 ld bc,printf_return_6
563   00EB                 jr printf_invoke_flags
564   00EB              
565   00EB              ENDIF
566   00EB              
567   00EB              IF CLIB_OPT_PRINTF & $7ff
568   00EB              
569   00EB              printf_return_is_2:
570   00EB              
571   00EB  01 4A 01       ld bc,printf_return_2
572   00EE              
573   00EE              ENDIF
574   00EE              
575   00EE              printf_invoke_flags:
576   00EE              
577   00EE                 ;  a = invoke flags
578   00EE                 ; hl = & printf converter
579   00EE                 ; bc = return address after conversion
580   00EE                 ; de = address of next format char to examine
581   00EE                 ; stack = WORKSPACE_44, width, precision, stack_param
582   00EE              
583   00EE  CB 6F          bit 5,a
584   00F0  28 04          jr z, skip_00_printf
585   00F2  FD CB 05 CE    set 1,(iy+5)                ; indicates octal conversion
586   00F6              
587   00F6              skip_00_printf:
588   00F6              
589   00F6  CB 67          bit 4,a
590   00F8  28 04          jr z, skip_11_printf
591   00FA  FD CB 05 A6    res 4,(iy+5)                ; suppress base indicator
592   00FE              
593   00FE              skip_11_printf:
594   00FE              
595   00FE  E6 C0          and $c0
596   0100  FD 77 04       ld (iy+4),a                 ; capitalize & signed conversion indicators
597   0103              
598   0103              printf_invoke:
599   0103              
600   0103                 ; hl = & printf_converter
601   0103                 ; de = address of next format char to examine
602   0103                 ; bc = return address after printf conversion
603   0103                 ; stack = WORKSPACE_44, width, precision, stack_param
604   0103              
605   0103  E3             ex (sp),hl                  ; push & printf_converter
606   0104  E5             push hl
607   0105              
608   0105                 ; de = char *format
609   0105                 ; bc = return address
610   0105                 ; stack = WORKSPACE_44, width, precision, & converter, stack_param
611   0105              
612   0105  21 0F 00       ld hl,15
613   0108  39             add hl,sp
614   0109              
615   0109  72             ld (hl),d
616   010A  2B             dec hl
617   010B  73             ld (hl),e                   ; store address of next format char
618   010C  2B             dec hl
619   010D              
620   010D  D1             pop de                      ; de = stack_param
621   010E              
622   010E  72             ld (hl),d
623   010F  2B             dec hl
624   0110  73             ld (hl),e                   ; store stack_param
625   0111  2B             dec hl
626   0112              
627   0112  70             ld (hl),b
628   0113  2B             dec hl
629   0114  71             ld (hl),c                   ; store return address after printf
630   0115  2B             dec hl
631   0116              
632   0116  4D             ld c,l
633   0117  44             ld b,h
634   0118              
635   0118  21 0A 00       ld hl,10
636   011B  09             add hl,bc                   ; hl = buffer_digits
637   011C              
638   011C  7C             ld a,h
639   011D  02             ld (bc),a
640   011E  0B             dec bc
641   011F  7D             ld a,l
642   0120  02             ld (bc),a                   ; store buffer_digits
643   0121              
644   0121  EB             ex de,hl
645   0122              
646   0122                 ; iy = FILE *
647   0122                 ; hl = void *stack_param
648   0122                 ; de = void *buffer_digits
649   0122                 ; stack = WORKSPACE_42, return addr, buffer_digits, width, precision, & printf_conv
650   0122              
651   0122                 ; WORSPACE_44 low to high addresses
652   0122                 ;
653   0122                 ; offset  size  purpose
654   0122                 ;
655   0122                 ;   0       2   void *buffer_digits
656   0122                 ;   2       2   return address following printf conversion
657   0122                 ;   4       2   void *stack_param
658   0122                 ;   6       2   address of next format char
659   0122                 ;   8       3   prefix buffer space for printf conversion
660   0122                 ;  11      33   buffer_digits[] (space for printf conversion)
661   0122              
662   0122  C9             ret
663   0123              
664   0123              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
665   0123              
666   0123              match_con_printf:
667   0123              
668   0123                 ; enter :   b = conversion specifier
669   0123                 ;          hl = conversion table
670   0123                 ;
671   0123                 ; exit  :   b = conversion specifier
672   0123                 ;
673   0123                 ;         if matched
674   0123                 ;
675   0123                 ;              a = flags
676   0123                 ;             hl = & printf converter
677   0123                 ;             carry set
678   0123                 ;
679   0123                 ;         if unmatched
680   0123                 ;
681   0123                 ;             carry reset
682   0123              
683   0123  7E             ld a,(hl)
684   0124  23             inc hl
685   0125              
686   0125  B7             or a
687   0126  C8             ret z
688   0127              
689   0127  B8             cp b
690   0128  28 05          jr z, match_ret_printf
691   012A              
692   012A  23             inc hl
693   012B  23             inc hl
694   012C  23             inc hl
695   012D              
696   012D  18 F4          jr match_con_printf
697   012F              
698   012F              match_ret_printf:
699   012F              
700   012F  7E             ld a,(hl)                   ; a = flags
701   0130  23             inc hl
702   0131              
703   0131  46             ld b,(hl)
704   0132  23             inc hl
705   0133  66             ld h,(hl)
706   0134  68             ld l,b                      ; hl = & printf converter
707   0135              
708   0135  37             scf
709   0136  C9             ret
710   0137              
711   0137              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
712   0137              
713   0137              IF CLIB_OPT_PRINTF & $600
714   0137              
715   0137              acon_tbl_printf:
716   0137              
717   0137              IF CLIB_OPT_PRINTF & $200
718   0137              
719   0137  73 80       defb 's', $80
720   0139              EXTERN __stdio_printf_s
721   0139  00 00       defw __stdio_printf_s
722   013B              
723   013B              ENDIF
724   013B              
725   013B              IF CLIB_OPT_PRINTF & $400
726   013B              
727   013B  63 80       defb 'c', $80
728   013D              EXTERN __stdio_printf_c
729   013D  00 00       defw __stdio_printf_c
730   013F              
731   013F              ENDIF
732   013F              
733   013F  00          defb 0
734   0140              
735   0140              ENDIF
736   0140              
737   0140              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
738   0140              
739   0140              IF CLIB_OPT_PRINTF & $1ff
740   0140              
741   0140              rcon_tbl_printf:
742   0140              
743   0140              IF CLIB_OPT_PRINTF & $01
744   0140              
745   0140  64 D0       defb 'd', $d0
746   0142              EXTERN __stdio_printf_d
747   0142  00 00       defw __stdio_printf_d
748   0144              
749   0144              ENDIF
750   0144              
751   0144              IF CLIB_OPT_PRINTF & $02
752   0144              
753   0144              defb 'u', $90
754   0144              EXTERN __stdio_printf_u
755   0144              defw __stdio_printf_u
756   0144              
757   0144              ENDIF
758   0144              
759   0144              IF CLIB_OPT_PRINTF & $04
760   0144              
761   0144              defb 'x', $00
762   0144              EXTERN __stdio_printf_x
763   0144              defw __stdio_printf_x
764   0144              
765   0144              ENDIF
766   0144              
767   0144              IF CLIB_OPT_PRINTF & $08
768   0144              
769   0144              defb 'X', $80
770   0144              EXTERN __stdio_printf_x
771   0144              defw __stdio_printf_x
772   0144              
773   0144              ENDIF
774   0144              
775   0144              IF CLIB_OPT_PRINTF & $10
776   0144              
777   0144              defb 'o', $a0
778   0144              EXTERN __stdio_printf_o
779   0144              defw __stdio_printf_o
780   0144              
781   0144              ENDIF
782   0144              
783   0144              IF CLIB_OPT_PRINTF & $20
784   0144              
785   0144              defb 'n', $80
786   0144              EXTERN __stdio_printf_n
787   0144              defw __stdio_printf_n
788   0144              
789   0144              ENDIF
790   0144              
791   0144              IF CLIB_OPT_PRINTF & $40
792   0144              
793   0144              defb 'i', $d0
794   0144              EXTERN __stdio_printf_d
795   0144              defw __stdio_printf_d
796   0144              
797   0144              ENDIF
798   0144              
799   0144              IF CLIB_OPT_PRINTF & $80
800   0144              
801   0144              defb 'p', $80
802   0144              EXTERN __stdio_printf_p
803   0144              defw __stdio_printf_p
804   0144              
805   0144              ENDIF
806   0144              
807   0144              IF CLIB_OPT_PRINTF & $100
808   0144              
809   0144              defb 'B', $90
810   0144              EXTERN __stdio_printf_bb
811   0144              defw __stdio_printf_bb
812   0144              
813   0144              ENDIF
814   0144              
815   0144  00          defb 0
816   0145              
817   0145              ENDIF
818   0145              
819   0145              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
820   0145              
821   0145              IF CLIB_OPT_PRINTF & $3fc00000
822   0145              
823   0145              fcon_tbl_printf:
824   0145              
825   0145              IF CLIB_OPT_PRINTF & $10000000
826   0145              
827   0145              defb 'g', $00
828   0145              EXTERN __stdio_printf_g
829   0145              defw __stdio_printf_g
830   0145              
831   0145              ENDIF
832   0145              
833   0145              IF CLIB_OPT_PRINTF & $20000000
834   0145              
835   0145              defb 'G', $80
836   0145              EXTERN __stdio_printf_g
837   0145              defw __stdio_printf_g
838   0145              
839   0145              ENDIF
840   0145              
841   0145              IF CLIB_OPT_PRINTF & $4000000
842   0145              
843   0145              defb 'f', $00
844   0145              EXTERN __stdio_printf_f
845   0145              defw __stdio_printf_f
846   0145              
847   0145              ENDIF
848   0145              
849   0145              IF CLIB_OPT_PRINTF & $8000000
850   0145              
851   0145              defb 'F', $80
852   0145              EXTERN __stdio_printf_f
853   0145              defw __stdio_printf_f
854   0145              
855   0145              ENDIF
856   0145              
857   0145              IF CLIB_OPT_PRINTF & $1000000
858   0145              
859   0145              defb 'e', $00
860   0145              EXTERN __stdio_printf_e
861   0145              defw __stdio_printf_e
862   0145              
863   0145              ENDIF
864   0145              
865   0145              IF CLIB_OPT_PRINTF & $2000000
866   0145              
867   0145              defb 'E', $80
868   0145              EXTERN __stdio_printf_e
869   0145              defw __stdio_printf_e
870   0145              
871   0145              ENDIF
872   0145              
873   0145              IF CLIB_OPT_PRINTF & $400000
874   0145              
875   0145              defb 'a', $00
876   0145              EXTERN __stdio_printf_a
877   0145              defw __stdio_printf_a
878   0145              
879   0145              ENDIF
880   0145              
881   0145              IF CLIB_OPT_PRINTF & $800000
882   0145              
883   0145              defb 'A', $80
884   0145              EXTERN __stdio_printf_a
885   0145              defw __stdio_printf_a
886   0145              
887   0145              ENDIF
888   0145              
889   0145              defb 0
890   0145              
891   0145              ENDIF
892   0145              
893   0145              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
894   0145              
895   0145              IF CLIB_OPT_PRINTF & $1ff000
896   0145              
897   0145              lcon_tbl_printf:
898   0145              
899   0145              IF CLIB_OPT_PRINTF & $1000
900   0145              
901   0145              defb 'd', $d0
902   0145              EXTERN __stdio_printf_ld
903   0145              defw __stdio_printf_ld
904   0145              
905   0145              ENDIF
906   0145              
907   0145              IF CLIB_OPT_PRINTF & $2000
908   0145              
909   0145              defb 'u', $90
910   0145              EXTERN __stdio_printf_lu
911   0145              defw __stdio_printf_lu
912   0145              
913   0145              ENDIF
914   0145              
915   0145              IF CLIB_OPT_PRINTF & $4000
916   0145              
917   0145              defb 'x', $00
918   0145              EXTERN __stdio_printf_lx
919   0145              defw __stdio_printf_lx
920   0145              
921   0145              ENDIF
922   0145              
923   0145              IF CLIB_OPT_PRINTF & $8000
924   0145              
925   0145              defb 'X', $80
926   0145              EXTERN __stdio_printf_lx
927   0145              defw __stdio_printf_lx
928   0145              
929   0145              ENDIF
930   0145              
931   0145              IF CLIB_OPT_PRINTF & $10000
932   0145              
933   0145              defb 'o', $a0
934   0145              EXTERN __stdio_printf_lo
935   0145              defw __stdio_printf_lo
936   0145              
937   0145              ENDIF
938   0145              
939   0145              IF CLIB_OPT_PRINTF & $20000
940   0145              
941   0145              defb 'n', $80
942   0145              EXTERN __stdio_printf_ln
943   0145              defw __stdio_printf_ln
944   0145              
945   0145              ENDIF
946   0145              
947   0145              IF CLIB_OPT_PRINTF & $40000
948   0145              
949   0145              defb 'i', $d0
950   0145              EXTERN __stdio_printf_ld
951   0145              defw __stdio_printf_ld
952   0145              
953   0145              ENDIF
954   0145              
955   0145              IF CLIB_OPT_PRINTF & $80000
956   0145              
957   0145              defb 'p', $80
958   0145              EXTERN __stdio_printf_lp
959   0145              defw __stdio_printf_lp
960   0145              
961   0145              ENDIF
962   0145              
963   0145              IF CLIB_OPT_PRINTF & $100000
964   0145              
965   0145              defb 'B', $90
966   0145              EXTERN __stdio_printf_lbb
967   0145              defw __stdio_printf_lbb
968   0145              
969   0145              ENDIF
970   0145              
971   0145              defb 0
972   0145              
973   0145              ENDIF
974   0145              
975   0145              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
976   0145              
977   0145              IF CLIB_OPT_PRINTF_2 && __SDCC
978   0145              
979   0145              llcon_tbl_printf:
980   0145              
981   0145              IF CLIB_OPT_PRINTF_2 & $01
982   0145              
983   0145              defb 'd', $d0
984   0145              EXTERN __stdio_printf_lld
985   0145              defw __stdio_printf_lld
986   0145              
987   0145              ENDIF
988   0145              
989   0145              IF CLIB_OPT_PRINTF_2 & $02
990   0145              
991   0145              defb 'u', $90
992   0145              EXTERN __stdio_printf_llu
993   0145              defw __stdio_printf_llu
994   0145              
995   0145              ENDIF
996   0145              
997   0145              IF CLIB_OPT_PRINTF_2 & $04
998   0145              
999   0145              defb 'x', $00
1000  0145              EXTERN __stdio_printf_llx
1001  0145              defw __stdio_printf_llx
1002  0145              
1003  0145              ENDIF
1004  0145              
1005  0145              IF CLIB_OPT_PRINTF_2 & $08
1006  0145              
1007  0145              defb 'X', $80
1008  0145              EXTERN __stdio_printf_llx
1009  0145              defw __stdio_printf_llx
1010  0145              
1011  0145              ENDIF
1012  0145              
1013  0145              IF CLIB_OPT_PRINTF_2 & $10
1014  0145              
1015  0145              defb 'o', $a0
1016  0145              EXTERN __stdio_printf_llo
1017  0145              defw __stdio_printf_llo
1018  0145              
1019  0145              ENDIF
1020  0145              
1021  0145              IF CLIB_OPT_PRINTF_2 & $40
1022  0145              
1023  0145              defb 'i', $d0
1024  0145              EXTERN __stdio_printf_lld
1025  0145              defw __stdio_printf_lld
1026  0145              
1027  0145              ENDIF
1028  0145              
1029  0145              defb 0
1030  0145              
1031  0145              ENDIF
1032  0145              
1033  0145              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1034  0145              
1035  0145              IF CLIB_OPT_PRINTF_2 && __SDCC
1036  0145              
1037  0145              printf_return_8:
1038  0145              
1039  0145                 ; printf converters that read eight bytes from stack_param return here
1040  0145                 ;
1041  0145                 ; carry set if error
1042  0145                 ; stack = WORKSPACE_36, char *format, void *stack_param
1043  0145              
1044  0145                 pop bc
1045  0145              
1046  0145              __return_join_8_printf:
1047  0145              
1048  0145              ;******************************
1049  0145              IF __SDCC | __SDCC_IX | __SDCC_IY
1050  0145              ;******************************
1051  0145              
1052  0145                 inc bc
1053  0145                 inc bc                      ; bc = stack_param += 2
1054  0145              
1055  0145              ;******************************
1056  0145              ELSE
1057  0145              ;******************************
1058  0145              
1059  0145                 dec bc
1060  0145                 dec bc                      ; bc = stack_param += 2
1061  0145              
1062  0145              ;******************************
1063  0145              ENDIF
1064  0145              ;******************************
1065  0145              
1066  0145                 jr _return_join_6_printf
1067  0145              
1068  0145              ENDIF
1069  0145              
1070  0145              IF ((__SCCZ80 | __ASM) && (CLIB_OPT_PRINTF & $3fc00000)) || (CLIB_OPT_PRINTF_2 && __SDCC)
1071  0145              
1072  0145              printf_return_6:
1073  0145              
1074  0145                 ; printf converters that read six bytes from stack_param return here
1075  0145                 ;
1076  0145                 ; carry set if error
1077  0145                 ; stack = WORKSPACE_36, char *format, void *stack_param
1078  0145              
1079  0145                 pop bc
1080  0145              
1081  0145              _return_join_6_printf:
1082  0145              
1083  0145              ;******************************
1084  0145              IF __SDCC | __SDCC_IX | __SDCC_IY
1085  0145              ;******************************
1086  0145              
1087  0145                 inc bc
1088  0145                 inc bc                      ; bc = stack_param += 2
1089  0145              
1090  0145              ;******************************
1091  0145              ELSE
1092  0145              ;******************************
1093  0145              
1094  0145                 dec bc
1095  0145                 dec bc                      ; bc = stack_param += 2
1096  0145              
1097  0145              ;******************************
1098  0145              ENDIF
1099  0145              ;******************************
1100  0145              
1101  0145                 jr _return_join_4_printf
1102  0145              
1103  0145              ENDIF
1104  0145              
1105  0145              printf_return_4:
1106  0145              
1107  0145                 ; printf converters that read four bytes from stack_param return here
1108  0145                 ;
1109  0145                 ; carry set if error
1110  0145                 ; stack = WORKSPACE_36, char *format, void *stack_param
1111  0145              
1112  0145  C1             pop bc
1113  0146              
1114  0146              _return_join_4_printf:
1115  0146              
1116  0146              ;******************************
1117  0146              IF __SDCC | __SDCC_IX | __SDCC_IY
1118  0146              ;******************************
1119  0146              
1120  0146  03             inc bc
1121  0147  03             inc bc                      ; bc = stack_param += 2
1122  0148              
1123  0148              ;******************************
1124  0148              ELSE
1125  0148              ;******************************
1126  0148              
1127  0148                 dec bc
1128  0148                 dec bc                      ; bc = stack_param += 2
1129  0148              
1130  0148              ;******************************
1131  0148              ENDIF
1132  0148              ;******************************
1133  0148              
1134  0148  18 01          jr _return_join_2_printf
1135  014A              
1136  014A              printf_return_2:
1137  014A              
1138  014A                 ; printf converters that read two bytes from stack_param return here
1139  014A                 ;
1140  014A                 ; carry set if error
1141  014A                 ; stack = WORKSPACE_36, char *format, void *stack_param
1142  014A              
1143  014A  C1             pop bc
1144  014B              
1145  014B              _return_join_2_printf:
1146  014B              
1147  014B              ;******************************
1148  014B              IF __SDCC | __SDCC_IX | __SDCC_IY
1149  014B              ;******************************
1150  014B              
1151  014B  03             inc bc
1152  014C  03             inc bc                      ; bc = stack_param += 2
1153  014D              
1154  014D              ;******************************
1155  014D              ELSE
1156  014D              ;******************************
1157  014D              
1158  014D                 dec bc
1159  014D                 dec bc                      ; bc = stack_param += 2
1160  014D              
1161  014D              ;******************************
1162  014D              ENDIF
1163  014D              ;******************************
1164  014D              
1165  014D  D1             pop de                      ; de = char *format
1166  014E              
1167  014E  38 1E          jr c, error_printf_converter_printf
1168  0150              
1169  0150  21 F8 FF       ld hl,-8
1170  0153  39             add hl,sp
1171  0154  F9             ld sp,hl
1172  0155              
1173  0155  C5             push bc
1174  0156              
1175  0156                 ; format_loop_printf expects this:
1176  0156                 ;
1177  0156                 ; de = char *format
1178  0156                 ; stack = WORKSPACE_44, stack_param
1179  0156              
1180  0156  C3 0F 00       jp format_loop_printf
1181  0159              
1182  0159              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1183  0159              
1184  0159              error_format_precision_printf:
1185  0159              
1186  0159                 ; de = address of next format char to examine
1187  0159                 ; stack = WORKSPACE_44, width, stack_param
1188  0159              
1189  0159  C1             pop bc                      ; junk one item
1190  015A              
1191  015A                 ; fall through
1192  015A              
1193  015A              error_format_width_printf:
1194  015A              
1195  015A                 ; de = address of next format char to examine
1196  015A                 ; stack = WORKSPACE_44, stack_param
1197  015A              
1198  015A  CD 00 00       call error_erange_zc        ; set errno
1199  015D              
1200  015D                 ; fall through
1201  015D              
1202  015D              ENDIF
1203  015D              
1204  015D              ; ** AA BB ****************************************************
1205  015D              ; all clib options have this code
1206  015D              
1207  015D              error_stream_printf:
1208  015D              
1209  015D              IF (CLIB_OPT_PRINTF != 0) || ((CLIB_OPT_PRINTF_2 != 0) && __SDCC)
1210  015D              
1211  015D                 ; de = address of format char stopped on ('%' or '\0')
1212  015D                 ; stack = WORKSPACE_44, stack_param
1213  015D              
1214  015D  21 2E 00       ld hl,46
1215  0160              
1216  0160              __error_stream_printf:
1217  0160              
1218  0160  39             add hl,sp
1219  0161  F9             ld sp,hl                    ; repair stack
1220  0162              
1221  0162              ENDIF
1222  0162              
1223  0162  D9             exx
1224  0163  E5             push hl
1225  0164  D9             exx
1226  0165  E1             pop hl                      ; hl = number of chars transmitted
1227  0166              
1228  0166  CD 00 00       call l_utod_hl              ; hl = max $7fff
1229  0169  23             inc hl
1230  016A              
1231  016A  37             scf                         ; indicate error
1232  016B  C3 00 00       jp l_neg_hl                 ; hl = - (chars out + 1) < 0
1233  016E              
1234  016E              IF (CLIB_OPT_PRINTF != 0) || ((CLIB_OPT_PRINTF_2 != 0) && __SDCC)
1235  016E              
1236  016E              error_printf_converter_printf:
1237  016E              
1238  016E                 ; de = address of next format char to examine
1239  016E                 ; stack = WORKSPACE_36
1240  016E              
1241  016E  21 24 00       ld hl,36
1242  0171  18 ED          jr __error_stream_printf
1243  0173              
1244  0173              ENDIF
1245  0173              
50    0173              
51    0173                    ELSE
52    0173              
53    0173                       INCLUDE "../../stdio/z80/asm_vfprintf_unlocked.asm"
54    0173              
55    0173                    ENDIF
56    0173              
57    0173                 ENDIF
58    0173              
59    0173                 ; dynamic scanf
60    0173              
61    0173                 IFNDEF CLIB_OPT_SCANF
62    0173                    IFDEF CLIB_OPT_SCANF_2
63    0173                       defc CLIB_OPT_SCANF = 0
64    0173                    ENDIF
65    0173                 ENDIF
66    0173              
67    0173                 IFNDEF CLIB_OPT_SCANF_2
68    0173                    IFDEF CLIB_OPT_SCANF
69    0173                       defc CLIB_OPT_SCANF_2 = 0
70    0173                    ENDIF
71    0173                 ENDIF
72    0173              
73    0173                 IFDEF CLIB_OPT_SCANF
74    0173              
75    0173                    IF __SDCC_IY
76    0173              
77    0173                       INCLUDE "../../stdio/z80/asm_vfscanf_unlocked_iy.asm"
78    0173              
79    0173                    ELSE
80    0173              
81    0173                       INCLUDE "../../stdio/z80/asm_vfscanf_unlocked.asm"
82    0173              
83    0173                    ENDIF
84    0173              
85    0173                 ENDIF
86    0173              
1980  0173              
1981  0173              
1982  0173              
1983  0173              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1984  0173              ;; none ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1985  0173              ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
1986  0173              
1987  0173              
1988  0173              
